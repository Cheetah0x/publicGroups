{"noir_version":"0.34.0+e0185e75e65df08b5334856f8bf63fa3aed7049a","name":"PrivateGroups","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"is_group_member","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"member","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"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","brillig_names":["is_group_member"]},{"name":"get_group_member","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"member","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_note_internal","decompose_hint","pack_returns","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"admin","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"group_members","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},"visibility":"private"},{"name":"shared_secret","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+xdB5iTRRM+r1OOAxt20V/Fit8muRREOEURURGRoojAXXLB3nvFigqKImJHBRUr2FFQ6aBUKVJUei8CUqX6z8IXbzgWLkdmjh3J9zzvn7k1/zKzM/PubElyQMqO59UrU1Jq1t8hHwBIc19TATVKtMVesZxuaMs0/H8rG9qqGNqqGtoONLRVB+SXaDvW8L4ahrbjDG3HG9pOctvwc4D7mu++eh2/z1cU8BQprypwPKHCYJ7jyyv0B1VQ5QXzIp6g11sU9AUDocJQwAkpn7dIRfNC3qiz4/k8tbgvJ6HHE+bU84u91zOvZEPMf+lIVz0O21y5ZkqxfDKSv3DfE/v/fQl/fwX4GvBNanF77EkrMQZOYo86hbCvL1PpfNOPLIYch3P8TiXs6yvC8fuWcPxMsd0Pxfa3SP4ayd+UiO3v4O/+gAGA7w2xnUrsm5NS6MbzB7rxVJiPdb814DUDjW3J5wDicTkghTY2YjrGbPgRbBoIGAQYDBiSWopBiTpnKJlzVCGnnsP2Xk9fyQZTUg5FyfcjkgcjeViJpBwOf48AjAT8VA4TzkDCRBpOSJg/MxPmz8gHI5A8Esk/lfDNKPh7NGAMYKzBN9TxOW7vx8Abzxjg+ByE5FFIHldiDMbD378AJgAmlsMYTKKLg6hpDCYhW4cgefwexmAy/P0rYApgahwTZ6JjQDhBqMlMhRy136fR6Rkx+X0a8q/2V0z+bg9+nw5//wb4HfBHORRMgwn5dDqh33VhUSmlfIojwvnJwfrOSGVUWHdO3e9MwmDgsntmavEAE/XLulrEfSU6pgMJ/TNLaLLOYkrW2amMCs9mSNY5liertnsOU7JSVwIzXV2pZ9eZqXb6Wyes3spG7vn3oY6DQ1J4iJoorlRMwGMx1/1jXmrKznvp+j/MLNGm31SjhFLUswgexL10vsd1vppLGEjzmEp96kSktHm+oa9CJxzJU4X+SEAVFeQFw+GQVylPgb/AX+gJRosK81QwLwh9hgs8QfjnPAVhVeQU+IvKc+aczzRzLkhlVHgBw8y50PKZU9u9UMjMOc/VlSphY/1S+mgRceDHiF/3e1zKzg81cc0jHIfFdOOQh8dhcSr/AfMSwkpK61YB+Ur/vSR114Nb/SxN5bVrGZldKsCp53KsZ1TlFRVGCwoCRaqw0ImocJ7PEw7l+QqCUb+TF3JCESda4BTkRSNBT0h5PIXRSFFY5RX6CiIFyu/FelLny1LCfPmTLubCpv3BZSjmliP5zz3sD66Av1cCVgH+cvcHM1KK9xhLPtRzE1fBR63nCkI9M5Geq91BXuO+rnVf17mv61OLL3zoZwP8/TdgI2ATYDNgC2Cr9ivgH/3/AyI9AJAKSAOkAzIAmYAsQDagAqAioBKgMiAHUAWQC6gKqAY4EHAQ4GDAIYBDAdUBhwEOBxwBOBJwFOBowDElb0StTy0+mS6vqnQNU1V6bBqjwrpz6n5rpNldlWq7a6QVDzBRv+W6ebiWKdiOS2NU+DiGYDve8mDTdh8vPNjWMQXb/9IYFf4fQ7CdYHmwabtPYAg2Dl01Ax+fRl/fn5gmM8nWMyXZSWmMCp/EkGQ1LU8ybXdNIUmmyeBEhiQ7OY02WEsuKNegheNaJK9P3f1lwFNAp1MBpwFOT+O/DEg4K6pTCGP+DGbf6P5jPjgVyach+fS0nX1TC/4+E+AAVNrO/VHGpc7Lkxni3UM3pio1ZeeHOudXE04kscW/F+z3AfIAfkAAEASEALUBZwHqAM4G1AXU0+MFOAdwLqA+4DzA+YAGgAsADQEXAhoBLgJcDLgE0BhwKaAJ4DJAU8DlgGaA5oAWgJaAKwBXAlql7dgwwut/rxsDuM1naMsztPkNbQFDW9DQFjK01Ta0nWVoq2NoO9vQVtfQVs/Qlm9oO8fQdq6hrb6h7TxD2/mGtgaGtgsMbQ0NbRca2hoZ2i4ytF1saLvE0NbY0Hapoa2Joe0yQ1tTQ9vlhrZmhrbmhrYWhraWhrYrDG1XGtpapRVzTOyJ8W++++ok9uzEOYlyrTct8b6KojseXxqdXo1r82wYl/RFgjZH8ujGL+Sn60sFCH1xqQhfFKkg2fiFVYisr6CqTeiLJiJ84aizqMavyFF1qPoKO+psQl9cJsEXQUfVpRo/mHvqEfVVBH3lE/qiqQBfhMHmc4jGLwh9nUvUF5is6hP64nL7fVGkbT6PZvzCuq/zafoK6r4aEPqimf2+0F2rC0jGr2h7Xw1J+gpv7+tCQl80t94Xwe02NyIZv+1qqoso+ira0dfFhL5oYbsvwjtsvoRi/II7+mpM0dcOk9WlhL5oabkvIq7NTQhsLnT7uoygr4DbV1NCX1xhty/+/TTC5YnbrGJ9NUu4r2A01ldzQl9cabUvgoUxm1skPn4xm1XLhPsK/NvXFYS+aGW1L/L+tfnKhG1W//bVKo1uzxLv5yXqi6vKyRdOYo8i3DdThPs+6jJCX7QW4gvC/QFFuL5VzQh9cbUQXxCugxRhHa9aEvqijRBfENZ7irBeUa0IfdFWiC8I5zVFyMvqakJftGPyRRqxLwjzVxHGn+Iav9QS42fDufK/9R5hHar7oL4DpO9bedLo70G1TqP1NbXd+kNKXga776htt906Hlsz2H1nOXFjwnUmYT4S+lrdaXnc6Hy5iiFu7rHcbi9TvtwrJF/aEOYLoa8V1/hR+7ltmgw92+29np6SDVq3knfBNe/G7ny3QXJbJLdL2/kueAH8XQgIAyJpu78L7iT2KP1hZR9Djj/AzG2J6qdtLmCw+0Eha9YCwjq/iJAnCeNGSfGFzkEqX0TTeHLYprwwcWwR4tJonBzbHv6+BnAt4DpGjtVfBpHHwDUdLOdYbXN7BrsfEZLX7Qlz8XpCjiWMGyXFFxsJOfaGNJ4ctikvTBx7PeLSG+Lk2Bvh75sANwNuYeRY/WU7fgauedxyjtU238hg9xNC8vpGwly8lZBjCeNGSfHFJkKOvS2NJ4dtygsTx96KuPS2ODn2dvj7DsCdgLsYOVZ/mVmAgWuespxjtc23M9j9tJC8vp0wF+8m5FjCuFFSfLGZkGPvSePJYZvywsSxdyMuvSdOjr0X/r4PcD/gAUaO1V8WGWTgms6Wc6y2+V4Gu58Vktf3Eubig4QcSxg3SoovthBy7ENpPDlsU16YOPZBxKUPxcmxD8PfHQCPAB5l5Fj9ZbwhBq553nKO1TY/zGD3C0Ly+mHCXHyMkGMJ40ZJ8cVWQo59PI0nh23KCxPHPoa49PE4OfYJ+PtJQEfAU4wcq7/svDYD13SznGO1zU8w2P2SkLx+gjAXnybkWMK4UVJ8sY2QY59J48lhm/LCxLFPIy59Jk6O7QR/dwY8C3iOkWP1j0mcxcA1r1jOsdrmTgx2vyokrzsR5mIXQo4ljBslxRf/EHLs82k8OWxTXpg4tgvi0ufj5NgX4O+ugBcB3Rg5Vl8qr8PANW9YzrHa5hcY7H5TSF6/QJiLLxFyLGHcKCm+SCH0Rfc0nhy2KS9MHPsS4tLucXLsy/D3K4BXAa8xcqz+MbSzGbjmbcs5Vtv8MoPd7wjJ65cJc/F1Qo4ljBslxRcHUPJiGk8O25QXJo59HXHpG3Fy7Jvwdw/AW4C3GTlW/9hkXQaueddyjtU2v8lg93tC8vpNwlx8h5BjCeNGSfFFKqEveqbx5LBNeWHi2HcQl/aMk2N7wd/vAt4DvM/IsfrHfOsxcM0HlnOstrkXg90fCsnrXoS52JuQYwnjRknxRRqhLz5I48lhm/LCxLG9EZd+ECfHfgh/fwT4GPAJI8fqH0vPZ+CaTyznWG3zhwx2fyokrz8kzMVPCTmWMG6UFF+kE/qiTxpPDtuUFyaO/RRxaZ84ObYv/P0Z4HPAF4wcm5FW/BuIuN9Ex/QzyzlW29yXwe7PheR1X8Jc/JKQYwnjRknxRQahL75K48lhm/LCxLFfIi79Kk6O/Rr+/gbQD/AtI8dmphX/pizuN2FfW86x2uavGez+Wkhef02Yi98Rcixh3Cgpvsgk9EX/NJ4ctikvTBz7HeLS/nFy7AD4+3vAD4AfGTk2K634N7pxv4mO6beWc6y2eQCD3d8JyesBhLk4kJBjCeNGSfFFFqEvBqXx5LBNeWHi2IGISwfFybGD4e8hgKGAYYwcmw19n8fANd9bzrHa5sEMdv8gJK8HE+bicEKOJYwbJcUX2YS+GJHGk8M25YWJY4cjLh0RJ8eOhL9/AvwMGMXIsRWg7/MZuGaQ5RyrbR7JYPdgIXk9kjAXRxNyLGHcKCm+qEDoizFpPDlsU16YOHY04tIxcXLsWPh7HGA84BdGjq0IfTdg4JphlnOstnksg93DheT1WMJcnEDIsYRxo6T4oiKhLyam8eSwTXlh4tgJiEsnxsmxk+DvyYBfAVMYObYS9H0BA9f8ZDnHapsnMdj9s5C8nkSYi1MJOZYwbpQUX1Qi9MW0NJ4ctikvTBw7FXHptDg5djr8/Rvgd8AfjBxbGfpuyMA1YyznWG3zdAa7xwrJ6+mEuTiDkGMJ40ZJ8UVlQl/MTOPJYZvywsSxMxCXzoyTY2fB37MBcwBzGTk2B/q+kIFrfrGcY7XNsxjsniAkr2cR5uI8Qo4ljBslxRc5hL6Yn8aTwzblhYlj5yEunR8nxy6AvxcCFgEWM3JsFei7EQPXTLacY7XNCxjs/lVIXi8gzMUlhBxLGDdKii+qEPpiaRpPDtuUFyaOXYK4dGmcHLsM/l4O+BOwgpFjc6Hvixi4ZprlHKttXsZg93Qheb2MMBdXEnIsYdwoKb7IJfTFqjSeHLYpL0wcuxJx6ao4OfYv+Hs1YA1gLSPHVoW+L2bgmj8s51ht818Mds8Qktd/EebiOkKOJYwbJcUXVQl9sT6NJ4dtygsTx65DXLo+To7dAH//DdgI2MTIsdWg70sYuGa25Ryrbd7AYPccIXm9gTAXNxNyLGHcKCm+qEboiy1pPDlsU16YOHYz4tItcXLsVv034J+0HY1cHHsg9N+YgWvmW86x2uatDHYvkPI7fYS5eEA6nV6EcaOk+OJAQl+kpvPksE15YeJYHYMxLk1Nj49j0zSvAjIAmYwcexD8u5cycM1iyzlW26zHmLrfJVK+s5QwF7MIOZYwbpQUXxxEyLHZ6Tw5bFNemDg2C/FqdpwcWwGEioBKgMqMHHsw/LtNGDh2ueUcq22uwMCxf0r5/CZhLuYQcixh3CgpvjiYkGOrpPPksE15YeLYHMSrVeLk2FwQqgKqAQ5k5NhD4N+9jIFjV1nOsdrmXAaO/UvKWTZhLh5EyLGEcaOk+OIQQo49OJ0nh23KCxPHHoR49eA4OfYQEA4FVAccxsixh8K/25SBY9dazrHa5kMYOHadlLwmzMXDCTmWMG6UFF8cSsixR6Tz5LBNeWHi2MMRrx4RJ8ceCcJRgKMBxzBybHX4dy9n4Ni/LedYbfORDBy7UUheH0mYi8cScixh3CgpvqhOyLE10nly2Ka8MHHssYhXa8TJsceBcDzgf4ATGDn2MPh3mzFw7BbLOVbbfBwDx24VktfHEebiiYQcSxg3SoovDiPk2JPSeXLYprwwceyJiFdPipNja4JwMuAUwKmMHHs4/LvNGTg25Sy7OVbbXJOBYw84S0Ze1yTMxdMIOZYwbpQUXxxOyLGnp/PksE15YeLY0xCvnh4nx54BQi3AmQCHkWOPgH+3BQPHplvOsdrmMxg4NkNIXp9BmIuKkGMJ40ZJ8cURhBzrSefJYZvywsSxCvGqJ06O9YLgA+QB/IwceyT8uy0ZODbbco7VNnsZOLaCkLz2EuZigJBjCeNGSfHFkYQcG0znyWGb8sLEsQHEq8E4OTYEQm3AWYA6jBx7FPy7VzBwbGXLOVbbHGLg2BwheR0izMWzCTmWMG6UFF8cRcixddN5ctimvDBx7NmIV+vGybH19FgBzgGcy8ixR8O/eyUDx1a1nGO1zfUYOLaakLyuR5iL9Qk5ljBulBRfHE3Iseel8+SwTXlh4tj6iFfPi5NjzwehAeACQENGjj0G/t1WDBx7sOUcq20+n4FjDxGS1+cT5uKFhBxLGDdKii+OIeTYRuk8OWxTXpg49kLEq43i5NiLQLgYcAmgMeLY2JNK7OdqKXTjeVE6T2ynlbA5UT1XpNKN35pUOr0uJRy/DOijUkrxXIIf6vmaUm+sb5N0RoWbpNP3exnl4T6T3ZchRiHqd3uwpaYUkxNnsBEmr8Op55pUnqRoiuKW/lOwhFWT1i3N1TGmdAZq4w4USgfgwL7cTaBm2iYOBzRlYKamxFMzl92pjHYnfCWReQydxB6lA7M5w/KxBfH0HiMA3W8Ht1/qsWjGNBYtmcaiJeNYaCLkGIvDLN9O4cqHw/et3eFS9GOL/SOYti5KLu+cxB5FGJeK0NeKcvx0IaXrEFPFnVLG8SwtnnCfHHMW1ZjgovKKPVXJTmKPas40CWCly6izKu3f0TpfwUAKx1iyn1mW4i3hs9B0OwnmmLN44vJKVJzsrX9KG3NK/7RCfSmvF3IjElDRSNSbFwh5CpXf6/dHfdGAP+iLRPN8BZFAkfIVeD2hooATVcGiokCeNxzwR0ORsD+KSVtFvF5fJFQYVnkef0GhE4x4C5yoL+D1OAURbyAS8Qb9/gKvN+IPRoOhoMdTEPUGnbxAIOT4Pd6Qh8s/rVz/lOfqmnIbBk9iV7mB1VoKgXPpdxUDWV/NNHFdzbh60WPRmmEs2jCNRRvGsVjBtJKrYfuHQZny4TjLV3JcsX+8kJUcYVwqQl+r45MruZKPuoppJddW4kquLfNKri0DKZy0H67k2qXbSTAnMa0U2glbyRUQruSOJ1zJcfmnAK3kdjcp2LwFx6kn1wRTKHGCKWSeYAoZJpiTy2mCoTznteisaKcJJlG9TimnFUCieoYJJ2jC+FOnME0A4Tgm6ETHNJJONxHutD1q0QR9MpN/Iv+hrdYiN7CipotMTmKP2t2FHsobagl/HzkhuXA4PjaG1KTKNYaJ9tXecn/ohGnPUBhdw1QkXsO4FR1lGotrmcbiWuZteY6xON3ybXmufDjD8m15rtivJWRbnjAuFaGvVa3ktnzJZ/ucRTUmuNi9jnPXpD3TJHAd466J1vk6BlLwCNmWb09YCF6fbifBeJhWldeXw7Y8pX9uINyWr0W46ufyzw37YNXP9fGlG93AukkKgXPpdyMDWd/MNHHdzLh60WNxE8NY3MI0Frek835UhqOy91m+kuPKhzzLV3Jcse8XspIjjEtF6GvlT67kSj7qRqaV3K0SV3K3Mq/kbmUghdr74UrutnQ7CaY200rhNmErudsJV3J+wpUcl39u3wcXrCi34Dj15Jpg7pA4wdzBPMHcwTDB1BFywYqSwM5gqmAT/h5tIRes7iScoAnjT53NNAHcWQ4XrO4ivGBV6yw7J+g6TP65y+Af6lUvvlCV8G+sE/Z1N+FcVp7f/3c3U+FwTzqjwvek0/d7L+HExmX3venFA0zUb7l+/x9OOCfBh1NPylubOCnu21M1nWjQ3UtYDWBWjyn9X7g2e7+bQA+Yrs1SOOA+Bma6j/lAjsruVEa7E9XxQcsPNXVgPsiwrHyIaYn9EONB3gNMY/Ew01g8zHw9lWMs8i0/1OTKh3MsP9Tkiv1zhRxqEsalIvS1Ojd5qFny2T5nUY0JLio7cO45P8g0CXRg3HPWOndgIIUGQg41HyQsBB9Jt5NgGjDtyT1SDoealP55lPBQ81zCPVMu/zy6D66nUm7D4EnsMTewHpdC4Fz6PcZA1k8wTVxPMK5e9Fg8zjAWTzKNxZOMY7GOaSXX0PKVHFc+XGj5So4r9hsJWckRxqUi9LVqlFzJlXzUY0wruY4SV3IdmVdyHRlIofF+uJJ7Kt1OgmnMtFJ4SthK7mnClVwjwpUcl3+e3gfXUym34Dj15JpgnpE4wTzDPME8wzDBNBFyPZWSwM5hqmAT/gooIddTOxFO0ITxpy5jmgA6lcP11M6E11PPPcvOCboJk386/4e2Wp91A+s500UmJ7FH7e5CD+UNtUT7IrwUxfJ9c7ExpCZVrjFMtK8ulvtDJ0wXhsLoeaYi8XnGrejnmMbiBaaxeIF5W55jLJpZvi3PlQ/NLd+W54r9FkK25QnjUhH6WrVIbsuXfLbPWVRjgovdrpy7Jl2YJoGujLsmWueuDKTQSsi2fBfCQvDFdDsJphXTqvLFctiWp/RPN8Jt+RaEq34u/3TbB6t+ro8vveQGVncpBM6l30sMZP0y08T1MuPqRY9Fd4axeIVpLF5J5/2oDEdl39rylRxXPlxt+UqOK/bbCFnJEcalIvS1apNcyZV81EtMK7lXJa7kXmVeyb3KQAqF++FK7rV0OwmmkGml8JqwldzrhCu5NoQrOS7/vL4PLlhRbsFx6sk1wbwhcYJ5g3mCeYNhgokIuWBFSWDNmSrYhH8bS8gFqzcJJ2jC+FNFTBPAm+VwwaoH4QWrFmfZOUFHmPzTYw+7OxT3Xrqk03/JECWfvWX5zukJ4KiaafS+eZvZborfTG3PEDuU34X7juVjqGP77XT6XSzCnFFvE/qjp+X+0PHSk6EO7cV8jy9R/fQufy8Gu685y27uXsNk97VMtS411xL6R11r+YnOWiZfv0vIaeX5HcWUemN930tnVPi9dPp+3yec4Ljsfj+9eICJ+t0ebLHvKeYOtpopPIRIrec8wjsmlZGevV3/feC+fui+fuS+fuy+fuK+fuq+9nFf+7qvn7mvn7uvX+xpJzHRYH6fsGrBK9oPXaVx2yeGtr6GtpjB5cmUvZmY8st0RoW/ZGDKryxnSm33V0xMWV7B9gFTsH2dzqjw1wzB9o3lwabt/oYh2Ey6Jmr/h25iUK8fKAmhn9A6+iOmhP02nVHhbxkS9jvLE1bb/Z3w2eFjpmDrn86ocH+GYBtgebBpuwcImR0+cRODenagJITvLT8F0pVAP4bdpR8st1vH+PcMdv8otBr4lImgB6YzKjyQgaAHWU7Q2u5BwquBPkzBNjidUeHBDME2xPJg03YPEVIN9HUTg7oaoCSEoZbPinrW/pFhVhxmud06xocy2D1caDXwGRNBj0hnVHgEA0GPtJygtd0jhVcDnzMF20/pjAr/xBBsP1sebNrun4VUA1+4iUFdDVASwijLZ0U9aw9nmBVHW263jvFRDHaPIbY79qQS60l5sWQs8w1CJ7FH6Vgcw+DrcUy+ptZzPJmeXh+nnr/svZ6Rkg1at+opxZ8W0X/rcdjmyr2R/AGSf3Hl2P9vAggTAZMAk9OL22MP9e3oDwlzaQJhjv/KFOvU40d44qkmEo7fFCHjR3iIpyYRjt9U4gVESW74FXHAFCRPRfLkEtwwDYTpgN8Av5cDN3xC6JtphL75Q0hsE55/qOmE4zdDyPgRbumr3wjHbyYzN/yBOGAGkmci+fcS3DALhNmAOYC55cANfQl9M4vQN/OExDbhbqiaTTh+84WMH+EGn5pDOH4LmLlhHuKA+UhegOS5JbhhIQiLAIsBS8qBG74g9M1CQt8sZfbNUuSDRUhejOQlJXyzDITlgD8BK9J37g/7hGLPZBzD3uVYQv+stHwPT/tqJcO+zirL7eb6tOBfltutY3sVg903WP7pUG33Xwx23yjkk8CE/lE3En9XZWZK+RygUn5IMQfpudqd4Na4r2vd13Xu63r3dYP7+rf7utF93eS+bnZft7ivW93Xbel7+BCgk9ijCD8EuNPX2qxN3/XDfRsMbZsMbVvTy/9DgKuJxyH2/JPOqPA/6fT96lGP9eW18HR9e7ZlFA8wUb/lepVjDVOwHZDBqLDunLrfVMuDTdudyhBsJl0TtX+tmxjUpQMlIaRlyEzYdUwJm57BqHA6Q8JmWJ6w2u4M4bPDeqZgy8xgVDiTIdiyLA82bXeWkNlhg5sY1LMDJSFkZ/COoZPYs71aScug900Fy+3WMZ7NYHdFodXA30wEXSmDUeFKDARd2XKC1nZXFl4NbGQKtpwMRoVzGIKtiuXBpu2uIqQa2OQmBnU1QEkIuZbPinrWrsgwK1a13G4d47kMdlcTWg1sZiLoAzMYFT6QgaAPspygtd0HCa8GtjAF28EZjAofzBBsh1gebNruQ4RUA1vdxKCuBigJ4VDLZ0U9a1djmBWrW263jvFDGew+zHK7tV8OY7D78Axagt/TB7hWI3lN+u4/wHUE6HQk4CjA0Rn8ly3XEl62PIKQg44hjkmu8SM8rVJHEo7fsULGj/AARh1FOH41mLlBx3eMA45Fcg0kH52xMzccB38fD/gf4IRy4IYNhL45jtA3JwqJbcK9a3U84fidJGT8CLdj1f8Ix68mMzeciDjgJCTXRPIJJbjhZPj7FMCpgNPKgRs2EfrmZELfnC4ktgl3stQphON3hpDxI9ycUacSjl8tZm44HXHAGUiuheTTSnDDmfC33jlTAE85cMNWQt+cSegbL7NvvMgHDpIVkj0lfOODv/MAfkAgg+8DXPru+eEM+06UX8wTtHwfQvsqyLAPEWKOy0mpxfEXQrG4De1DjEvdOS5rw/vOAtQBnL2HuHQSe7Z/UOR9hg8L3WL5h6S0zbUZYulWIR+SIvSPutXyn8bUvl7LEON3WG63/nKosQx233lW+dSoiepZl47XFaGv1Z1MP69eF/EZRw5tYIileyzPoU+YcuheITlUjzCHCH2t7hUw52xiiJsHLLe7L1O+PCgkX/IJ84XQ1+pBpjknP6P4M80VUorrVP33ErTu0c829/WcjJSdHura9hzCPYtz6fwZNq0Nl6ExWo7kczN2vzasD//tPMD5gAbu2jDDfW9qyq4PdY5T/rIwp571Cdf1mUjPC9z4bei+Xui+NnJfL3Jz4mT3/RfD35cAGgMuBTQBXAZoCrgc0AzQHNAC0BJwBeBKQCvAVYDWgKsBbQBtAe0ABYBCQBgQARQBooD2gGsA1wKuA1wPuAFwI+AmwM2AWwC3Am4D3B4LnFhCa+VrpJTvFxI0JN6AiT13ZDAqfEcGfb93EjIXl913IvYm6rdcr5VeyBRsd2UwKnwXQ7DdbXmwabvvFh5sjZiC7Z4MRoXvYQi2ey0PNm33vQzBxqHrnW5iUK+x7suQmWQXMSXZ/RmMCt/PkGQPWJ5k2u4HhCSZJoP7GJLsQebDxoZo4Xghki9C8rASC8qH4L89DOgAeCSD/4IC4ayoHiKM+UeZffMo8sHDSO6A5EcydvbNY/D344AnAE9m8F1Q0Hn5IEO8dyT0dcnNDeqcv4DQ/7HF/1PQ59OAZwCdAJ0BzwKeA3QBPA94AdAV8CKgG+AlQHfAy4BXAK8CXgO8DngD8CagB+AtwNuAdwA9Ab0A7wLeA7wP6A34APAh4CPAx4BPAJ8C+gD6ZuzYMMLr/6cyijf0Ym1PG9qeMbR1MrR1NrQ9a2h7ztDWxdD2vKHtBUNbV0Pbi4a2boa2lwxt3Q1tLxvaXjG0vWpoe83Q9rqh7Q1D25uGth6GtrcMbW8b2t4xtPU0tPUytL1raHvP0Pa+oa23oe0DQ9uHhraPDG0fG9o+MbR9amjrY2jri/gw9sT4N999dRJ7duKcRLn2KYK+iqI7nqcJ9erAdHhT0hcJ2hx5hm78Qp3o+lKdCX3xiAhfFKlnycYvrJ4j6yuoulDWmyJ84ajnqcavyFEvUPUVdlRXQl88JsEXQUe9SDV+MPd0I+qrCPp6idAXjwvwRRhs7k40fkHo62WivsBk9QqhL56w3xdF2uZXacYvrPt6jaavoO7rdUJfPGm/L3TX6g2S8Sva3tebJH2Ft/fVg9AXHa33RXC7zW+RjN92NdXbFH0V7ejrHcp1j+2+CO+wuSfF+AV39NWLoq8dJqt3CX3xtOW+cH/6Wb1HYHOh29f7BH0F3L56E/riGbt94XH1VB8kbrOK9fVhwn0Fo7G+PiL0RSerfREsjNn8ceLjF7NZfZJwX4F/+/qU0BedrfZF3r8290nYZvVvX30Jz2Hwfl6ivni2nHzhJPYown0zRbjvox4j9MVzQnxBuD+gCNe36klCX3QR4gvCdZAirOPV04S+eF6ILwjrPUVYr6jOhL54QYgvCOc1RcjLqguhL7qW04eynMQeRZi/ijD+FNf4pZYYPxvOlWN9fUZYh+o+qO8A6ftWHRnuQX2eQetrarv1h5SeYrD7fcs/sKrj8XMGu3sL+cDqF4T5SOhr1dvyuNH58hlD3Hxkud1PMeXLx0Ly5UvCfCH0taIcP+3bkneXNU/E7ih/ieS2acVyu7Sd7y5/Be/7GvANoF8G35dY6Q/XPs0Qk30s/xIrbfNXDHb3FbLG+oqwLv2WMK8J40ZJ8cUlhL74LoMnh23KCxPHfot49bs4ObY/vG8A4HvAD4wcq7+84BkGrvnCco7VNvdnsPtLIXndnzAXfyTkWMK4UVJ80ZjQFwMzeHLYprwwceyPiFcHxsmxg+B9gwFDAEMZOVZ/OUwnBq75xnKO1TYPYrC7n5C8HkSYi8MIOZYwbpQUX1xK6IvhGTw5bFNemDh2GOLV4XFy7Ah430jAT4CfGTlWf/lWZwau6W85x2qbRzDYPUBIXo8gzMVRhBxLGDdKii+aEPpidAZPDtuUFyaOHYV4dXScHDsG3jcWMA4wnpFj9ZcbPsvANT9azrHa5jEMdg8UktdjCHPxF0KOJYwbJcUXlxH6YkIGTw7blBcmjv0F8eqEODl2IrxvEmAy4FdGjtVfHvscA9cMsZxjtc0TGeweKiSvJxLm4hRCjiWMGyXFF00JfTE1gyeHbcoLE8dOQbw6NU6OnQbvmw74DfA7I8fqL+fuwsA1IyznWG3zNAa7RwrJ62mEufgHIccSxo2S4ovLCX0xI4Mnh23KCxPH/oF4dUacHDsT3jcLMBswh5Fj9Y8fPM/ANaMs51ht80wGu0cLyeuZhLk4l5BjCeNGSfFFM0JfzMvgyWGb8sLEsXMRr86Lk2Pnw/sWABYCFjFyrP5xmRcYuGac5RyrbZ7PYPd4IXk9nzAXFxNyLGHcKCm+aE7oiyUZPDlsU16YOHYx4tUlcXLsUnjfMsBywJ+MHKt/vKsrA9dMtJxjtc1LGeyeJCSvlxLm4gpCjiWMGyXFFy0IfbEygyeHbcoLE8euQLy6Mk6OXQXv+wuwGrCGkWP1jyO+yMA1UyznWG3zKga7pwrJ61WEubiWkGMJ40ZJ8UVLQl+sy+DJYZvywsSxaxGvrouTY9fD+zYA/gZsZORY/eOz3Ri45jfLOVbbvJ7B7t+F5PV6wlzcRMixhHGjpPjiCkJfbM7gyWGb8sLEsZsQr26Ok2O3wPu26vcC/mHkWP3j3i8xcM1MyzlW27yFwe5ZQvJ6C2EupmQSnsURcqwUX1xJ6IsDMnly2Ka8MHGsjsEYlx6QGR/HpsL70gDpgIxMPo5tlVH8m32434TPmi3nWG2zHmPqfucJyetUwlzMJORYwrhRUnzRipBjszJ5ctimvDBxbCbi1aw4OTYb3lcBUBFQiZFjr8oo/g1U3G+iY7rQco7VNmczcOwiIXmdTZiLlQk5ljBulBRfXEXIsTmZPDlsU16YOLYy4tWcODm2CrwvF1AVUI2RY1tnFP+mNO430TFdajnHapurMHDsMiF5XYUwFw8k5FjCuFFSfNGakGMPyuTJYZvywsSxByJePShOjj0Y3ncI4FBAdUaOvRr8+yoDx66wnGO1zQczcOxKIXl9MGEuHkbIsYRxo6T44mpCjj08kyeHbcoLE8cehnj18Dg59gh435GAowBHM3JsG/Dvawwcu9pyjtU2H8HAsWuE5PURhLl4DCHHEsaNkuKLNoQce2wmTw7blBcmjj0G8eqxcXJsDXjfcYDjAf9j5Ni24N/XGTh2veUcq22uwcCxG4TkdQ3CXDyBkGMJ40ZJ8UVbQo49MZMnh23KCxPHnoB49cQ4OfYkeF9NwMmAUxg5th349w0Gjt1kOcdqm09i4NjNQvL6JMJcPJWQYwnjRknxRTtCjj0tkyeHbcoLE8eeinj1tDg59nR43xmAWoAzGTm2APz7JgPHbrOcY7XNpzNw7D9C8vp0wlx0CDmWMG6UFF8UEHKsyuTJYZvywsSxDuJVFSfHeuB9XoAPkMfIsYXg3x4MHJtax26O1TZ7GDg2rY6MvPYQ5qKfkGMJ40ZJ8UUhIccGMnly2Ka8MHGsH/FqIE6ODcL7QoDagLMYOTYM/n2LgWMzLedYbXOQgWOzhOR1kDAX6xByLGHcKCm+CBNy7NmZPDlsU16YOLYO4tWz4+TYuvC+enq8AOcwcmwE/Ps2A8dWtJxjtc11GTi2kpC8rkuYi+cScixh3CgpvogQcmz9TJ4ctikvTBx7LuLV+nFy7HnwvvMBDQAXMHJsEfj3HQaOrWI5x2qbz2Pg2FwheX0eYS42JORYwrhRUnxRRMixF2by5LBNeWHi2IaIVy+Mk2MbwfsuAlwMuISRY6Pg354MHHug5RyrbW7EwLEHCcnrRoS52JiQYwnjRknxRZSQYy/N5Mlhm/LCxLGNEa9eGifHNoH3XQZoCrickWPbg397MXDsoZZzrLa5CQPHVheS100Ic7EZIccSxo2S4ov2hBzbPJMnh23KCxPHNkO82jxOjm0B72sJuAJwJSPHXgP+fZeBY4+wnGO1zS0YOPZIIXndgjAXWxFyLGHcKCm+uIaQY6/K5Mlhm/LCxLGtEK9eFSfHtob3XQ1oA2jLyLHXgn/fY+DYYyznWG1zawaOPVZIXrcmzMV2hBxLGDdKii+uJeTYgkyeHLYpL0wc2w7xakGcHFsI7wsDIoAiRo69Dvz7PgPHHm85x2qbCxk49n9S7mQS5mKUkGMJ40ZJ8cV1hBzbPpMnh23KCxPHRhGvto+TY6+B910LuA5wPSPHXg/+7c3AsSdZzrHa5msYOLamlPUpYS7eQMixhHGjpPjiekKOvTGTJ4dtygsTx96AePXGODn2JnjfzYBbALcycuwN4N8PGDj2VMs5Vtt8EwPHniYkr28izMXbCDmWMG6UFF/cQMixt2fy5LBNeWHi2NsQr94eJ8feAe+7E3AX4G5Gjr0R/PshA8fWspxjtc13MHDsmULy+g7CXLyHkGMJ40ZJ8cWNhBx7byZPDtuUFyaOvQfx6r1xcux98L77AQ8AHmTk2JvAvx8xcKzHco7VNt/HwLFeIXl9H2EuPkTIsYRxo6T44iZCjn04kyeHbcoLE8c+hHj14Tg5tgO87xHAo4DHGDn2ZvDvxwwc67ecY7XNHRg4NiAkrzsQ5uLjhBxLGDdKii9uJuTYJzJ5ctimvDBx7OOIV5+Ik2OfhPd1BDwFeJqRY28B/37CwLG1LedYbfOTDBx7lpC8fpIwF58h5FjCuFFSfHELIcd2yuTJYZvywsSxzyBe7RQnx3aG9z0LeA7QhZFjbwX/fsrAsXUt51htc2cGjq0nJK87E+bi84QcSxg3SoovbiXk2BcyeXLYprwwcezziFdfiJNju8L7XgR0A7zEyLG3gX/7MHDsuZZzrLa5KwPH1heS110Jc7E7IccSxo2S4ovbCDn25UyeHLYpL0wc2x3x6stxcuwr8L5XAa8BXmfk2NvBv30ZOLaB5RyrbX6FgWMvEJLXrxDm4huEHEsYN0qKL24n5Ng3M3ly2Ka8MHHsG4hX34yTY3vA+94CvA14B3Fs7Ekl9nO1FLrx7JHJE9tpJWxOeG7NoBu/hoR50pNw/ECtlEopxXMJfqjna0q9sb69MhkV7pVJ3++7hETHZfe7mcUDTNTv9mBLTSkmJ85gI0xeh1PPhhk8SfEeilv6b3MhrJq0bmmujjGlM1Abd6BQOgAH9vtuAvXWNnE44D0GZnqPeGrmsjuV0e6EP1rDPIZOYo/SgfkBw/LxQ+LpPUYAut8Obr/UY9GbaSw+YhqLjxjHQhMhx1g0sv0rHZhi4KJ9a3e4FP3YYv9ipq2Lkss7J7FHEcalIvS1ohw/XUjprQFTxZ1SxvEsLZ5wnxxzFtWY4KLy4z1VyU5ij/qAaRLASpdRZ1Xav6N1/piBFJpYsp9ZluIt4Tt9mXYSTJM6PHH5CSpO9tY/pY05pX8+RX0prxdyIxJQ0UjUmxcIeQqV3+v3R33RgD/oi0TzfAWRQJHyFXg9oaKAE1XBoqJAnjcc8EdDkbA/iklbRbxeXyRUGFZ5Hn9BoROMeAucqC/g9TgFEW8gEvEG/f4CrzfiD0aDoaDHUxD1Bp28QCDk+D3ekIfLP5+6/inP1XV9ptV1H3d13VcKgXPp14eBrD9jmrg+Y1y96LHoyzAWnzONxeeMY1GfaSXX1PYvNWHKh8stX8lxxX4zISs5wrhUhL5WzZIruZKP6sO0kvtC4kruC+aV3BcMpHDFfriS+zLTToK5gmml8KWwldxXhCu5ZoQrOS7/fIVWcrubFGzeguPUk2uC+VriBPM18wTzNcME06qcJhjKc16Lzop2mmAS/nmTcloBJKrnN4QTNGH8qauYJoBv4pigEx3Tfpl0E+FO26MWTdCtmPzT7z+01fqtu9X6nekik5PYo3Z3oYfyhlrCv6tDSC4cjo+NITWpco1hon31t9wfOmH6MxRGA5iKxAGMW9HfMY3F90xj8T3ztjzHWLSxfFueKx/aWr4tzxX77YRsyxPGpSL0tWqX3JYv+Wyfs6jGBBe7P3DumvRnmgR+YNw10Tr/wEAKESHb8v0JC8EfM+0kmAjTqvLHctiWp/TPQMJt+XaEq34u/wzcB6t+ro8vDXJX/YOlEDiXfoMYyHoI08Q1hHH1osdiMMNYDGUai6HMH5XhqOyjlq/kuPKhveUrOa7Yv0bISo4wLhWhr9U1yZVcyUcNYlrJDZO4khvGvJIbxkAKN+yHK7nhmXYSzA1MK4XhwlZyIwhXctcQruS4/DNiH1yw+jaTJ++lTDAjJU4wI5knmJEME8xNQi5YURJYW6YKNlG9bhZyweonwgmaMP7UzUwTwE/lcMHqZ8ILVu3q2DlB38Tkn58N/qFe9dYn/M6+RoR9jSKcy8rz+/9GMRUOozMZFR6dSd/vGMKJjcvuMZnFA0zUb7l+/18jId//V5/p+//G7qmaTjToxhBWA5jVY0r/F67NjnMTaLzp2iyFA8YyMNNY5gM5KrtTGe1OVMdfLD/U1IH5C8OycgLTEnsC40HeeKaxmMg0FhOZr6dyjMVtlh9qcuXD7ZYfanLF/h1CDjUJ41IR+lrdkTzULPlsn7OoxgQXlZM495x/YZoEJjHuOWudJzGQwj1CDjV/ISwEJ2faSTD3MO3JTS6HQ01K//xKeKh5B+GeKZd/ft0H11MbMa2up7ir66lSCJxLvykMZD2NaeKaxrh60WMxlWEspjONxXTGsWjEtJK7z/KVHFc+3G/5So4r9h8QspIjjEtF6Gv1QHIlV/JRU5hWcr9JXMn9xryS+42BFDrshyu53zPtJJgOTCuF34Wt5P4gXMk9QLiS4/LPH/vgeuq4TJ68lzLBzJA4wcxgnmBmMEwwjwq5nkpJYLczVbCJ6vWYkOupMwknaML4U48xTQAzy+F66izC66l31LFzgn6UyT+z/kNbrbPdrdY5potMTmKP2t2FHsobaon2RXgpiuX75mJjSE2qXGOYaF9zLfeHTpi5DIXRPKYicR7jVvQcprGYzzQW85m35TnG4knLt+W58qGj5dvyXLH/lJBtecK4VIS+Vk8lt+VLPtvnLKoxwcXuAs5dk7lMk8ACxl0TrfMCBlLoLGRbfi5hIbgw006C6cy0qlxYDtvylP5ZRLgt/xThqp/LP4v2waqf6+NLi91V/xIpBM6l32IGsl7KNHEtZVy96LFYwjAWy5jGYhnzR2U4KvvnLF/JceVDF8tXclyx/7yQlRxhXCpCX6vnkyu5ko9azLSSWy5xJbeceSW3nIEUuu2HK7k/M+0kmG5MK4U/ha3kVhCu5J4nXMlx+WfFPrhgNTuTJ++lTDArJU4wK5knmJUME0x3IResKAmsI1MFm6heLwu5YLWKcIImjD/1MtMEsKocLlj9RXjB6qk6dk7Q3Zn889cednco7r3MzaT/kiFKPltt+c7pvVA5PZBB75s1zHZT/GZqf4bYofwu3LWWj6GO7TWZ9LtYhDmj1hD6Y53l/tDxso6hDl3PfI8vUf30Lv96Brtfq2M3dzdksvt1plqXmmsJ/aNet/xE50ImX28g5LTy/I7iDUybG39nMir8dyZ9vxsJJzguuzdmFg8wUb/bgy32PcXcwUapN6ee81Lp9KyM9Nzk+m+z+7rFfd3qvm5zX/+J+TnLtc99TXVf09zXdPc1I2sPO4mJBvNGwqoFr2i3uEmM2/4xtKVm7doWM7g8mXITE1NmZjEqnJlF329Wlt1Mqe3OyioeYKJ+y3Va3swUbNlZjApnMwRbBcuDTdtdgSHYTLomav8WNzGo1w+UhFAxS2bCbmVK2EpZjApXYkjYypYnrLa7svDZYRtTsOVkMSqcwxBsVSwPNm13FSGzwz9uYlDPDpSEkJvFO4ZOYs/2aqViFr1vqlput47xXAa7qwmtBlKyeAj6wCxGhQ9kIOiDLCdobfdBwquBA5iC7eAsRoUPZgi2QywPNm33IUKqgVQ3MairAUpCONTyWVHP2tUYZsXqltutY/xQBrsPE1oNpDER9OFZjAofzkDQR1hO0NruI4RXA+lMwXZkFqPCRzIE21GWB5u2+ygh1UCGmxjU1QAlIRxt+ayoZ+3DGGbFYyy3W8f40Qx2H0tsd+xJJdaT8mJJDTqbWb4JUMfisQy+Po54UqueUvzpBv33ePhjmyvr4+OYvBnJv7jvif3/jged/gc4AXBiVnF77KG+zbuF8B7G8YS8exJTHlKPH+EJnfof4fjVFDJ+hIdO6gTC8TuZmRt0fMc4oCaST0byiVk7c8Mp8PepgNMAp5cDN/xD6JtTCH1zhpDYJtyvV6cSjl8tIeNHuAWtTiMcvzOZueEMxAG1kHwmkk8vwQ0O/K0AHoC3HLghldA3DqFvfEJim3D3TinC8csTMn6EG1LKQzh+fmZu8CEOyEOyH8neEtwQgL+DgBCgdjlwQwahbwKEvjmL2TdnIR8EkRxCcu0SvqkDf58NqAuol7Vzf9gnFGv84xj22moQ+iff8j0n7at8hn2Icyy3m+vTbedabreO7XMY/N3D8k8zarvPZbD7LSGfXCX0j3qL+LsVM1PK6a4ZXV9ODtKzvns2dZ77er772sB9vcB9bei+Xui+NnJfL3JfL3ZfL3FfG7uvl2bt4UNrTmKP2kh8Qzr2wbPzs3b9MFpDQ9tFhrbGWeX/obX6TKfBTbIYFW7CcBp8meWnwdruy7KKB5io33K9enAeU7A1zWJUuClDsF1uebBpuy8XcvXgfDcxqEsHSkJoliUzYRswJWzzLEaFmzMkbAvLE1bb3UL47HABU7C1zGJUuCVDsF1hebBpu68QMjs0dBODenagJIQrLd880ZVAM4ZNhFaW261j/EoGu68SWg1cyETQrbMYFW7NQNBXW07Q2u6rhVcDjZiCrU0Wo8JtGIKtreXBpu1uK6QauMhNDOpqgJIQ2lk+K+pZ+yqGWbHAcrt1jLdjsLtQaDVwMRNBh7MYFQ4zEHTEcoLWdkeEVwOXMAVbURajwkUMwRa1PNi03VEh1UBjNzGoqwFKQmhv+ayoZ+1ChlnxGsvt1jHensHuay23W/vlWga7ryMm+D19gKt+VrF8XtbuP8B1Pfy3GwA3Am7K4r9seT7dGKjrCTnoZuKY5Bo/wtMqdQPh+N0iZPwID2DUjYTjdyszN9yMOOAWJN+K5JuyduaG2+Dv2wF3AO4sB25oSOib2wh9c5eQ2Cbcu1a3E47f3ULGj3A7Vt1BOH73MHPDXYgD7kbyPUi+swQ33At/3we4H/BAOXDDRYS+uZfQNw8KiW3CnSx1H+H4PSRk/Ag3Z9T9hOP3MDM3PIg44CEkP4zkB0pwQwf4+xHAo4DHyoEbGhP6pgOhbx5n9s3jyAePIPlRJD9WwjdPwN9PAjoCnsri+wCXvnt+HcO+E+UXyTxt+T6E9tXTDPsQzzDH5aTU4vh7BsXipUgel7pzXHaC/9YZ8CzguT3EpZPYs/2DIhsZPhzW0/IPSWmbOzHEUi8hH5Ii9I/qZflPOWpfX8Tg6/ctt1t/yUMNBrt7C/m59i6EdRChr1Vvpp8D74J8TR1L78MEtDqdPpY+sjyHeoPNYxns/lhIDj1PmEOEvlYfWx43Ol/WMMRNH8vt/oApX/oKyZcXCPOF0NeqL/GcU3KN8zxay7yA5LoZu1/jdIX3vQjoBnjJsC9CXfP+kErn5+6EfsZzuO63hitnpxTHp/67ZkrxWJ6K5K7uePsBL4P8Slb5fp78ZeL1c+x5NYtR4VcZLmq9ZvlFLW33a1nFA0zUb7neCnyFKdhez2JU+HWGYHvD8mDTdr/BEGwmXRO1/zVXV+p+3ySeJfTvhqelGMbUpzwer/IFQDUHdIyEg56iYEFeXkEozxPxRaIex5PnjxY5oFsk5AtBs0+FCxwn6hQURlXetpL9FQTDYLXfiTjwP9G8SBDM9oUivmDU6/h8EcevfE5hKFgUCahAQagwz+spiPq9TljleZ1ASG0j9rm2PdVkd4JjSq2n7q8H+PwtwNvuLFy5hO6xhzrf3mY6OSQecw8ei3dcfuiZlbLz1+Lo/7C1RFvPrF1nGOqjs7cJSLUouuN5h5CgezI5l7rEprS5F+pLBb0eT8Cr3xeMOMoXCXuCHk+k0OeEnYKwpyjkU6Goz+PzhiPhQuizQEWdaEE4FA3u0Ks8K5ReTBXKu1mMCr/LUKG8Z3mFou1+T0iF0tPVlfwMgzhYY2T9Pjrr5ljGvMlxrmH5+fcrTHZ/YLndXNX5h8Sxn+Pa3hvtf32A5A9dGzR6oPa3kBwrcj6C148Bn7hVpKapjJTdP/lEY83RdzTsj/rzIr4YP+CHOlZqptAXStQ6nipAx65MBSe1nh8J0bM7MdfEnk+zUnZ+qBX/VMjKozthsdmHaXO/j7u5z+EnfeD4N8PB2xeWHzh+ynTg+KWQA8e+hLFK6Gv1pYAD+o0McfON5Xb3YcqXfkLy5TPCfCH0terHfEDfFy0yPkNy/h4O6D+H930B+BLwVTkc0H9OOId/jf3sd/x+2B90irxOVDke2EAMhQrhrKJAFeWFlR/2FP1FYfh3wt5gXqgAjjsiQZ+vQAULw15YtwTLc/fwa6ZC8ZssRoW/Ydg97Gf57qG2ux/TYbq++ZGawh9snws5M8LE86075t+5r/3d1wH4eIh8dmNaEfRHW0IlGftbxNLfIbn/Hj428j38tx8APwIGMn5s5HM3+KnHub/lHxvRNn/PYPcApuopnVhPQsJQ3xP2RRg3aoDtFTxT7g1iOgoatIddD4qdmn5Z9JVoH8LiYzDTuA5G4xp7qO9DEMaEGkw4pkOYxnSIO6blWfFzbQ0PzWJUeChDxT/M8opf2z2MqeKvkLJrgOlneOzgLy2lfKJxOGE04iXMCHfgRpY8sKCmrOGEUTQi/r7CpfSlRhKn+W7vgib2lHYn0hOOKm9eUSDP8Rf48iJ+ryfiCTgRX15UwUB4Qj4YhmjYBzsoHm/UE/CEOe+CHuAGVmw5NNKVf4LXnwGjyvkO5iiBdzBHuwk5puQdzNHuHUz8UCfrKML7lqMJE3+MkFNPSpvHCr1vOZapfhqXxajwOIb6abzl9ZO2ezxD/WTSlYIAxjMssn9hWrj8wnjfUh+VrmM4MvzR8o2Wj5iOSgcKOSqdQLj4J/S1GijgasF6hrgZYrndHzPly1Ah+TKRMF8Ifa2GEl8twCtP/fcEtAKbiOR6GTteS1utTYLXyYBfy3m19qvA1doUt36aWnK1NqUcVmu/Eq7WphAWq1OFrNYobZ4mdLU2jWm1Nj2LUeHpDKu13yxfrWm7fxOyWpvq6krd7+9Mq7Xfs3ad4aj9R0mK3LpOItS1htvPH9DnDMBMwCzAbMAcwFzAPMB8wALAQsAiwGLAEsBSwDLAcsCfgBWAlYBVgL8AqwFrAGsB6wDrARsAfwM2AjYBNruzM/a51ic7Zee2GYa2mYa2WYa22Ya2OYa2uYa2eYa2+Ya2BYa2hYa2RYa2xYa2JYa2pYa2ZYa25Ya2Pw1tKwxtKw1tqwxtfxnaVhva1hja1hra1hna1hvaNhja/ja0bTS0bTK0bXbb8FPyKpCT2LNTzibKs3+QFZaOmkF5/mf5tSxts/bFTJLx2+HXWYn35Ymdec4m9MVIm33hKz7nnZOYzQ4+M56bSF+enc+f5xH64ic7feGUPHOfv5c2+6O7nt8v2Lu+gqa7AAsJffGzbb4Imu8/LCq7zYHd3aVYXNa+Aru/l7GE0Bej7PGFZ093UZaWxebAnu+1LIu/r1LvyCwn9MVoG3wRKFVP9Wd8Njtx2KxWxNOXE9f4qZWEvhizb32RF6eealVpNvvitln9tce+fNEyjJ9aTeiLsfvKF4Ey6anW7N7mYBltVmt301coWubxU+sIfTGu/H3h7IWear3JZmevbFYbdu1L7eX4qb8JfTG+PH0R2Ws91cadbfYmYLPahPryRBMaP7WZ0Be/lJMvnMQeRbg/oAjXtwqvzxK+BSLEF4TrIEVYx6vRhL6YKMQXhPWeIqxX1DhCX0wS4gvCeU0R8rKaQOiLyeV0Q8hJ7FGE+asI409Rjp+O30dSij+auNk9E9vonpFtcM/M1rlnaGvcM7W/3DO2le6Z25/uGdwy90xuiXtGt8g9s1vgnuHNc8/05rhnfLPcMz99DqDPFUo+JS91JBx7hHXPliyySx3l+qMMWG8nwQfruzWLUWHdOXW/2wiDgcvubSgpiPrdHmypKeVzbW9yFg/ZlxyTRBMQB/I/KNbIb6lsoxuQnb6cBCtdRp3DpV050zrr/st6xa60Qf+HMgGzeW7/6H477GUsKBi7sHKiTsgDOzmBsD9QGIp4CoMFUW80zxvx7u24lhbslON6ANO4HrD34/qfiNdUpnFN3c/jNY1pXNPccS3Pj/dTTp54sk93rxtlwOsBHBPcPwzV2j/ElQSX3WVNDqcMdieqY2Y27xg6iT1KB6bWkdo3WUykkLUHsnUSe1QG01hkM41FNuNYaCLkGIv5ln+DHVc+LNi3dpd6tYQr9hcK2XokjEtF6GtFOX66kNLbj6ZdiJQyjmdp8YT75JizqMYEF5UVsvewC+Ek9qhMpkkAK11GnVVp/47WuQIDKSy15GyoLMVbojZXzLaTYCh9geOyIipO9tY/pY05pX8qob6U1wu5EQmoaCTqzQuEPIXK7/X7o75owB/0RaJ5voJIoEj5CryeUFHAiapgUVEgzxsO+KOhSNgfxaStIl6vLxIqDKs8j7+g0AlGvAVO1BfwwoI/4g1EIt6g31/g9Ub8wWgwBIt0WPoHnbxAIOT4Pd6Qh8s/ldDqmmpSKG03B/cpZVKoLHFSqMw8KVRmmBSWWzIp7DaIAzs+mU9JOjmWTgrLmUgnh2BSKG1rk9I/VSydFLj8U+U/tOWa6265VjVtuTqJPbs976A8q0y0L8LtW8Xh+NgYUn/PENcYJtpXtWy7/aETphrDxH4gU5FzIOP2Z1WmsTiIaSwOYt4K5hiLFZZvBXPlw0rLt4K5Yn+VkK1gwrhUhL5Wq5JbwSWf7XMW1ZjgYvdgzlV/NaZJ4GDGVb/W+WAGUlgrZCu4GuGq8pBsOwlmLdOq8pBy2Aqm9M+hhKv+VYSrfi7/HGrwT1nv1JS29Uvpn+pM/FmdYBxK252iHIfDmMbhMGHxcDjTOBwuLB6OYBqHI+I4KrK5sDOoSxbHuGg8UmLReCRz0XgkQ9G43o7vEQqXJ8kdRdgXZdG4nqkoOSqOojHR2/WU/jk6m67QoywaufxzNMHkWMpD+p0Zx5DxZ5DlIvY2d5eV+kSJMsaPtfwEQ/v4WIb5pgbT3Kv7zXb/fiRl14fq34z1Rz3ebdPs1/E46kJSStD+bfnxirb5OAa7Nwr54pHjCIn5eEJiJowbRekLZpL895hifyTJ4/dXkvyf5R/P0zb/j8HuE5gqmhOyi79Zn+PjnqYK2UnsUZQV8omWx5NeUZ3IEE8nCcijkxjsrsmURzX3kEdOYg8bp2yx/PcXuWJgq5DfXzyZsEgk9LXayrRDdXJydc2u4ynchSPFKvMUhqRPOVvGKvMUAUmf8BcmnS2DgE+l3D6ls1lRjl9ylc5HtqdSkq3UWXFJqv06nsZ1eYF6FjudTlGP1IA6Pdt+Hc+QElC16BT1Sg2oWgIC6kwpAeXQKeqTGlCOgIBSUgLKQ6dontSA8ggIKK+UgPLRKeqXGlA+AQGVJyWg/HSKBqQGlF9AQAWkBFSQTtGg1IAKCgiokJSAqk2naEhqQNUWEFBnSQmoOnSKFkgNqDoCAupsKQFVl07RQqkBVVdAQNWTElD5dIqGpQZUvoCAOid5RuaoaQLOyM6Vkvn16RQtkhpQ9QVk/nnJzHfUJAGZf76UzG9ApqhypAZUAwGZf4GUgGpIF1BKakA1FBBQF0oJqEZ0ASX2/k4jAQF1kZSAupguoMTe37lYQEBdIiWgGtMFlNj7O40FBNSlUgKqCV1Aib2/00RAQF0mJaCa0gWU2Ps7TQUE1OXJ/R1HLROwv9NMSuY3p8t8sfdimgvI/BZSAqolXUCJvRfTUkBAXSEloK6kCyix92KuFBBQrZK1iaOGCqhNrpKS+a3pMl/sfZPWAjL/aikB1YYuoCJSA6qNgIBqKyWg2tEFlNh7Me0EBFSBlIAqpAuoqNSAKhQQUGGugKL+IT/CL/dUJxF+SWSEaQCpE7KITE9vQOumv9vqOKRrxP2CNi2fhuQzkHwmkhWSvUjOQ3IAySEkn4Xks5FcD8nnIPlcJJ+H5PORfAGSL0TyRUi+BMmXIvkyJF+O5GZIboHkK5DcCslXIflqJLdFcgGSw0gucuUo/E97wDWAawHXAa4H3AC4EXAT4GbALYBbAbcBbgfcAbgTcBfgbsA9gHsB9wHuBzwAeBDwEOBhQAfAI4BHAY8BHgc8kb3r7wlRE9YBdH05Ndx+ngS9OwKeAjwNeAbQCdAZ8CzgOUAXwPOAFwBdAS8CugFeAnQHvAx4BfAq4DXA64A3AG8CegDeArwNeAfQE9AL8C7gPdeB2q7Ylx0+ifwaa+toaHvK0Pa0oe0ZQ1snQ1tnQ9uzhrbnDG1dDG3PG9peMLR1NbS9aGjrZmh7ydDW3dD2sqHtFUPbq4a21wxtrxva3jC0vWlo62Foe8vQ9rah7R1DW09DWy9D27uGtveyi7+cNvZQf28hztlE5zGdG4n2VRTVj6M6ZtPplV5O3yGZiM3aF0+RjN8Ovz6deF+e2A8LP0PoiwybfeEr/jHlTonZ7OAfZu6cSF+enX/k+VlCX2Ta6Qun5A9bP7eXNvuju/5Idpe96yto+sHt5wl9kWWbL4LmHxl/oew2B3b3g+Vdy9pXYPc/fv4ioS+y7fGFZ08/+N6tLDYH9vzj8S/F31e4tB+i707oiwo2+CJQqp7q5fhsduKwWb0ST19OXOOnXiX0RcV964u8OPVUr5Vmsy9um9Xre+zLFy3D+Kk3CH1RaV/5IlAmPdWbu7c5WEabVY/d9BWKlnn81FuEvqhc/r5w9kJP9bbJZmevbFbv7NqX2svxUz0JfZFTnr6I7LWeqtfONnsTsFm9i/ryRBMaP/UeoS+qCPntBsL9AUW4vlV4fZaoL3KF+IJwHaQI63hVgdAXVYX4grDeU4T1iqpM6ItqQnxBOK8pQl5WuYS+OLCcfl/GSexRhPmrCONPUY5f7GywhvuKzyNKnlfg8wx83oHPQ/B5CT5Pwect+DwGn9fg8xx83oPPg/B5ET5PwudN+DwKn1fh8yx83oXPw/B5GT5Pw+dt+DwOn9fh8zx83ofPA/F5IT5PxOeNdyH5biTfg+R7kXwfku9H8gNIfhDJDyH5YSR3QPIjSH4UyY8h+XEkP4HkKJLbI/kaJF+L5OuQfD2Sb0DyjUi+Cck3I/kWJN+K5NuQfDuS70Dyna4cI5T34Y/egA8AHwI+AnwM+ATwKaAPoC/gM8DngC8AXwK+AnwN+AbQD/At4DtAf8AAwPeAHwA/AgYCBgEGA4YAhgKGAYYDRgBGAn4C/AwYBRgNGAMYCxgHGA/4BTABMBEwCTAZ8Gv2DpsqpxRzov67b1ZKyjZX/gzJ+Rk7XlPRe0eg/z7SladAv1MB0wAZbv+x/w9+YpyS7746iT1K/3tEfTkGdan69uCxmJ694/W3WIDFDnv1f9haQgHqiQsPWGIHtNHo9Gy6if83JkemEo8fpc2/o74UbPTDBr1+XzDiKF8Ettg9nkihzwk7BWFPUcgHe1w+j88bjoRh0zFYoKJOtCAcigZ36KWTrlJKcYLhhzrpfs+mLzL080c2o8J/ZNP3O4MwGLjsnpFdPMBE/Rp1pSCAGdn0/c4kDtYYWet+uW/TUZIit65TCHWt4fYzC/qcDZgDmAuYB5gPWABYCFgEWAxYAlgKWAZYDvgTsAKwErAK8BdgNWANYC1gHWA9YAPgb8BGwCbAZsAWPQkDtrmzM/b5rOxdb2jNNrTNMbTNNbTNM7TNN7QtMLQtNLQtMrQtNrQtMbQtNbQtM7QtN7T9aWhbYWhbaWhbZWj7y9C22tC2xtC21tC2ztC23tC2wdD2t6Fto6Ftk6Fts6Fti6Ftq6FtWzb/zb8phPPXLLLC0lGzCfU6XsjNvzkk47fDr3MT7+vfm3/zCH3xPyE3/+YnZvNON/8WJNJXiZt/Cwl9cYKQm3+L9tJm082/xXvXl/Hm3xJCX5wo5Obf0rLbvNubf8vK2tcebv4tJ/TFSUJu/v1ZFptLufm3Iv6+Sr35t5LQFzWF3PxbFZ/Ncd38+yuevuK8+bea0BcnC7n5t6Y0m8tw829tNt3Nv3WEvjhFyM2/9dl0N/82ZNPd/Pub0BenCrn5tzGb7ubfpmy6m3+bCX1xmpCbf1uy6W7+bc2mu/m3jdAXpwu5VUO4P6AI17fqBMJbNWcI8QXhOkgR1vGqJqEvagnxBWG9pwjrFXUqoS/OFOILwnlNEfKyOoPQF46Qm3+E+asI409Rjp+O3ycBNdz+trlnYlvcM7JN7pnZ3+4Z2nr3TG2te8a22j1zW+Wewen9Bb1fofdp9L6P3kfS+2d6P07v7+l9Tb1Pqvdd9X6z3r/W++H6HGBWyUOQlF0vdSQae1MJ655/sskudTjleakD6+0k+OykbwVGhXXn1P0eUMHuSx3a7gMqFI8vUb/bgy01pXyu7U3N5iH7kmOSaALiQE5FsUZ+SwUHnZPYo/ApMla6jDqHS7typnXW/Zf1il1pg55KmIBpFWhZLTauut8OexkLSn+xn3KiTsgDOzmBsD9QGIp4CoMFUW80zxvx7u24lhbslOOazjSu6Xs/rv+JeM1gGteM/TxeM5nGNdMd1wzUVvKxefLEk32WW1Rk6zmDY4JLZajWUivQVhJcdpc1OZwy2J3wF6wwj6GT2KN0YFaoQO+bikykUHEPZOsk9qhsprGoxDQWlRjHQhMhx1jkn203p3Dlwzn71u5Sr5Zwxf65QrYeCeNSEfpaUY6fLqT09qNpFyKljONZWjzhPjnmLKoxwUVl5T3tQjiJPaoC0yRQeQ+7EKV0o0r7d7TOlRlIoYElZ0NlKd4S/uakCnYSDKUvcFzmoOJkb/1T2phT+qcK6kt5vZAbkYCKRqLevEDIU6j8Xr8/6osG/EFfJJrnK4gEipSvwOsJFQWcqAoWFQXyvOGAPxqKhP1RTNoq4vX6IqHCsMrz+AsKnWDEW+BEfQEvLPgj3kAk4g36/QVeb8QfjAZDsEiHpX/QyQsEQo7f4w15uPxTBa2uqSaF0nZzcJ9SJoVciZNCLvOkkMswKTS0ZFLYbRAHdnwyn5J0qlo6KTRkIp2qBJNCaVublP6pZumkwOWfav+hLdcD3S3Xg0xbrk5iz27POyjPKhPti3D7VnE4PjaGaULGMNG+DrbcHzphDmaY2A9hKnIOYdz+PIhpLA5lGotDmbeCOcaikeVbwVz5cJHlW8FcsX+xkK1gwrhUhL5WFye3gks+2+csqjHBxW51zlX/wUyTQHXGVb/WuToDKTQRshV8MGEheFgFOwmmCdOq8rBy2Aqm9M/hhKv+iwlX/Vz+Odzgn7LeqSlt65fSP0cw8ecRBONQ2u4U5TgcyTQORwqLh6OYxuEoYfFwNNM4HB3HUZHNhZ1BXbI4xkXjMRKLxmOYi8ZjGIrGpnZ8j1C4PEnuWMK+KIvGpkxFybFxFI2J3q6n9E+NCnSFHmXRyOWfGgSTYykP6XdmHEfGn0GWi9gHuLtu1CdKlDF+vOUnGNrHxzPMN/9jmnt1v9nu30+m7PpQ/Zux/qjHu22a/TqeQF1ISgnaZpYfr2ibT2Cwu7mQLx45gZCYTyQkZsK4UZS+YCbJf48p9keSPHF/JcmTLP94nrb5JAa7azJVNDUrFH+zPsfHPU0VspPYoygr5JMtjye9ojqZIZ5OEZBHpzDYfSpTHp26hzxyEnvYOOWKs/fPGLiynO61JPwNroRFIqGv1ZVMO1SnJVfX7Dqezl04UqwyT2dI+tZCVpmnC0j6RH1xtRACPoPQF4Txp65OrtJFkO0ZlGQrdVZckmq/jrWSjoKZJ9t+Hc9MOgqiVYCjnKSjYBAEOEolHeUojwBHeZKOcpRPgKO8SUc5yi/AUb6koxwVFOCovKSjHFVbgKP8SUc5qo4ARwWSjnJUXQGOCiYd5ah8AY4KJR3lqGkC9vpqJx3lqPoCMuqspKMcNUlARtVJOspRDQRk1NlJRzmqoQBH1U06ylGNBDiqXtJRjrpYgKPyk45yVGMBjjon6ShHNRHgqHOTjnJUUwGOqp90lKOWCVhHnZd0lKOaC8io85OOclRLAY5qkHSUo64U4KgLko5y1FABc1TDpKMc1VpARl2YdJSj2ghwVKOkoxzVToCjLko6ylGFAhx1MddXUVJ/cT3hl1moUwi/FOES4g/J689IHoecfYn7QV8t10LymUh2kKyQ7EGyF8k+JOch2Y/kAJKDSA4huTaSz0JyHSSfjeS6SK6H5Hwkn4Pkc5FcH8nnIfl8JDdA8gVIbojkC5HcCMkXIfliJBdl75AbQ9ulgCaAywBNAZcDmgGaA1oAWgKuAFwJaAW4CtAacDWgDaAtoB2gAFAICAMigCJAFNAecA3gWsB1gOsBNwBurLDr99JSE8EBdH05Ndx+bgK9bwbcArgVcBvgdsAdgDsBdwHuBtwDuBdwH+B+wAOABwEPAR4GdAA8AngU8BjgccATgCcBHQFPAZ4GPAPoBOgMeLbCjkHCH5q/Cfk11nazoe0WQ9uthrbbDG23G9ruMLTdaWi7y9B2t6HtHkPbvYa2+wxt9xvaHjC0PWhoe8jQ9rChrYOh7RFD26OGtscMbY8b2p4wtD1paOtoaHvK0Pa0oe0ZQ1snQ1tnQ9uzFYq/5CT2UH/+HedsovPYTRUS76to+29IOurmCnR6tbPj65D3aLP2xS0k47fDr7cm3pcn9gM1txH6osBmX/iKf5Tn9sRsdvAP/NyRSF+enX8s6E5CXxTa6Qun5A8k3bWXNvuju/7Y0t1711fQ9MNN9xD6ImybL4LmH6u6t+w2B3b3w1f3lbWvwO5/ROt+Ql9E7PGFZ08/HPZAWWwO7PlHyB6Mv69SfyDvIUJfFNngi0CpeqqH47PZicNm1SGevpy4xk89QuiL6L71RV6ceqpHS7PZF7fN6rE99uWLlmH81OOEvmi/r3wRKJOe6ond2xwso83qyd30FYqWefxUR0JfXFP+vnD2Qk/1lMlmZ69sVk/v2pfay/FTzxD64try9EVkr/VUnXa22ZuAzaoz6ssTTWj81LOEvrhOyHcAEu4PKML1rSok/A7A64X4gnAdpAjreFVE6IsbhPiCsN5ThPWKuobQFzcK8QXhvKYIeVldT+iLm4T8ADph/irC+FOU4xc7G6zhvuLziJLnFfg8A5934PMQfF6Cz1PweQs+j8HnNfg8B5/34PMgfF6Ez5PweRM+j8LnVfg8C5934fMwfF6Gz9PweRs+j8Pndfg8D5/34fNAfF6IzxPxeWMbJLdFcjskFyC5EMlhJEeQXITkKJLbI/kaJF+L5OuQfD2Sb0DyjUhujORLkdwEyZchuSmSL0dyMyQ3R3ILJLdE8hVIvhLJrZB8FZJbI/lqV44RynPwdxfA84AXAF0BLwK6AV4CdAe8DHgF8CrgNcDrgDcAbwJ6AN4CvA14B9AT0AvwLuA9wPuA3oAPAB8CPgJ8DPgE8CmgD6Av4DPA54AvAF8CvgJ8DfgG0A/wLeA7QH/AAMD3gB8q8N8BqEnX1793AH4EvQcCBgEGA4YAhgKGAYYDRgBGAn4C/AwYBRgNGAMYCxgHGA/4BTABMBEwCTAZ8CtgCmAqYBpgOuA3wO+APwAzKuwYJHwu+2OFXc9qBxraBhnaBhvahhjahhrahhnahhvaRhjaRhrafjK0/WxoG2VoG21oG2NoG2toG2doG29o+8XQNsHQNtHQNsnQNtnQ9quhbYqhbaqhbZqhbbqh7TdD2++Gtj8MbTMq8N8BwDmbaA2ncyPRvmJ3AAZWoNPrISF3AAaRjN8Ovw5OvK9/7wAMIfTFw0LuAAxNzOad7gAMS6SvEncAhhP6ooOQOwAj9tJm0x2AkXvXl/EOwE+EvnhEyB2An8tu827vAIwqa197uAMwmtAXjwq5AzCmLDaXcgdgbPx9lXoHYByhLx4TcgdgfHw2x3UH4Jd4+orzDsAEQl88LuQOwMTSbC7DHYBJFejuAEwm9MUTQu4A/FqB7g7AlAp0dwCmEvriSSF3AKZVoLsDML0C3R2A3wh90VHIHYDfK9DdAfijAt0dgBmEvnhKyPka4f6AIlzfqg6E52tPC/EF4TpIEdbx6jFCXzwjxBeE9Z4irFfUk4S+6CTEF4TzmiLkZfU0oS86C7kDQJi/ijD+FOX4cZ8VnkrX179nhTOhdpkFmA2YA5gLmAeYD1gAWAhYBFgMWAJYClgGWA74E7ACsBKwCvAXYDVgDWAtYB1gPWAD4G/ARsAmwGbAFsBWw1nhTMOZzixD22xD2xxD21xD2zxD23xD2wJD20JD2yJD22JD2xJD21JD2zJD23JD25+GthWGtpWGtlWGtr8MbasNbWsMbWsNbesMbesNbRsMbX8b2jYa2jYZ2jYb2rYY2rZW4D8rxDmbKNfPJDwrnEW4ZnlDyFnhbMKzwjmEZ4VzCX3xppCzwnmEZ4XzCc8KFxD6ooeQs8KFhGeFiwjPChcT+uItIWeFSwjPCpcSnhUuI/TF20LOCpcTnhX+SXhWuILQF+8IOStcSXhWuIrwrPAvQl/0FHJWuJrwrHAN4VnhWkJf9BJyVriO8KxwPeFZ4QZCX7wr5Kzwb8Kzwo2EZ4WbCH3xnpCzws2EZ4VbCM8KtxL64n0h+/CE+wOKcH2rehDuw/cW4gvCdZAirOPVO4S++ECILwjrPUVYr6h3CX3xoRBfEM5ripCXVW9CX3wk5KyQMH8VYfypjwSdFXbNoj8r3Aa1yz/6zK4i6AtIBaQB0gEZgExAFiAbUAFQEVAJUBmQA6gCyAVUBVQDHAg4CHAw4BDAoYDqgMMAhwOOABwJOApwdMWUXc4KtxnOdP4xtGl9S7YdYGhLNbSlGdrSDW0ZhrZMQ1uWoS3b0FbB0FbR0FbJ0FbZ0JZjaKtiaMs1tFU1tFUztB1oaDvI0Hawoe0QQ9uhhrbqhrbDDG2HG9qOMLQdaWg7ytB2dEX+s0Kcs4ly/TbCs8J/CNcs/YWcFWrOSLyvHX49IPG+/j0rTK1I54sBQs4K0xKzeaezwvRE+ipxVphB6IvvhZwVZu6lzaazwqy968t4VphN6IsfhJwVVii7zbs9K6xY1r72cFZYidAXPwo5K6xcFptLOSvMib+vUs8KqxD6YqCQs8Lc+GyO66ywajx9xXlWWI3QF4OEnBUeWJrNZTgrPKgi3VnhwYS+GCzkrPCQinRnhYdWpDsrrE7oiyFCzgoPq0h3Vnh4RbqzwiMIfTFUyFnhkRXpzgqPqkh3Vng0oS+GCdmHJ9wfUITrW/U94T78cCG+IFwHKcI6Xg0k9MUIIb4grPcUYb2ihhD6YqQQXxDOa4qQl9VwQl/8JOSskDB/FWH8Kcrx236mg8ZO/z0Bzgq2ufJEJNfLcM+y0HtHoP8+0pWPgdriWEANfXbn9p+asutDfS5ZoyJPXKXQ6unBY3FcxR2vx7tnkP8eCun/sLWEAtQBXoPkIGLHcxxhQXk8kyNTiceP0ub/ob4UbAjCRp5+XzDiKF8EtuI8nkihzwk7BWFPUcgHa2Gfx+cNR8KwOREsUFEnWhAORYM79NJJVymlOMHwQ510/6tIS0ax54SKjArrzqn7PZEwGLjsPrFi8QAT9WvUlYIATqxI3+9JxMEaI2vdL/etG0pS5Nb1GEJda7j91IQ+TwacAjgVcBrgdMAZgFqAMwEOQAE8AC/AB8gD+AEBQBAQAtQGnAWoAzgbUBdQT+sMOAdwLqA+4DzA+YAG7uyMfV7TcJPjZEPbKYa2Uw1tpxnaTje0nWFoq2VoO9PQ5hjalKHNY2jzGtp8hrY8Q5vf0BYwtAUNbSFDW21D21mGtjqGtrMNbXUNbfUMbfmGtnMMbeca2uob2s4ztJ1vaGtQkf+G0DGE81dNssLSUScT6jVNyA2hUwhvCJ1KeEPoNEJfTBdyQ+h0whtCZxDeEKpF6IvfhNwQOpPwhpBDeENIEfridyE3hDyEN4S8hDeEfIS++EPIDaE8whtCfsIbQgFCX8wQckMoSHhDKER4Q6g2oS9mCrkhdBbhDaE6hDeEzib0xSwhN4TqEt4Qqkd4Qyif0BezhdwQOofwhtC5hDeE6hP6Yo6QG0LnEd4QOp/whlADQl/MFXL6Trg/oAjXt+o3wtP3eUJ8QbgOUoR1vJpB6Iv5QnxBWO8pwnpFzSb0xQIhviCc1xQhL6t5hL5YKOSGEGH+KsL4U5Tjp+P3OUANt78G7pnYee4Z2bnumVm+e4ZW1z1Tq+OesdV2z9yC7hmc3z2T87lndB73zM5xz/BquWd6p7tnfKe6Z376HECfK5R8Sl7qSDT2jiWsey6oSHapwynPSx1YbyfBB+vbsCKjwrpz6n4vJAwGLrsvRElB1O/2YEtNKZ9re8dW5CH7kmOSaALiQG6EYo38lsqFdAOi8CkyVrqMOodLu3Kmddb9l/WKXWmD3ogwAS8iZrXYuOp+O+xlLCgYu7Byok7IAzs5gbA/UBiKeAqDBVFvNM8b8e7tuJYW7JTjejHTuF689+P6n4jXS5jG9ZL9PF4bM41rY3dcM1BbycfmyRNP9pe6RUUTPWdwTHCNGKq1RsSVBJfdZU0Opwx2J6rjZcxj6CT2KB2Yl1Wk901TJlJougeydRJ7VBOmsbicaSwuZxyLY5nGYv3ZdnMKVz5s2Ld2l3q1hCv2/xay9UgYl4rQ14py/HQhpbcfTbsQKWUcz9LiCffJMWdRjQkuKpvtaRfCSexRlzFNAs32sAtRSjeqtH9H69yMgRS2WHI2VJbiLVGbm1e0k2AofYHjsjkqTvbWP6WNOaV/WuCzBa8XciMSUNFI1JsXCHkKld/r90d90YA/6ItE83wFkUCR8hV4PaGigBNVwaKiQJ43HPBHQ5GwP4pJW0W8Xl8kVBhWeR5/QaETjHgLnKgv4IUFf8QbiES8Qb+/wOuN+IPRYAgW6bD0Dzp5gUDI8Xu8IQ+Xf1qg1TXVpFDabg7uU8qk0FLipNCSeVJoyTApbLNkUthtEAd2fDKfknSusHRS2MZEOlcQTAqlbW1S+udKSycFLv9c+R/acm3lbrleZdpydRJ7dnveQXlWmWhfhNu3isPxsTFMEzKGifbV2nJ/6IRpzTCxX81U5FzNuP15FdNYtGEaizbMW8EcY5FS1+6tYK58OGDf2l3qVjBX7KcS2x17qLeCCeNSEfpaUY7ff2UruBXTqr8t56q/NdMk0JZx1a91bstACplMpEC9FdyasBBsV9FOgqH0BY7LduWwFUzpnwLCVT8m7URX/Vz+KTD4p6x3akrb+qX0TyETfxYSjENpu1OU4xBmGoewsHiIMI1DRFg8FDGNQ1EcR0U2F3YGdcniGBeNUYlFY5S5aIwyFI3Z5VQ0JngrnpTk2hP2RVk0ZjMVJe3jKBoTvV1P6Z9rKtIVepRFI5d/riGYHEt5SL8z41oy/gyyXMS+0N11oz5Roozx6yw/wdA+vo5hvrmeae7V/Wa7fz+XsutD9W/G+qMe77Zp9ut4A3UhKSVoK1p+vKJtvoHB7kqW7CiW8uwUmInafCMhMRPGjaL0BTNJ/ntMsT+S5I37K0neZPnH87TNNzHYfTNTRXNzxeJv1uf4uKepQnYSexRlhXyL5fGkV1S3MMTTrQLy6FYGu29jyqPb9pBHTmIPG6dUqbt/xkBuOd1rSVTP2wmLREJfq1ymHarbk6trdh3v4C4cKVaZdzAk/YFCVpl3CEj6RH1xkBACvpPQF4Txpw5KrtJFkO2dlGQrdVZckmq/jnclHeWo07Pt1/HupKMcVUuAo+5JOspRjgBH3Zt0lKM8Ahx1X9JRjvIJcNT9SUc5yi/AUQ8kHeWooABHPZh0lKNqC3DUQ0lHOaqOAEc9nHSUo+oKcFSHpKMclS/AUY8kHeWoaQL2+h5NOspR9QVk1GNJRzlqkoCMejzpKEc1EJBRTyQd5aiGAhz1ZNJRjmokwFEdk45y1MUCHPVU0lGOaizAUU8nHeWoJgIc9UzSUY5qKsBRnZKOctQyAeuozklHOaq5gIx6NukoR7UU4Kjnko5y1JUCHNUl6ShHDRUwRz2fdJSjWgvIqBeSjnJUGwGO6pp0lKPaCXDUi0lHOapQgKO6cX0VJfUX1xN+mYW6lfBLEV4i/pC8/ozkccjZL7kf9NXyXUi+G8n3IPleJN+H5PuR/ACSH0TyQ0h+GMkdkPwIkh9F8mNIfhzJTyD5SSR3RPJTSH4ayc8guROSOyP5WSQ/h+QuSH4eyS8guSuSX0RyNyQXZe+Qu0Pby4BXAK8CXgO8DngD8CagB+AtwNuAdwA9Ab0A7wLeA7wP6A34APAh4CPAx4BPAJ8C+gD6Aj4DfA74AvAl4CvA1+gzvm+nFD/5RHGXnewv2V+yv2R/yf6S/SX7S/aX7M/m/lRy/JL9JftL9pfsL9lfsr9kf/t3f9EwbX/+KHF/ebT9RXyxvckZFYr3Kf9A8u9I/g3J05E8DclTkTwFyb8ieTKSJyF5IpInIPkXJI9H8jgkj0XyGCSPRvIoJP+M5J+QPBLJI5A8HMnDkDwUyUOQPBjJg5A8EMk/InkrkrcgeTOSNyF5I5L/RvIGJK9H8jokr0XyGiSvRvJfSF6F5JVIXoHkP5G8HMnLkLwUyUuQvBjJi5C8EMkLkDwfyfOQPBfJc5A8G8mzkDwTyUejffqjkHwkko9A8uFIPgzJ1ZF8KJIPQfLBSD4IyQciuRqSqyI5F8lVkJyD5MpIroTkikiugORsJGchORPJGUhOR3IaklORfACSU5D8DxrzbUh+H72nN5I/QPKHSP4IyR8j+RMkf4rkPkjui+TPkPw5kr9A8pdI/grJXyO5O5JfRvIrSH4Vya8h+XUkv4HkN5HcA8lvIfltJL+D5J5I7oXkd5H8nit/lrLj+Qb+7gf4FvAdoD9gAOB7wA+AHwEDAYMAgwFDAEMBwwDDASMAIwE/AX4GjAKMBowBjAWMA4wH/AKYAJgImASYDPgVMAUwFTANMB3wG+B3wB+AGYCZgFmA2YA5gLmAeYD5gAWAhYBFgMWAJYClgGWA5YA/ASsAKwGrAH8BVgPWANYC1gHWAzYA/gZsBGwCbAZsAWwFbAP8U1EnFYwfIBWQBkgHZAAyAVmAbEAFQEVAJUBlQA6gCiAXUBVQDXAg4CDAwYBDAIcCqgMOAxwOOAJwJOAowNGAYwDHAmoAjgMcD/gf4ATAiYCTADUBJwNOAZwKOA1wOuAMQC3AmQAHoAAegBfgA+QB/IAAIAgIAWoDzgLUAZwNqAuoB8gHnAM4F1AfcB7gfEADwAWAhoALAY0AFwEuBlwCaAy4FNAEcBmgKeByQDNAc0ALQEvAFYArAa0AVwFaA64GtAG0BbQDFAAKAWFABFBUacfvbsa+1Dr2xOR89zXRM/p+WZATWbv26yT2KN0nUV9OKrI/WmnHa/tK7mD8+3uWlXb8Lh1ua1+p+LfquAaO+jIHHrhEddRjEmdf4VL6Uu0r0Tl0Tz8om1LG8SxNb9wndZBHCccEJ/k1JYNbNxxQYoCov6W6DMaU+gOw11Si0+vaSmTBsNPPBFxbadcfsqQe0/aE40A5pteVYUxL+7fwmF7njmnJxKZOvJGEs0sNt5/rQfcbADcCbgLcDLgFcCvgNsDtgDsAdwLuAtwNuAdwL+A+wP2ABwAPAh4CPKzHAvAI4FHAY4DHAU8AngR0BDwFeBrwjJvweCy1Pv+uStzXGwxtNxrabjK03Wxou8XQdquh7TZD2+2GtjsMbXca2u4ytN1taLvH0Havoe0+Q9v9hrYHDG0PGtoeMrQ9bGjrYGh7xND2qKHtMUPb44a2JwxtTxraOhranjK0PW1oe8Ztww/1L1KMJCxsrifgwqKofhx1AyGvHmrHD5Tv0WbtixtJxm+HX29KvC9PrFi7mdAX1W32ha+4QL0lMZsdXOzemkhfnp0L59sIfXGYnb5wSi4Wbt9Lm/3RXRced+xdX0HTIuZOQl8cbpsvguaF211ltzmwu0Xg3WXtK7D7BeU9hL44wh5fePa0iL63LDYH9rwgv49wU+J+Ql8caYMvAqXqqR6Iz2YnDpvVg/H05cQ1fuohQl8ctW99kRennurh0mz2xW2z6rDHvnzRMoyfeoTQF0fvK18EyqSnenT3NgfLaLN6bDd9haJlHj/1OKEvjil/Xzh7oad6wmSzs1c2qyd37Uvt5fipjoS+OLY8fRHZaz3VUzvb7E3AZvU06ssTTWj81DOEvqgh5Fc5CfcHFOH6Vh1G+KucxwnxBeE6SBHW8epIQl8cL8QXhPWeIqxX1DGEvvifEF8QzmuKkJfVcYS+OKGcfjnYSexRhPmrCONPUY4f91nhCIazwk5Qu3QGPAt4DtAF8DzgBUBXwIuAboCXAN0BLwNeAbwKeA3wOuANwJuAHoC3AG8D3gH0BPQCvAt4D/A+oDfgA8CHgI8MZ4WdDGc6nQ1tzxranjO0dTG0PW9oe8HQ1tXQ9qKhrZuh7SVDW3dD28uGtlcMba8a2l4ztL1uaHvD0Pamoa2Hoe0tQ9vbhrZ3DG09DW29DG3vGtreM7S9b2jrbWj7wND2oaHto0r8Z4UjCM8KOxGeFXYmXLP4hJwVPkt4Vvgc4VlhF0Jf5Ak5K3ye8KzwBcKzwq6EvvALOSt8kfCssBvhWeFLhL4ICDkr7E54Vvgy4VnhK4S+CAo5K3yV8KzwNcKzwtcJfRESclb4BuFZ4ZuEZ4U9CH1RW8hZ4VuEZ4VvE54VvkPoi7OEnBX2JDwr7EV4VvguoS/qCDkrfI/wrPB9wrPC3oS+OFvIWeEHhGeFHxKeFX5E6Iu6QvbhCfcHFOH6VvkJ9+HrCfEF4TpIEdbxKkToi3whviCs9xRhvaLqEPriHCG+IJzXFCEvq3qEvjhXyFkhYf4qwvhT5wo6K6xJ19e/Z4UfQ+3yCeBTQB9AX8BngM8BXwC+BHwF+BrwDaAf4FvAd4D+gAGA7wE/AH4EDAQMAgwGDAEMBQwDDAeMAIwE/AT4GTDKcFb4seFM5xND26eGtj6Gtr6Gts8MbZ8b2r4wtH1paPvK0Pa1oe0bQ1s/Q9u3hrbvDG39DW0DDG3fG9p+MLT9aGgbaGgbZGgbbGgbYmgbamgbZmgbbmgbYWgbaWj7ydD2s6FtVCX+s0Kcs4ly/ceEZ4WfEK5Zmgo5K/yU8KywD+FZYV9CX1wu5KzwM8Kzws8Jzwq/IPRFMyFnhV8SnhV+RXhW+DWhL5oLOSv8hvCssB/hWeG3hL5oIeSs8DvCs8L+hGeFAwh90VLIWeH3hGeFPxCeFf5I6IsrhJwVDiQ8KxxEeFY4mNAXVwo5KxxCeFY4lPCscBihL1oJOSscTnhWOILwrHAkoS+uEnJW+BPhWeHPhGeFowh90VrIPjzh/oAiXN+qZoT78FcL8QXhOkgR1vGqJaEv2gjxBWG9pwjrFdWK0BdthfiCcF5ThLysrib0RTshZ4WE+asI409xjR/1OWG9DDlnmhMYPv84GmqsMYCxgHGA8YBfABMAEwGTAJMBvwKmAKYCpgGmA34D/A74AzADMBMwCzAbMAcwFzAPMB+wALAQsAiwGLAEsNRwpjnacPY0xtA21tA2ztA23tD2i6FtgqFtoqFtkqFtsqHtV0PbFEPbVEPbNEPbdEPbb4a23w1tfxjaZhjaZhraZhnaZhva5hja5hra5hna5hvaFhjaFhraFhnaFhvalhjallbiP9OcQPj5x9GEZ5pjCNdWtwg50xxLeKY5jvBMczyhL24Vcqb5C+GZ5gTCM82JhL64TciZ5iTCM83JhGeavxL64nYhZ5pTCM80pxKeaU4j9MUdQs40pxOeaf5GeKb5O6Ev7hRypvkH4ZnmDMIzzZmEvrhLyJnmLMIzzdmEZ5pzCH1xt5AzzbmEZ5rzCM805xP64h4hZ5oLCM80FxKeaS4i9MW9Qs40FxOeaS4hPNNcSuiL+4ScFxDuDyjC9a26jfC84H4hviBcBynCOl7dSeiLB4T4grDeU4T1irqH0BcPCvEF4bymCHlZ3U/oi4eEnGkS5q8ijD9FOX46frsBarj9LXXPxBa7Z2QL3TOz+e4Z2lz3TG22e8Y20z1z+8M9g/vNPZOb5p7RTXHP7Ca7Z3gT3TO9X9wzvnHumZ8+B9DnCiWf1BI+TTT2JhKegyxDNZSCPRzYe9HvC0Yc5YvA7onHEyn0OWGnIOwpCvlg+eLz+LzhSBjWk8ECFXWiBeFQNLijL/0Dtu4x5C4P9fkt1ttJ8MH6Lq/EqLDunLrfPwmLYC67/0RJQdTv9mBLTTH/WjK1DROzeMi+5JgkmoA4kFegWNtlQBINlD/psk/hU2SsdBl1DpcyONsTRfdfko1LU7C0QV9BmIAriVktNq663w57GQsKxi6snKgT8sBOTiDsDxSGIp7CYEHUG83zRrx7O66lBTvluK5iGtdVez+u/4l4/YtpXP/az+N1NdO4rnbHNQO1lXxsnjzxZL/GLSrW6jmDY4JbwVCtrahEW0lw2V3W5HDKYHeiOq5jHkMnsUfpwFxXid4365lIYf0eyNZJ7FFrmcZiA9NYbGAcC02EHGPxXF27OYUrH7rsW7tLvVrCFfvPC9l6JIxLRehrRTl+upDS24+mXYiUMo5nafGE++SYs6jGBBeVf+9pF8JJ7FHrmCaBv/ewC1FKN6q0f0fr/DcDKXSz5GyoLMVbojZvrGQnwVD6AsflRlSc7K1/ShtzSv9swmcLXi/kRiSgopGoNy8Q8hQqv9fvj/qiAX/QF4nm+QoigSLlK/B6QkUBJ6qCRUWBPG844I+GImF/FJO2ini9vkioMKzyPP6CQicY8RY4UV/ACwv+iDcQiXiDfn+B1xvxB6PBECzSYekfdPICgZDj93hDHi7/bEKra6pJobTdHNynlElhs8RJYTPzpLCZYVLobsmksNsgDmz/BFWUknS2WDopdGcinS0Ek0JpW5uU/tlq6aTA5Z+t/6Et123ulus/pi1XJ7Fnt+cdlGeVifZFuH2rOBwfG8M0IWOY8IWFynb7Y3vCVKaf2A+ozENWut8Obr/UY/EP01ikMo1FamXerWCOsXjF8q1grnx41fKtYK7Yf03IVjBhXCpCX6vXklvBJZ/tcxbVmOBiN60y46o/hWkSwEpTr/q1zmkMpNBDyFYw9lmiNqdXtpNgejCtKtMr828FU/onozLdqv81wlU/l38yDP4p652aUrd+Cf2TycSfmQTjUNruFOU4ZDGNQ5aweMhmGodsYfFQgWkcKlQu/ajI5sLOoC5ZHOOisaLEorEic9FYkaFofNuO7xEKlyfJVSLsi7JofJupKKkUR9GY6O16Sv9UrkxX6FEWjVz+qUwwOZbykH5nRg4ZfwZZLmL/6e66UZ8oUcZ4FctPMLSPqzDMN7lMc6/uN9v9u1vKrg/Vvxnrj3q826bZr2PVysQ6SgnanpYfr2ibqzLY3UvIF49UJSTmaoTETBg3itIXzCT57zHF/kiS1fZXkjywMi9JOok9Stt8IIPdBzFVNAdVLv5mfY6Pe5oqZCexR1FWyAdbHk96RXUwQzwdIiCPDmGw+1CmPDp0D3nkJPawccr7dffPGOhdTvdaEtWzOmGRSOhr1Ztph6p6cnXNruNh3IUjxSrzMIak/0jIKvMwAUmfqC8+FkLAhxP6gjD+1MfJVboIsj2ckmylzopLUu3X8Yikoxx1erb9Oh6ZdJSjaglw1FFJRznKEeCoo5OOcpRHgKOOSTrKUT4Bjjo26ShH+QU4qkbSUY4KCnDUcUlHOaq2AEcdn3SUo+oIcNT/ko5yVF0Bjjoh6ShH5Qtw1IlJRzlqmoC9vpOSjnJUfQEZVTPpKEdNEpBRJycd5agGAjLqlKSjHNVQgKNOTTrKUY0EOOq0pKMcdbEAR52edJSjGgtw1BlJRzmqiQBH1Uo6ylFNBTjqzKSjHLVMwDrKSTrKUc0FZJRKOspRLQU4ypN0lKOuFOAob9JRjhoqYI7yJR3lqNYCMiov6ShHtRHgKH/SUY5qJ8BRgaSjHFUowFFBSkdt/2BqSvHn/PTfRTAI21y5faViOYrkL1J3yLH/XwiUqg04C1CncnF77KH+Uvyf6H6lR4UIv3Dh7Mr0AcQxfj8Tjl9twvGrS/wFBiVjW/snFsN1kXwWkutU3jm262mdAOcAzq1s/s5Z6iSvRzgONdx+6kOf5wHOBzQAXABoCLgQ0AhwEeBiwCWAxoBLAU0AlwGaAi4HNAM0B7QAtARcAbgS0ApwFaA14GpAG0BbQDtAAaCw8o5Bwh+Ir+9+IB63nWdoO9/Q1sDQdoGhraGh7UJDWyND20WGtosNbZcY2hob2i41tDUxtF1maGtqaLvc0NbM0Nbc0NbC0NbS0HaFoe1KQ1srQ9tVhrbWhrarDW1tDG1tDW3tDG0FhrbCysVfYBJ7qD/bXo+QB+sT9FW0/fchHXUeoV597Piq4z3arH1xPsn47fBrg8T78sR+fOYCQl/0tdkXvuIf3GmYmM0O/vGeCxPpy7PzDwE1IvTFZ3b6win540cX7aXN/uiuP6R08d71FTT9KNMlhL743DZfBM0/RNW47DYHdvejVpeWta/A7n8gqwmhL76wxxeePf0o2GVlsTmw5x8Yaxp/X6X++N3lhL740gZfBErVUzWLz2YnDptV83j6cuIaP9WC0Bdf7Vtf5MWpp2pZms2+uG1WV+yxL1+0DOOnriT0xdf7yheBMumpWu3e5mAZbVZX7aavULTM46daE/rim/L3hbMXeqqrTTY7e2WzarNrX2ovx0+1JfRFv/L0RWSv9VTtdrbZm4DNqgD15YkmNH6qkNAX3wr5fj/C/QFFuL5VnxF+v993QnxBuA5ShHW8+pLQF/2F+IKw3lOE9Yr6htAXA4T4gnBeU4S8rL4j9MX3Qn7cnDB/FWH8KSnjR/iDEeoQwnolTHyOq58O7qv++5lKxWc8TyP5KSR3RPKTSH4CyY8j+TEkP4rkR5DcAckPI/khJD+I5AeQfD+S70PyvUi+B8l3I/kuJN+J5DuQfDuSb0PyrUi+Bck3I/kmJN+I5BuQfD2SP0Lyh0j+AMm9kfw+kt9D8rtI7oXknkh+B8lvI/ktJPdA8ptIfgPJryP5NSS/iuRXkPwykrsj+SUkd0Pyi0juiuQXkPw8krsg+TkkP4vkzkjuhORRSP4ZyT8heSSSRyB5OJKHIXkokocgeTCSByF5IJJ/RPIPSP4eyQOQ3B/J3yH5WyT3Q/I3SP4ayV8h+Uskf4Hkz5H8GZL7IrkPkj9F8idI/hjJYXTGfASSj0TyUUg+GsnHIPlYJNdA8nFIPh7J/0PyCUg+EcknIbkmkk9G8ilIPhXJpyH5dCSfgeRaSD4TyQ6SFZI9SPYi2YfkPCT7kRxAchDJ+D4Evi+B71Pg+xb4Pga+r4Hvc+D7Hvg+CL4vgu+T4Psm+D4Kvq+C77Pg+y6FSMb3FfB9BnzfAd+HwPcl8H0KfN8C38fA9zXwfQ583wPfB8H3RfB9kth9k+dTdjwR+LsIEAW0B1wDuBZwHeB6wA2AGwE3AW4G3AK4FXAb4HbAHYA7AXcB7gbcA7gXcB/gfsADgAcBDwEeBnQAPAJ4FPAY4HHAE4AnAR0BTwGeBjwD6AToDHgW8BygC+B5wAuAroAXAd0ALwG6A14GvAJ4FfAa4HXAG4A3AT0AbwHeBrwD6AnoBXgX8B7gfUBvwAeADwEfAT4GfAL4FNAH0BfwGeBzwBeALwFfAb4GfAPoB/gW8B2gP2AA4HvAD4AfAQMBgwCDAUMAQwHDAMMBIwAjAT8BfgaMAowGjAGMBYwDjAf8ApgAmAiYBJgM+BUwBTAVMA0wHfAb4HfAH4AZgJmAWYDZgDmAuYB5gPmABYCFgEWAxYAlgKWAZYDlgD8BKwArAasAfwFWA9ZUTtnpOcB9zXdfncQeNYbufqPDfdeP8C7rv3f91sL4rgOsB2wA/A3YCNgE2AzYAtgK2Ab4R/siB+wCpALSAOmADEAmIAuQDagAqAioBKgMyAFUAeQCqgKqAQ4EHJSzY5D0OMXuX2l9YjwSa1tnaFtvaNtgaPvb0LbR0LbJ0LbZ0LbF0LbV0LbN0PaPoU2PZ8m2AwxtqYa2NENbuqEtw9CWaWjLMrRlG9oqGNoqGtoqGdoqG9pyDG1VDG25hraqhrZqhrYDDW0HuW34od5Dwjmb6FpZ50aifcXu+q2rTKfXGCF3/daTjN8Ov25IvK9/7/r9TeiLsULu+m1MzOad7vptSqSvEnf9NhP6YpyQu35b9tJm012/rXvXl/Gu3zZCX4wXctfvn7LbvNu7frq2KFNfe7jrd0AOnS9+EXLXL7UsNpdy1y8t/r5KveuXTuiLCULu+mXEZ3Ncd/0y4+krzrt+WYS+mCjkrl92aTaX4a5fhRy6u34VCX0xSchdv0o5dHf9KufQ3fXLIfTFZCF3/ark0N31y82hu+tXldAXvwq561cth+6u34E5dHf9DiL0xRQh92gI9wcU4fpWjSO8RzNViC8I10GKsI5XEwh9MU2ILwjrPUVYr6jJhL6YLsQXhPOaIuRlNZXQF78JuatGmL+KMP4U5fjp+H0VUMPt7yD3TKyae0aW656Z5bhnaJXcM7UK7hlblnvmluGewaW5Z3J6n0bv+/zjntltdc/wNrtnehvdM74N7pmfPgdYW+KMVT+pJXyaaOz9THgOcjCqoRTs4cDei35fMOIoXwR2TzyeSKHPCTsFYU9RyAfLF5/H5w1HwrCeDBaoqBMtCIeiwR19ZUAflVKKz2rxQ31+i/V2EnywvofkMCqsO6fu91DCIpjL7kNzigeYqN/twZaasuuXAnHYQPjFTY5BXbIExIFcHcXaLgOSaKAcSpd9Cp8iY6XLqHO4lMHZnii6/5JsXJqCpQ16dcIEPIyY1WLjqvvtsJexoGDswsqJOiEP7OQEwv5AYSjiKQwWRL3RPG/Eu7fjWlqwU47r4Uzjevjej+t/Il6PYBrXI/bzeD2SaVyPdMc1A7WVfGyePPFkf5RbVByt5wyOCa46Q7VWPYe2kuCyu6zJ4ZTB7kR1PIZ5DJ3EHqUD85gcet8cy0QKx+6BbJ3EHnU001jUYBqLGoxjoYmQYyyW1rWbU7jyYdm+tbvUqyVcsb9cyNYjYVwqQl8ryvHThZTpq4nxE++/VVo84T455iyqMcFF5XF72oVwEnvUMUyTwHF72IUopRtV2r+jdT6OgRRWWXI2VJbiLVGbj8+xk2AofYHj8nhUnOytf0obc0r//A+fLXi9kBuRgIpGot68QMhTqPxevz/qiwb8QV8kmucriASKlK/A6wkVBZyoChYVBfK84YA/GoqE/VFM2iri9foiocKwyvP4CwqdYMRb4ER9AS8s+CPeQCTiDfr9BV5vxB+MBkOwSIelf9DJCwRCjt/jDXm4/PM/tLqmmhRK283BfUqZFE6QOCmcwDwpnMAwKay2ZFLYbRAHtn+CKkpJOidaOimsZiKdEwkmhdK2Nin9c5KlkwKXf076D2251nS3XE82bbk6iT27Pe+gPKtMtC/C7VvF4fjYGKYJGcNE+zrFcn/ohDmFYWI/lanIOZVx+/NkprE4jWksTmPeCuYYi7WWbwVz5cM6y7eCuWJ/vZCtYMK4VIS+VuuTW8Eln+1zFtWY4GL3dM5V/ylMk8DpjKt+rfPpDKSwSchW8CmEheAZOXYSzCamVeUZ5bAVTOmfWoSr/vWEq34u/9Qy+Kesd2pK2/ql9M+ZTPx5JsE4lLY7RTkODtM4OMLiQTGNgxIWDx6mcfDEcVRkc2FnUJcsjnHR6JVYNHqZi0YvQ9G4xY7vEQqXJ8n5CPuiLBq3MBUlvjiKxkRv11P6Jy+HrtCjLBq5/JNHMDmW8pB+Z4afjD+DLBexD3V33ahPlChjPGD5CYb2cYBhvgkyzb2632z371dTdn2o/s1Yf9Tj3TbNfh1D1IWklKDdZvnxirY5xGD3P0K+eCRESMy1CYmZMG4UpS+YSfLfY4r9kSRr768keZblH8/TNp/FYHcdpoqmTk7xN+tzfNzTVCE7iT2KskI+2/J40iuqsxniqa6APKrLYHc9pjyqt4c8chJ72Dgltd7+GQNp9egn+JQU+nuR+YRFIqGvFeX44RzKT66u2XU8h7twpFhlnsOQ9JlMSU+9yjxHQNIn6ossIQR8LqEvCONPUY5fcpXOR7bnUpKt1FlxSar9OtZPOspRp2fbr+N5SUc5qpYAR52fdJSjHAGOapB0lKM8Ahx1QdJRjvIJcFTDpKPg/EeAoy5MOspRQQGOapR0FBz5CnDURUlHOaqOAEddnHSUo+oKcNQlSUc5Kl+AoxonHeWoaQL2+i5NOgo2PAVkVJOkoxw1SUBGXZZ0FOyjCciopklHwfaMAEddnnQUrPoFOKpZ0lGwmBTgqOZJR8EaRYCjWiQdBaWvAEe1TDoKKioBjroi6ShHLROwjroy6SiYqAVkVKuko4D/BTjqqqSjgFYEOKp10lGOGipgjro66SiIVgEZ1SbpKBgEAY5qm3SUo9oJcFS7pKMcVSjAUQVcX0VJ/cX1hF9moeoSfilCIfGH5Ld/RjK12Nn6s1vZSTkp76dyYU6xXB/J5yH5fCQ3QPIFSG6I5AuR3AjJFyH5YiRfguTGSL4UyU2QfBmSmyL5ciQ3Q3JzJLdAckskX4HkK5HcCslXIbk1kq9Gchskt0VyOyQXIPn97GK5N5I/QPKHSP4IyR8j+RMkf4rkPkjui+TPkPw5kr9A8pdI/grJXyP5GyT3Q/K3SP4Oyf2RPADJ3yP5ByT/iOSBSB6E5MFIHoLkoUgehuThSB6B5JFI/gnJPyN5FJJHI3kMkscieRySxyP5FyRPQPJEJE9C8mQk/4rk5yoUy12Q/DySX0ByVyS/iORuSH4Jyd2R/DKSX0Hyq0h+DcmvI/kNJL+J5B5IfgvJbyP5HST3RHIvJL+L5PeQ/D6SeyP5AyR/iOSPkPwxkj9B8qdI7oPkvkj+DMmfI/kLJH+J5K+Q/DWSv0FyPyR/i+TvkNwfyQOQ/D2Sf0BypHKxXITkKJLbI/kaJF+L5OuQfD2Sb0DyjUi+Cck3I/kWJN+K5NuQfDuS70DynUi+C8l3I/keJN+L5PuQfD+SH0Dyg0h+CMkPI7kDkh9B8qNIfgzJjyP5CSQ/ieSOSH4KyU8j+Rkkd0JyZyQ/i+TnkNwFyc8j+QUkd0Xyi0juhuSXkNwdyS8j+RUkv4rk15D8OpLfQPKbSO6B5LeQ/DaS30FyTyT3QvK7SH4Pye8juTeSP0Dyh0j+CMkfI/kTJH+K5D5I7ovkz5D8OZK/QPKXSP4KyV8j+Rsk90Pyt0j+Dsn9kTwAyd8j+Qck/4jkgUgehOTBSB6C5KFIHobk4UgegeSRSP4JyT8jeRSSRyN5DJLHInkckscj+RckT0DyRCRPQvJkJP+K5ClInorkaUiejuTfkPw7kv9A8gwkz0TyLCTPRvIcJM9F8jwkz0fyAiQvRPIiJC9G8hIkL0XyMiQvR/KfSF6B5JVIXoXkv5C8GslrcJxXRHGO5G+R/B2S+yN5AJK/R/IPSP4RyQORPAjJg5E8BMlDkTwMycORPALJI5H8E5J/RvIoJI9G8hgkj0XyOCSPR/IvSJ6A5IlInoTkyUj+FclTkDwVydOQPB3JvyH5dyT/geQZSJ6J5FlIno3kOUiei+R5SJ6P5AVIXojkRUhejOQlSF6K5GVIXo7kP5G8AskrkbwKyX8heTWS1yB5LZLXIXk9kjcg+W8kb0TyJiRvRvIWJG9F8jYk/4PklErF8gFITkVyGpLTkZyB5EwkZyE5G8kVkFwRyZWQXBnJOUiuguRcJFdFcjUkH4jkg5B8MJIPQfKhSK6O5MOQfDiSj0DykUg+CslHI/kYJB+L5BpIPg7JxyP5f0g+AcknIvkkJNdE8slIPgXJpyL5NCSfjuQzkFwLyWci2UGyQrIHyV4k+5Cch2Q/kgNIDiI5hOTaSD4LyXWQfDaS6yK5HpLzkXwOks9Fcn0kn4fk85HcAMkXILkhki9EciMkX4Tki5F8CZIbI/lSJDdB8mVIborky5HcDMnNkdwCyS2RfAWSr0RyKyRfheTWSL4ayW2Q3BbJ7ZBcgORCJIeRHEFykSuHYR8uAigCRAHtAdcArgVcB7gecAPgRsBNgJsBtwBuBdwGuB1wB+BOwF2AuwH3AO4F3Ae4H/AA4EHAQ4CHAR0AjwAeBeDHPZIgO4MZkkV3BvMY4dnQ9nnB9YPut0bKjt+Gq5hSfKaFnwOIx6V7Fu150r+OK/FQ/RvJfpP9JvtN9pvsN9lvst9kv8l+k/0m+032m+w32W+y32S/yX6T/Sb7Tfab7NeOfqn3qyk//8ClY30BOp4nQMfzBejYQICOFwjQsaEAHS8UoGMjATpeJEDHiwXoeIkAHRsL0PFSATo2EaDjZQJ0bCpAx8sF6NhMgI7NBejYQoCOLQXoeIUAHa8UoGMrATpeJUDH1gJ0vFqAjm0E6NhWgI7tBOhYIEBH/f0EtuvYW4COHwjQ8UMBOn4kQMePBej4iQAdPxWgYx8BOvYVoONnAnT8XICOXwjQ8UsBOn4lQMevBej4jQAd+wnQ8VsBOn4nQMf+AnQcIEDH7wXo+IMAHX8UoONAAToOEqDjYAE6DhGg41ABOg4ToONwATqOEKDjSAE6/iRAx58F6DhKgI6jBeg4RoCOYwXoOE6AjuMF6PiLAB0nCNBxogAdJwnQcbIAHX8VoKP+fnTbdewiQMfnBej4ggAduwrQ8UUBOnYToONLAnTsLkDHlwXo+IoAHV8VoONrAnR8XYCObwjQ8U0BOvYQoONbAnR8W4CO7wjQsacAHXsJ0PFdATq+J0DH9wXo2FuAjh8I0PFDATp+JEDHjwXo+IkAHT8VoGMfATr2FaDjZwJ0/FyAjl8I0PFLATp+JUDHrwXo+I0AHfsJ0PFbATp+J0DH/gJ0HCBAx+8F6PiDAB317zPbrmORAB2jAnRsL0DHawToeK0AHa8ToOP1AnS8QYCONwrQ8SYBOt4sQMdbBOh4qwAdbxOg4+0CdLxDgI53CtDxLgE63i1Ax3sE6HivAB3vE6Dj/QJ0fECAjg8K0PEhATo+LEDHDgJ0fESAjo8K0PExATo+LkDHJwTo+KQAHTsK0PEpATo+LUDHZwTo2EmAjp0F6PisAB2fE6BjFwE6Pi9AxxcE6NhVgI4vCtCxmwAdXxKgY3cBOr4sQMdXBOj4qgAdXxOg4+sCdHxDgI5vCtCxhwAd3xKg49sCdHxHgI49BejYS4CO7wrQ8T0BOr4vQMfeAnT8QICOHwrQ8SMBOn4sQMdPBOj4qQAd+wjQsa8AHT8ToOPnAnT8QoCOXwrQ8SsBOn4tQMdvBOjYT4CO3wrQ8TsBOvYXoOMAATp+L0DHHwTo+KMAHQcK0HGQAB0HC9BxiAAdhwrQcZgAHYcL0HGEAB1HCtDxJwE6/ixAx1ECdBwtQMcxAnQcK0DHcQJ0HC9Ax18E6DhBgI4TBeg4SYCOkwXo+KsAHacI0HGqAB2nCdBxugAdfxOg4+8CdPxDgI4zBOg4U4COswToOFuAjnME6DhXgI7zBOg4X4COCwTouFCAjosE6LhYgI5LBOi4VICOywTouFyAjn8K0HGFAB1XCtBxlQAd/xKg42oBOq6RcG+vooB7ewJ0/FaAjt8J0LG/AB0HCNDxewE6/iBAxx8F6DhQgI6DBOg4WICOQwToOFSAjsME6DhcgI4jBOg4UoCOPwnQ8WcBOo4SoONoATqOEaDjWAE6jhOg43gBOv4iQMcJAnScKEDHSQJ0nCxAx18F6DhFgI5TBeg4TYCO0wXo+JsAHX8XoOMfAnScIUDHmQJ0nCVAx9kCdJwjQMe5AnScJ0DH+QJ0XCBAx4UCdFwkQMfFAnRcIkDHpQJ0XCZAx+UCdPxTgI4rBOi4UoCOqwTo+JcAHVcL0HGNAB3XCtBxnQAd1wvQcYMAHf8WoONGATpuEqDjZgE6bhGg41YBOm4ToOM/AnRMqWS/jgcI0DFVgI5pAnRMF6BjhgAdMwXomCVAx2wBOlYQoGNFATpWEqBjZQE65gjQsYoAHXMF6FhVgI7VBOh4oAAdDxKg48ECdDxEgI6HCtCxugAdDxOg4+ECdDxCgI5HCtDxKAE6Hi1Ax2ME6HisAB1rCNDxOAE6Hi9Ax/8J0PEEATqeKEDHkwToWFOAjicL0PEUATqeKkDH0wToeLoAHc8QoGMtATqeKUBHR4COSoCOHgE6egXo6BOgY54AHf0CdAwI0DEoQMeQAB1rC9DxLAE61hGg49kCdKwrQMd6AnTMF6DjOQJ0PFeAjvUF6HieAB3PF6BjAwE6XiBAx4YCdLxQgI6NBOh4kQAdLxag4yUCdGwsQMdLBejYRICOlwnQsakAHS8XoGMzATo2F6BjCwE6thSg4xUCdLxSgI6tBOh4lQAdWwvQ8WoBOrYRoGNbATq2E6BjgQAdCwXoGBagY0SAjkUMOnLoOSSLQc8MQCWkLKcBJ9P15WB9H89hVFh3Tt3vEznFfXkdv89XFPAUKa8qcDyhwmCe48sr9AdVUOUF8yKeoNdbFPQFA6HCUMAJKZ+3SEXzQt6o2xmX3U/kFA8wUb9GXRO1f3HqDl1TicdA90ul45M5PAyTSjyWlHHZkc5mxRHj2icdc+jj8akcWpJLc23X/dZw+5UyFk/n8HKHk9ijtM1PM9j9DFMMPOPGgJYroPzXfy+BP7a5subvbe5/64R4PCWFnic7EXJGZ7pxC+txqA5IR2O0DI3RciTrfzcmj3PbY/+/Z+G/PQfoAng+Z0d7hvve1JRdH+oYnZcqozp9ljDmM5GeL7jx29V9fdF97ea+vpRTHPP66Q5/vwx4BfAq4DXA64A3AG8CegDeArwNeAfQE9AL8C7gPcD7gN6ADwAfAj4CfAz4BPApoA+gL+AzwOeALwBfAr4CfA34BtAP8C3gO0B/wADA94AfENewkBmVAzDpvOSSTnmuFLoS2xJ7fsxhVPhHhpXCQMtXCtrugQwrhfIMtheZgm1QDqPCgxiCbbDlwabtHiw82LoxBduQHEaFhzAE21DLg03bPbSc9kCcxJ7ts8RghnXMsByZSfYSU5INz2FUeDhDko2wPMm03SOEJJkmg2EMSTbS8k0S7Z+RDHb/RJykJRf7XdGi/kUkv4TkYSUW+z/DfxsFGA0Yk1PcHnvSiMeWsBpQPxPm+lhm34xFPhiF5NFIHpOzs2/Gwd/jAb8AJuTs3B9lXOp19E8MBwodCf0zkdA/qbsZRyexR73gbiqn0PbrxDZ6JkHfkwG/AqYApgKmAaYDfgP8DvgDMAMwEzALMBswBzAXMA8wH7AAsBCwCLAYsASwFLAMsBzwJ2AFYCVgFeAvwGrAGsBawDrAesAGwN+AjYBNbvzgfZRJLofitsmGtl8NbVMMbVMNbdMMbdMNbb8Z2n43tP1haJthaJtpaJtlaJttaJtjaJtraJtnaJtvaFtgaFtoaFtkaFtsaFtiaFtqaFtmaFtuaPvT0LbC0LbS0LbK0PaXoW21oW2NoW2toW2doW29oW2Doe1vQ9tGQ9smVE9Q847mnBcY6pWK9Xg24tOJ9ZxEMM8URXc8k+n6ivxKOP9VstwXrs2hKXTjp6aS9VWkphH6orIIX4TVdLLxC6rfyPpy1O+EvsiR4IsiR/1BNX5hR82g6ivoqJmEvqgiwRcwX84iGr8i6Gs2UV9h6GsOoS9yBfgiCDbPJRo/R18coOmrSPc1n9AXVe33RVjbvIBm/IK6r4U0fWmT1SJCX1Sz3hdF221eTDJ+4e19LSHpK7i9r6WEvjjQel9s71otoxi/oh19LafoK7yjrz8JfXGQ7b4I7rB5BcX47VBTrSToK+L2tYrQFwdb7otC1+a/CGwOuH2tTrwvjzt+ag2hLw6x2xcqZvPahG0ORmN9rUu8r8JYX+sJfXGo1b4IxvRUGxK2OfBvX38n3Ffev31tJPRFdat9of61eRPduZEi3A9VeD8vUV8cVk6+cBJ7FOG+mSLc91FVCH1xuBBfEO4PKML1rapG6IsjhPiCcB2kCOt4dTChL44U4gvCek8R1iuqOqEvjhLiC8J5TRHysjqC0BdHM/mC+t4WYf4qwvhT1OPHcTY/ieFsfnMOr90Ud8om5dh9p2xLjt2xo+//TWSIna2W260/0LiZwW6P5Vyh43Erg93ecppjEtVzG+FandDXymt53Oh82cIQN37L7d7MlC8BIfnyD2G+EPpaUY6f9m3Ju/SaJ2J35v9Bctu0Yrld2s536VOqQDsgFZBWZfd36Z3Enu31yWSGmEyvYn+9N9nyei+jit18pr/EQfuZ2je1LedxnZsZDHafJYTHM+niUhH6Wp1ledzofOGIm7oC8oWDJ+oJyZcswnwh9LWqx1z3aJ6I1TdZVeKre7LhfRUAFQGVmOueXxnqnsoC6p5fLa97ciyve/QXV1Vm4LNzLedxnZs5DHbXF8LjVQh5nNDXqr7lcaPzhSNuGgjIFw6euEBIvuQS5guhr9UFzHVPFVTr5MZZ91SF91UDHAg4iLnumcJQ9xwsoO6ZYnndc4jldY/+ss6DGfiskeU8rnPzEAa7LxLC44cS8jihr9VFlseNzheOuGksIF84eOJSIflSnTBfCH2tLmWuew5FtU71OOuew+B9hwOOABzJXPdMZah7jhJQ90y1vO452vK6R39B+VEMfNbUch7XuXk0g92XC+HxYwh5nNDX6nLL40bnC0fctBCQLxw80VJIvhxLmC+EvlYtmeueY1Ctc2ycdU8NeN9xgOMB/2Oue6Yx1D0nCKh7plle95xoed2jf5TlBAY+a2U5j+vcPJHB7quE8PhJhDxO6Gt1leVxo/OFI27aCMgXDp5oKyRfahLmC6GvVVvmuuckVOvUjLPuORnedwrgVMBpzHXPdIa653QBdc90y+ueMyyve/QP0Z3OwGeFlvO4zs0zGOwOC+HxWoQ8TuhrFbY8bnS+cMRNVEC+cPBEeyH5ciZhvhD6WrVnrntqoVrnzDjrHgfepwAegJe57vmNoe7xCah7frO87smzvO7RP77rY+Cz6yzncZ2beQx2Xy+Ex/2EPE7oa3W95XGj84Ujbm4SkC8cPHGzkHwJEOYLoa/Vzcx1jx/VOoE4654gvC8EqA04i7nu+Z2h7qkjoO753fK652zL654eYGsdBj67zXIe17l5NoPdtwvh8bqEPE7oa3W75XGj84Ujbu4SkC8cPHG3kHypR5gvhL5WdzPXPXVRrVMvzronH953DuBcQH3muucPhrrnPAF1zx+W1z3nW173vAW2nsfAZ/dZzuM6N89nsPt+ITzegJDHCX2t7rc8bnS+cMTNQwLyhYMnHhaSLxcQ5guhr9XDzHVPA1TrXBBn3dMQ3nchoBHgIua6ZwZD3XOxgLpnhuV1zyWW1z1vg60XM/DZo5bzuM7NSxjsfkwIjzcm5HFCX6vHLI8bnS8ccfOkgHzh4ImOQvLlUsJ8IfS16shc9zRGtc6lcdY9TeB9lwGaAi5nrntmMtQ9zQTUPTMtr3uaW173vAO2NmPgs2cs53Gdm80Z7O4khMdbEPI4oa9VJ8vjRucLR9w8JyBfOHiii5B8aUmYL4S+Vl2Y654WqNZpGWfdcwW870pAK8BVzHXPLIa6p7WAumeW5XXP1ZbXPT3B1tYMfNbVch7XuXk1g90vCuHxNoQ8Tuhr9aLlcaPzhSNuugvIFw6eeFlIvrQlzBdCX6uXmeueNrjWibPuaQfvKwAUAsLMdc9shronIqDumW153VNked3TC2yNMPDZa5bzuM7NIga7XxfC41FCHif0tXrd8rjR+cIRNz0E5AsHT7wlJF/aE+YLoa/VW8x1TxTVOu3jrHuugfddC7gOcD1z3TOHoe65QUDdM8fyuudGy+ued8HWGxj4rKflPK5z80YGu3sJ4fGbCHmc0Neql+Vxo/OFI27eF5AvHDzRW0i+3EyYL4S+Vr2Z656bUK1zc5x1zy3wvlsBtwFuZ6575jLUPXcIqHvmWl733Gl53fMe2HoHA599ZDmP69y8k8Huj4Xw+F2EPE7oa/Wx5XGj84UjbvoIyBcOnugrJF/uJswXQl+rvsx1z12o1rk7zrrnHnjfvYD7APcz1z3zGOqeBwTUPfMsr3setLzueR9sfYCBz76wnMd1bj7IYPeXQnj8IUIeJ/S1+tLyuNH5whE33wjIFw6e6CckXx4mzBdCX6t+zHXPQ6jWeTjOuqcDvO8RwKOAx5jrnvkMdc/jAuqe+ZbXPU9YXvf0BlsfZ+Cz/pbzuM7NJxjsHiCEx58k5HFCX6sBlseNzheOuPlRQL5w8MRAIfnSkTBfCH2tBjLXPU+iWqdjnHXPU/C+pwHPADox1z0LGOqezgLqngWW1z3PWl73fAC2dmbgsyGW87jOzWcZ7B4qhMefI+RxQl+roZbHjc4XjrgZISBfOHhipJB86UKYL4S+ViOZ657nUK3TJc6653l43wuAroAXmeuehQx1TzcBdc9Cy+uelyyvez4EW7sx8Nkoy3lc5+ZLDHaPFsLj3Ql5nNDXarTlcaPzhSNuxgnIFw6eGC8kX14mzBdCX6vxzHVPd1TrvBxn3fMKvO9VwGuA15nrnkUMdc8bAuqeRZbXPW9aXvd8BLa+wcBnEy3ncZ2bbzLYPUkIj/cg5HFCX6tJlseNzheOuJkiIF84eGKqkHx5izBfCH2tpjLXPT1QrfNWnHXP2/C+dwA9Ab2Y657FDHXPuwLqnsWW1z3vWV73fAy2vsvAZ7/Z/nsDYPN7DHb/LoTH3yfkcUJfq98tjxudLxxxM1NAvnDwxCwh+dKbMF8Ifa1mMdc976Nap3ecdc8H8L4PAR8BPmaue5Yw1D2fCKh7llhe93xqed3zCdj6CQOfzbX9ngbY/CmD3fOE8HgfQh4n9LWaZ3nc6HzhiJuFAvKFgycWCcmXvoT5QuhrtYi57umDap2+cdY9n8H7Pgd8AfiSue5ZylD3fCWg7llqed3zteV1z6dg61cMfLbUch7Xufk1g93LhPD4N4Q8TuhrtczyuNH5whE3KwTkCwdPrBSSL/0I84XQ12olc93zDap1+sVZ93wL7/sO0B8wgLnuWcZQ93wvoO5ZZnnd84PldU8fsPV7Bj5bbTmP69z8gcHuNUJ4/EdCHif0tVpjedzofOGIm/UC8oWDJzYIyZeBhPlC6Gu1gbnu+RHVOgPjrHsGwfsGA4YAhjLXPcsZ6p5hAuqe5ZbXPcMtr3v6gq3DGPhsk+U8rnNzOIPdm4Xw+AhCHif0tdpsedzofOGIm20C8oWDJ/4Rki8jCfOF0NfqH+a6ZwSqdUbGWff8BO/7GTAKMJq57vmToe4ZI6Du+dPyumes5XXPZ2DrGAY+S823226dm2MZ7E7Ll8Hj4wh5nNDXinr8OPKFI24yBeQLB09k5cvIl/GE+ULoa0U5fqa6ZxyqdcbHWff8Au+bAJgImMRc96xgqHsmC6h7Vlhe9/xqed3zOdg6mYHPKubbbbfOzV8Z7K6UL4PHpxDyOKGvFfX4ceQLR9xUEZAvHDyRmy8jX6YS5guhrxXl+Jnqnimo1pkaZ90zDd43HfAb4HfmumclQ93zh4C6Z6Xldc8My+ueL8DWPxj47MB8u+3WuTmDwe6D8mXw+ExCHif0taIeP4584YibQ/PtzxcOnqieLyNfZhHmC6GvFeX4meqemajWmRVn3TMb3jcHMBcwj7nuWcVQ98wXUPessrzuWWB53fOl/o0zBj47It9uu3VuLmCw+8h8GTy+kJDHCX2tqMePI1844uYYAfnCwRPH5svIl0WE+ULoa0U5fqa6ZyGqdRbFWfcshvctASwFLGOue/5iqHuWC6h7/rK87vnT8rrnK303nIHPjs+3226dm38y2P2/fBk8voKQxwl9rajHjyNfOOLmJAH5wsETNfNl5MtKwnwh9LWiHD9T3bMC1Tor46x7VsH7/gKsBqxhrntWM9Q9awXUPastr3vWWV73fA22rmXgs1Pz7bZb5+Y6BrtPy5fB4+sJeZzQ14p6/DjyhSNuagnIFw6eODNfRr5sIMwXQl8ryvEz1T3rUa2zIc66529430bAJsBm5rpnDUPds0VA3bPG8rpnq+V1zzdg6xYGPvPk2223zs2tDHZ782Xw+DZCHif0taIeP4584Ygbv4B84eCJQL6MfPmHMF8Ifa0ox89U92xDtc4/cdY9KbnQDkgFpOXy1j1rGeqe9Fz76561ltc9Gbl281k/sFX7mdo3tfPttlvnZgaD3Wfly+DxTLq4VIS+VtTjx5EvHHFTV0C+cPBEvXwZ+ZJFmC+EvlaU42eqezRPxOqbrNz46p5seF8FQEVAJea6Zx1D3VNZQN2zzvK6J8fyuudbsLUyA5+dm2+33To3cxjsrp8vg8erEPI4oa8V9fhx5AtH3DQQkC8cPHFBvox8ySXMF0JfK8rxM9U9VVCtkxtn3VMV3lcNcCDgIOa6Zz1D3XOwgLpnveV1zyGW1z3fga0HM/BZo3y77da5eQiD3Rfly+DxQwl5nNDXinr8OPKFI24aC8gXDp64NF9GvlQnzBdCXyvK8TPVPYeiWqd6nHXPYfC+wwFHAI5krns2MNQ9RwmoezZYXvccbXnd0x9sPYqBz5rm2223zs2jGey+PF8Gjx9DyOOEvlbU48eRLxxx00JAvnDwRMt8GflyLGG+EPpaUY6fqe45BtU6x8ZZ99SA9x0HOB7wP+a652+GuucEAXXP35bXPSdaXvcMAFtPYOCzVvl2261z80QGu6/Kl8HjJxHyOKGvFfX4ceQLR9y0EZAvHDzRNl9GvtQkzBdCXyvK8TPVPSehWqdmnHXPyfC+UwCnAk5jrns2MtQ9pwuoezZaXvecYXnd8z3YejoDnxXm2223zs0zGOwO58vg8VqEPE7oa0U9fhz5whE3UQH5wsET7fNl5MuZhPlC6GtFOX6muqcWqnXOjLPuceB9CuABeJnrnk0MdY9PQN2zyfK6J8/yuucHsNXHwGfX5dttt87NPAa7r8+XweN+Qh4n9LWiHj+OfOGIm5sE5AsHT9ycLyNfAoT5QuhrRTl+prrHj2qdQJx1TxDeFwLUBpzFWPdUgz46MtQ9t+XbX/cEGXLx9nyeXKSuzwj9o7hspuafZ3PobO5KWN/WIaxvM6CPSihf8EPNHZR6Y33PzmVU+Oxc+n7r5tIFA5fddXOLB5io3+3BlppSTE6cwUaYvA6nnl1zeJKino5b8m9AyDXP/k5iz06rfyfBR+uW5jqqHkpejopAj4fNOyH5xDNFWkr5zBSUSYHJ5hyX1M41JYeT2KP0YNdjYE2OAdZ65nN8xNzyrTcdAPUZ7D4vl4fAdL8dUniS7FymsTifaSzOZxwLTTgcY3FXvt3LWq58uHvf2h0uRT+22L+H2O7YU3Jp6yT2KMK4VIS+VpTjpwsWvQ1mWm2klHE8S4sn3CfHnEU1Jrh4a4Din1zp+kyTQIM9VPSldKNK+3e0zg0YSOGBfB5SSC+jz8pSvCX83Sm5dhIMpS9wXF6AipO99U9pY07pn4aoL+X1Qm5EAioaiXrzAiFPofJ7/f6oLxrwB32RaJ6vIBIoUr4CrydUFHCiKlhUFMjzhgP+aCgS9kcxaauI1+uLhArDKs/jLyh0ghFvgRP1BbwepyDiDUQi3qDfX+D1RvzBaDAU9HgKot6gkxcIhBy/xxvycPmnoeuf8lzFPsu0ir3QXWQ2kkLgXPpdyPFlIUwT10WMqxc9Fo0YxuJiprG4mHEsnmVayT2Ub/dKjisfHt63dpe6kuOK/Q75PEUb9UqOMC4Voa8V5fj9V1ZyFzKt5C6RuJK7hHkldwkDKTyev/+t5Brn2kkwlL7AcdlY2EruUsKVHCbtRFdyXP65FK3kdjcp2LwFx6kn1wTTROIE04R5gmnCMME8mV8+EwzlOa9FZ0U7TTAJX/Bg8gX1NcXLCCdowvhTlOOH8/qyOCbohL8yLpduItxpe9SiCZqSa7B/mv6Htlovd7dam3HcptvdJRwnsUflE1crXHanMtqdqI7NLd/+1oHZnKEAacFUjLVg3PJtxjQWLZnGoiXz9jfHWDyTbzencOVDp31rd6nb31yx35nY7thDvf1NGJeK0NeKcvz+K9vflzPtTlzBuTvRnGkSuIJxd0LrfAUDKTyfL2P7uzlhIXhlrp0EQ+kLHJdXlsP2N6V/WhFuf2PSTnR1zeWfVvtgdc31cZyr3NV1aykEzqXfVQxkfTXTxHU14+pFj0VrhrFowzQWbZg/ksJR2XfNt3slx5UPL+5bu0tdyXHFfrd8nqKNeiVHGJeK0NeKcvz+Kyu5q5hWcm0lruTaMq/k2jKQwiv5+99Krl2unQRD6Qscl+2EreQKCFdymLQTXclx+adgH1xkujyXJ++lTDCFEieYQuYJppBhgnktX8ZFJkoCo9zewxNMonq9zuQL6otMYcIJmjD+FOX44bwOl8NFpgjhRaadtkctmqApuQb7J2LwD/Wq91nCb3vqRthXEeFcVp7fMVjEVDhEcxkVjjJcAmtPOLFx2d0+t3iAifot1+8Y7CbkOwafZfqOwWs4bkXqoJD0HYPX7KE6p/iOwfa5dn/H4LXEM4X0K8PXuaR2vSk5nMQepQf7GgbW5Bhgree1DEvLGyw/0NUBcAOD3TcybS/cyHiIeT3TWNzENBY3MV/N5RiLHvl2H+hy5cNb+9buUg90uWL/bWK7Yw/10pYwLhWhrxXl+P1XDnSvY1o238y5334D0yRwM+N+u9b5ZgZSeDdfxoHuDYTbErfk2kkwlL7AcXlLORzoUvrnVsIDXUzaie4Xc/nn1n1wNbcb0yr2NneRebsUAufS7zYGsr6DaeK6g3H1osfidoaxuJNpLO5kHItuTCu59/PtXslx5UPvfWt3qSs5rtj/IJ+naKNeyRHGpSL0taIcv//KSu42ppXcXRJXcncxr+TuYiCFT/L3v5Xc3bl2EgylL3Bc3i1sJXcP4UoOk3aiKzku/9yzD67mXpfLk/dSJph7JU4w9zJPMPcyTDB98stngqE857XorGinCSZRvfoy+YL6au59hBM0YfwpyvHDeX1fOVzNvZ/wau7b+XZO0JRcg/1z/39oq/UBd6v1QY7bdLu7hOMk9qhriasVLrtTGe1O+CdFLN/+1oH5EEMB8jBTMfYw45bvg0xj0YFpLDowb39zjMUX+XZzClc+fLlv7S51+5sr9r8itjv2UG9/E8alIvS1ohy//8r29wNMuxOPcO5OPMQ0CTzCuDuhdX6EgRS+zZex/f0QYSH4aK6dBEPpCxyXj5bD9jelfx4j3P7GpJ3o6prLP4/tg9U118dxHndX109IIXAu/R5nIOsnmSauJxlXL3osnmAYi45MY9GR+SMpHJV9/3y7V3Jc+TBg39pd6kqOK/a/z+cp2qhXcoRxqQh9rSjH77+yknucaSX3lMSV3FPMK7mnGEhhUP7+t5J7OtdOgqH0BY7Lp4Wt5J4hXMlh0k50Jcfln2f2wUWmB3J58l7KBNNJ4gTTiXmC6cQwwQzJl3GRiZLAKLf38ASTqF5DmXxBfZGpM+EETRh/inL8cF53LoeLTM8SXmTaaXvUogma0Nc7+edZxt2da5nObZ+zfLdzKOxqjciht7uL5Xbr3z/l+MWQ5y2/66XjUfuGereIMM5VF8Ia4AXL41DHywsMcdjV8jjU36rXNdfub+t70fIx1CcSLzLEzoh8u3OmK5PdI4ntjj3UMU7oH0VtM7VPXmTydTfC3C7P72zuxrQR81Iuo8IvMVyq705YJHDZ3T23eICJ+t0ebLHvbeYOtpNTeAiRWs95qXR6VkZ6vuz67xX39VX39TX39XX39Q339U33tYf7+pb7+rb7+o772pPj0ys62CR9F/SrLingtjcMbW8Z2nq6beXJvC8zMW+vXEaFezEw77uWM6+2+10m5i2vYHuFKdjey2VU+D2GYHvf8mDTdr/PEGwmXRO1/1U3MajXI5SE0FtoXf4aU8J+kMuo8AcMCfuh5Qmr7f5Q+OzwOlOwfZTLqPBHDMH2seXBpu3+WMjs8IabGNSzAyUhfGL5br6uBHoz7FZ9arndOsY/YbC7j9Bq4E0mgu6by6hwXwaC/sxygtZ2fya8GujBFGyf5zIq/DlDsH1hebBpu78QUg285SYGdTVASQhfWj4r6lm7D8Os+JXldusY/5LB7q+FVgNvMxH0N7mMCn/DQND9LCdobXc/4dXAO0zB9m0uo8LfMgTbd5YHm7b7OyHVQE83MairAUpC6G/5rKhn7a8ZZsUBltutY7w/g93f59qdM/rcvLvlNxx/sDx2dGx/zxA7PxJPktVTij8pov8eD39sc2V9HB2TX0HyL+57Yv+/gfDfBgEGA4bkFrfHHuob26/SjYEaSMjjQ4ljkmv8CE/81CDC8RsmZPwID7HUYMLxG87MDUMRBwxD8nAkD8ndmRtGwN8jAT8Bfi4HbniD0DcjCH0zSkhsE+7/q5GE4zdayPgRbmmrnwjHbwwzN4xCHDAayWOQ/HMJbhgLf48DjAf8Ug7c8Bahb8YS+maCkNgm3A1U4wjHb6KQ8SPc4FLjCcdvEjM3TEAcMBHJk/CaogQ3TIa/fwVMAUwtB27oSeibyYS+mcbsm2nIB78ieQqSp5bwzXT4+zfA74A/cnfuD/uEYo3/I8M+xA+E/plh+T6E9tUMhn2ImZbbzfXpu1mW261jeyaD3aPy7d6z1HbPYrB7dD5PbUHNaYT+UZQ26wPEzJTyOUCk/NBfDtJztnvWNcd9neu+znNf57uvC9zXhe7rIvd1sfu6xH1d6r4uc1+X5xo+VOck9qjYJn4Kbb87fRBubu6uH3BbYGhbbGhbllv+H4SbTVxMxZ4/cxkV/jOXvt8Vlp8wa7tXMARveQbbHKZgW5nLqPBKhmBbZXmwabtXMQSbSddE7Z/rJgZ1+UBJCH/lykzYeUwJuzqXUeHVDAm7xvKE1XavET47zGcKtrW5jAqvZQi2dZYHm7Z7nZDZYYGbGNSzAyUhrLd8A0VXAn8xbCRssNxuHePrGez+W2g1sJCJoDfmMiq8kYGgN1lO0NruTcKrgUVMwbY5l1HhzQzBtsXyYNN2bxFSDSx2E4O6GqAkhK2Wz4p61v6bYVbcZrndOsa3Mtj9j9BqYAkTQadUZVRYd07d7wFV7SZobfcBVYvHl6jfcg22pUzBllqVUeFUhmBLszzYtN1pDMFm0jVR+5e5iUFdDVASQnpVu2dFPWv/wzArZlhut47x9Kr0dmdabnfsDJ3a7izL7dbxmMng7+yqtBPbnj68NhtdYJyTu/sPr1UAnSoCKgEqV+W/aDqX8KJpBULuzSGOSa7xIzylUxUJx6+KkPEjPHhSlQjHL5eZG3R8xzigCpJzkVy56s7cUBX+rgY4EHBQOXDDAkLfVCX0zcFCYptwz15VIxy/Q4SMH+E2tDqQcPwOZeaGgxEHHILkQ5F8UAluqA5/HwY4HHBEOXDDYkLfVCf0zZFCYptwB08dRjh+RwkZP8JNKXU44fgdzcwNRyIOOArJRyP5iBLccAz8fSygBuC4cuCGZYS+OYbQN8cz++Z45INjkVwDyceV8M3/4O8TACcCTqrK9+E1vcbPZthvyyL0T03L9yG0r2oy7EOczByXk1KL4+9kFIvL0T7EuNSd4/IUeN+pgNMAp+8hLp3Enu0fksliGNNx+Xbvf2ubT2Gwe3w+z/xNzRuE/lHUNlPHuP6CqB8Y9m0nWm633lvkyO1J+Twxnkas5xl0vK4Ifa2ox4/jnOMMhripRTzPxj47WAvpSj0WbzBxxxTLY2ABE3dMzZfBHWcScgehrxX1+HFwx5kMceMwcYfDyB0vM3HHb5bHwGwm7vg9XwZ3KELuIPS1oh4/6rh5hSlfZlpu9xymfJmVLyNfPIT5QuhrRTl+pn0hhfaCPEg+o+ru94W88N98gDyA390X0pdRKyD/4EueARRXLJM9UV/bB0gbkYp0rZWNNs5Sdsj6CVYt3y8KCRIXH7EnVJVR4VBV+n5rE+42c9ldu2rxABP1y1Ypc+hqYhofSqQgYpe2acVyu7SdmeYseF8dwNmAuow70I/BOOixoN7hpPx5gXpMqw/db42UnR/icfBSjkM+0zjkG8aBuho6B+mu/IXKCRR4iwLRwryCiCdUFPJGAkVF/ryCgoLCglBBGHqMFoYKI5GCgjx4c55fRX0Bx1eYp4I+X1jnwq96DNz+dN8/pO7IJ4lIERSD5xLGYJrrx5IPVf+7i2UnsUdRjgGXjvWpdeSYgM9iWHbNzbf76FPbXZ/B7nn59EGpn3TGwEzU5vMIl66EcaMofcFMkirW3/5IkudV5ckZ6hncRzmDn89URZ7PX02TjkODZCWjGghI0gtsr2RiS2jqGX1hvv2VzAUMlcyi/BQRlcwFhJVMQ8JKhjBuFKUvpFYyEkiyoZBKJo9yBr+QqZK5kL+SIR2HRslKRjUSkKQXcVcyFDP6RQwfk7iIcKa8WE6ws81IEoL9YiEzkoeSiS9hmpEucWekDNRW8rH52D0V6dnYPXW9VMrdCC79ggxrp6X59q8ZGzPYvWzf2h0uRb/t/r6Uwe7l+TwsS/6BZTo9FaGvFeX4ad9mo7HTf5+aUnzFI4Cufnhd2Q9oAvJl5XynqgnTnaqmVRkVbspwp+pyy+9Uabsvr1o8wET9lutXaF7GFGzNqjIq3Iwh2JpbHmza7uZCLvBd7upKPaO2qGp/BdWiqt0X9loSJ3zllOJZdSebfcrj8SpfAFRzQMdIOOgpChbk5RWE8jwRXyTqcTx5/miRA7pFQr4QNPtUuMBxok5BYVTlbSvZX0EwDFb7nYgD/xPNiwTBbF8o4gtGvY7PF3H8yucUhoJFkYAKFIQK87yegqjf64RVntcJhFRsdn/CPQ2K+UjLjdHsf6krXwGvVwJaubN/ZfT/wQ917rTiWpvT6unBY3GVy0utq7oDElsH6/+wtURb66q7zmzUJW0rAjIviu54riKcGFozOZeacChtvhrfLg16PZ6AV78vGHGULwKLM48nUuhzwk5B2FMU8qlQ1OfxecORcCH0WaCiTrQgHIoGd+hVnpXR1UyVUZuqjAq3YaiM2lpeGWm725ZTZURBAG0ZKqN2TJub7aruPFNS+i1WLVGPRQFzlegk9my3u4ChSnyCsEosFDCGhQyxE2bKo3BVvg/T67FobXk8RQTEU4QhnoqY4qmIMZ70tlZLhrGIWh4DlzHZ3Z44BnJc26No1doeyTFe1LgCtV+J5FisXwOv1wKuc1e5WSk7Xks+Nh9gGtRNuG9PqCCsVEFBLOc4x+LUFPqxoNYxIOBWg5cppqj1vEaIno/RndMrvAC+vup+frngeiHb+EyfPye91XMDU4F1g3urBz82j8ONTONwozsO+oL+9JTiMfkIKoXuWf/Zz2WT+uYm4muR03c13/rJ+SYBBcTN1DpyTB7XMKxQVuXbf656M4Pdf+XTB6V+qD/NdDPhDvwtdEGuCONGUfqCmSTZ7o5LIMlbmFYv1DM46Ter3MpUXd3KX2WSjsNtyUpG3SYgSW/nrmQoZnStJPXFD8Ll/06DmKi9a/NlLvUTtfsOwmqDcgylVggSyOcO25dRGzNTUi7Moie19fl2J7k+3anBYPeGfPqg1A/1tynfSUhGhL5W1OPHkS+NGOJmk+V2H8CUL5vzZeTLXYT5QuhrRTl+2rclvxP4TnRQfheSu2Tt/tvH74b33QO4F3BfVb5fS+yXZf93At/PfNGDYgy/zaIfQ90nlY4PCBjD7xjG8DvCMXxQwBj2ZxjD/oRj+JCAMRzAMIYDCMfwYcsvvmm+foDheKWDALsfZLD7EQF2P8Rg96PEu+Ql67IOqBZ7BMmPVt19XfYY/LfHAU8AnqzK/wvjdxNuGj5G2FdHQt+U56ewOhLHVOx5qiqjwk9Vpe/3acJg4LL76arFA0zU7/Zg09/ckZrCH2x3W34r2X08mMSecce8k/va2X19VscgNcNrB5u+TtdJ7CH/uazY+WrnqsVX4UvOJs+gWaMTkjvvYTZ5Dv5bF8DzgBcYV/l6PPRY27zK72r5ykAnc1eGKmdbvt3V3XNMdv+Tz0OO1DFO6B9FaXNZvkSCYlWcqN7u1x8og7qJ9q1iAh6LF92Jq1vVlJ2/MOJFROKxtm6GizPU29/9Et8C8MS+Y+5FwuqtW1Va51IHnyafFxkqQexrqnsKO77kIxztR7jd8xLZxOjdXunNADRx+3vA3bLQy3e9raT/LRt+Jk3az7lRxbz7JTFhHT9d6Qu2vK6EvNGd+PLejJRdH6r+d+cnJ7FHda9qv44v235/5hmmCjP1HLtXFNrmlxnsTjuHZ5Kk/hjCy4Rk9Arh3QLCuFGUvmAmSbZLhhJI8hVukrS0IvBTVgSvEm+ux1Znr6LV2f44rq8lKy31mgASed32SqsTU6WVKaDSep3B7iwhldbrhGT0BmGlRRg3KitZaYkgyTf200orQFkRvMlUab0pr9IiHdceyUpL9RBAIm/ZXml1Zqq0KgqotN5isLuSkErrLUIyepuw0iKMG1UpWWmJIMm399NKK0hZEbzDVGm9I6/SIh3XnslKS/UUQCK9bK+0nmWqtKoIqLR6MdidK6TS6kVIRu8SVlqEcaNyk5WWCJJ8dz+ttEKUFcF7TJXWe/IqLdJxfT9Zaan3BZBIb1tJBFccWknazzh6PYSf/NhpEBO19wM5icM2+0pInA+4E8dJ7FGxj19RJ+SHxIZzfDD8YQa7P0rOaErfPrddx48p41Oqo5ak2q/jJ0lHOer0bPt1/NT2qU5/kOhDBso/8By7pzpdw37KYPdBTLtx1B9u7ENYwxP6Wh1kedzo0rAPQ9z0ZdpM6Vu1+IOzEkm+lgCS/yw5GzvKEeCoz5OOcpRHgKO+SDrKUT4Bjvoy6ShH+QU46qukoxwVFOCor5OOclRtAY76JukoR9UR4Kh+SUc5qq4AR32bdJSj8gU46rukoxw1TcA5Qf+koxxVX0BGDUg6ylGTBGTU9wz3K7Y/qaSKKofyq15/SJ7fqx+q2q/jjzKC04lSBudAOqM9UoNzoIDgHCSEOT2UwTk4yZxqsIDgHCIkOEl/zXtoMjjVUAHBOUxIcPoog3N4MjjVcAHBOUJIcOZRBufIZHCqkQKC86f9kTl/Ti6I1M8CgnOUkOAMUAbn6CRzqtECgnOMkOAMUgbn2GRwqrECgnOckOAMUQbn+GRwqvECgvMXIcFZQBmcE5LBqSYICM6J+yNzTkouiNQkAcE5WUhwhimD89ckc6pfBQTnFCHBGaEMzqnJ4FRTBQTnNCHBWUQZnNOTwammCwjO34QEJ+mtpN+Twal+FxCcf+yPzDkjuSBSMwQE50wZwelRlME5K8mcapaA4JwtJDhJ73POSQanmiMgOOcKCU7S+5zzksGp5gkIzvlCgpP0VtKCZHCqBQKCc+H+yJyLkgsitUhAcC4WEpx+yuBckmROtURAcC4VEpyk9zmXJYNTLRMQnMuFBCfpfc4/k8Gp/hQQnCuEBCfpraSVyeBUKwUE56r9kTn/Si6I1F8CgnO1kOAspAzONUnmVGsEBOdaIcFJep9zXTI41ToBwbleSHCS3ufckAxOtUFAcP4tJDhJbyVtTAan2iggODftj8y5ObkgUpsFBOcWGcHpJf1+zq1J5lRbBQTnNiHBSXqf859kcKp/BARnSjUZwUl6n/OAasngPKCa/TqmCglO0ltJacngVGkCgjN9f2TODDqjxS6IMgQEZ6aQ4CT9fs6sJHOqLAHBmS0kOEnvc1ZIBqeqICA4KwoJTtL7nJWSwakqCQjOykKCk/RWUk4yOFWOgOCssj8yZ25yQaRyBQRnVSHBSfr9nNWSzKmqCQjOA4UEJ+l9zoOSwakOEhCcBwsJTtL7nIckg1MdIiA4DxUSnKS3kqong1NVFxCch+2PzHl4ckGkDhcQnEcICU7S7+c8Msmc6kgBwXmUjOD0kd7nPDoZnOpoAcF5jJDgJL3PeWwyONWxAoKzhpDgJL2VdFwyONVxAoLz+P2ROf+XXBCp/wkIzhOEBCfp93OemGROdaKA4DxJSHCS3uesmQxOVVNAcJ4sJDhJ73OekgxOdYqA4DxVSHCS3ko6LRmc6jQBwXn6/sicZyQXROoMAcFZS0hwkn4/55lJ5lRnCghOR0hwkt7nVMngVEpAcHqEBCfpfU5vMjiVV0Bw+oQEJ+mtpLxkcKo8AcHp3x+ZM5BcEKmAgOAMCglO0u/nDCWZU4UEBGdtIcFJep/zrGRwqrMEBGcdah1LKphoIPXLSknpWpU62B1P16p0Op5NPIjUTtaJrXWk9k1dQru1bmmu7brfGrsJeIp4+rDqjn8L9+sk9qgP6b5SUuF4StTeegJisx5DbOYzxWa+wNjsWpUnzhO19xwBsXkOQ2yeyxSb5yJdY08ase716XRXFc+h6+vAc+yPpfoMsXQeUyyd5+qq/56esutDOdYc470k1X4dz+daGVJPII8RrgzPJyxuGhCSUQb0USllVwLlcHwD4qSNPRdUY1T4gmr0/TYkDAYuuxtWKx5gon4dqaxaK9t+HS/cH1n1QsJEaiSUVRsxsepF1RgVvoiBVS+2nFW13RcnWTX2KI8AVr1kf2TVSwgTqbFQVm3MxKqXVmNU+FIGVm1iOatqu5swsKpJ10Ttb+jOANTJ37CanbPoZdWSs5xfwCzXdH+c5ZoSBvrlQme5y5lmuWbVGBVuxjDLNbd8ltN2Nxcyy+nZ+DKGWa4JYZJdRujvFslZTtUWMMu13B9nuZaEgX6F0FnuCqZZ7spqjApfyTDLtbJ8ltN2txIyy+nZuAXDLNecMMlaEPr7quQsp+oKmOVa74+zXGvCQL9a6Cx3NdMs16Yao8JtGGa5tpbPctrutkJmOT0bX8Uwy7UiTLKrCP3dLjnLqWkC7pAV7I+zXAFhoBcKneUKmWa5cDVGhcMMs1zE8llO2x0RMsvp2bgdwyzXljDJ2hH6uyg5y6lJAma56P44y0UJA7290FmuPdMsd001RoWvYZjlrrV8ltN2XytkltOzcRHDLBchTLIiQn9fx8SeqaTjp0h/s+d6Ql9Indmvr2a/jjfsjzP7DYTJfaPQmf1Gppn9pmqMCt/EMLPfbPnMru2+WcjMriuQ6xhm9msJk+w6Qn/fImNmJ/1NqVuTM7u6VcDMftv+OLPfRpjctwud2W9nmtnvqMao8B0MM/udls/s2u47hczsugK5hWFmv5kwyW4h9PddMmZ20t88uzs5s6u7Bczs9+yPM/s9hMl9r9CZ/V6mmf2+aowK38cws99v+cyu7b5fyMyuK5C7GGb2OwmT7C5Cfz8gY2Yn/WWpB5Mzu3pQwMz+0P44sz9EmNwPC53ZH2aa2TtUY1S4A8PM/ojlM7u2+xEhM7uuQB5gmNnvJ0yyBwj9/aiMmT1IObM/lpzZ1WMCZvbH98eZ/XHC5H5C6Mz+BNPM/mQ1RoWfZJjZO1o+s2u7OwqZ2XUF8ijDzP4IYZI9Sujvp2TM7KS/afp0cmZXTwuY2Z/ZH2f2ZwiTu5PQmb0T08zeuRqjwp0ZZvZnLZ/Ztd3PCpnZdQXyFMPM3pEwyZ4i9PdzMmZ20t/c7ZKc2VUXATP78/vjzP48YXK/IHRmf4FpZu9ajVHhrgwz+4uWz+za7heFzOy6AnmOYWZ/ljDJniP0dzcZMzvpb0K/lJzZ1UsCZvbu++PM3p0wuV8WOrO/zDSzv1KNUeFXGGb2Vy2f2bXdrwqZ2XUF0o1hZn+RMMm6Efr7tWp2+0PHzWsM/niV0B+vEfrjdWZ/OIk923979fVqDHtlOXR260moQkrxg8n9DaQ7y+BQGpGWUj4z6RuEQZeK9HzTJf0eUgadS783GDLm0HMs3/3O2REA1P1W37d2h0vRb7u/ezDYfRix3bGHemYljEtF6GtFOX7at5XR2FGO37Y99+cJR5U3ryiQ5/gLfHkRv9cT8QSciC8vqiCQPCEfhFE07AtGgh5v1BPwhLe5Mf5Ezo7XGEFrWedn7L/3cOW34PVtwDuADNdOTOop6P9Pafc7XOt4Wj09eCx6uhNcr2rugMRmbP0ftpZo61Vt19mcOvneIShFi6I7np6EZW0vERuIjqK0+V3Ulwp6PZ6AV78vGHGULwLTiMcTKfQ5Yacg7CkK+VQo6vP4vOFIuBD6LFBRJ1oQDkWDO/Qqz32Vd5n2Vd6rxqjwewz7Ku9bvq+i7X5fyL5KL1dX6n57EwdrjKx1v3impPSbrhDPrEpPXk8QbjB/IGAf4gOGePqQKZ4+RLpSj8VruSkpP+TSj8VR59gdA/PA5qyq9HYfXU4rrUT1/IhwD5PQ1+poy+PmdaZ8qWG53fOZ8uU4IfnyMWG+EPpaUY5fyZ0J/fdHaJX/MZJj82dpOwKfwOungD7lvCPQR+COQF+3Hv+s5I5AX8OOwGflsCPQh3BHoC/hgugzITsClDZ/LnRH4HOmHYEvqjEq/AXDjsCXlu8IaLu/FLIj8JmrK3W/XzGt4L5i3hH4jMFvXPrqikDrTK1vDbefr6H/bwD9AN8CvgP0BwwAfA/4AfAjYCBgEGAwYAhgKGAYYDhgBGAk4CfAz4BRgNGAMYCxgHGA8YBfABMAEwGTAJPdmRv7XuuTnbJz2zeGtn6Gtm8Nbd8Z2vob2gYY2r43tP1gaPvR0DbQ0DbI0DbY0DbE0DbU0DbM0Dbc0DbC0DbS0PaToe1nQ9soQ9toQ9sYQ9tYQ9s4Q9t4Q9svhrYJhraJhrZJhrbJbltKCg/PfMLAuSecw1PMpRPr+TVZMeyob4j60n7pR1hXnGi5L4p2KKq+TdxmT+zOxXeJ9uUrvr/Rn9AXJ9nrCwffWRmQiM2ene+/fL/3fTkl79L8QOiLmhb6wh/d9f7Qj3tnc9B0F2ng3vQVNN9rGkToi5Pt8kVgd3e5BpfV5sDu74UNKVtfnj3dMRtK6ItTbPFFYM/36obFb3Opd/SGx9tXoNTxUyMIfXHqvveFE4eeamQ8Njtx2ax+Kr2vvDjHT/1M6IvT9qUvfHHrqUbt0WZftAw2q9F76itQpvFTYwh9cfq+8UWwjHqqsbuxORQts81qnLkvZy/GT40n9MUZ5e0LZ6/0VL/sarPaS5vVhJJ9RfZ6/NREQl/UKj9feBPQU01CNnuiCdmsJtPt7yq8b5GoL84sJ184iT2KcH9AEa5vVU1CXzhCfEG4DlKEdbw6ldAXSogvCOs9RVivqDMIfeER4gvCeU0R8rJyCH3hZfIF9QUSwvxVhPGnKMdPx+9sQA23v8nuWeBE92zwF/escJx7djjGPUsc5Z4t/uSeNY5wzx6HuWeRQ9yzyUHuWeWP7tnl9+5ZZn/3bPNb96xTnynoM4qST8lLLYnG3qeENeiv1cgutTjleanlV7o6cqdLLVOqMSo8pRp9v1MJg4HL7qkoKYj63R5sqSnlc5Xx02o8ZF9yTBJNQBzI03SsUZ8Ua0d2zOE52aYaYHwaPw0lHPVYaJ31eFBfWaT8FrTpxIFbVr+XFrDaP9MZbjT8Vo0nnnS/HXYTT6X1U1pyc43F70xj8XsCY7Gv4uIPprH4Q2BczGAaixnuWJTnV+BQTtC4oJjpFi6zTJOpk9ijtFOnMVRGHAPMFYSzq9lttw6A2Qx2z2FKvjkJEFEpj5rFNBZzmcZiLuNYfMo0Fuedw5sPierHlQ/n71u7S71ywhX7DYRsIxLGpSL0taIcP12w6K1E045CShnHs7R4wn1yzFlUY4KLt3ko/smVns00Cczbww5AKd2o0v4drfM8BlJoZMk5T1mKt0Rtnl/NToKh9AWOy/moONlb/5Q25pT+WYDPCbxeyI1IQEUjUW9eIOQpVH6v3x/1RQP+oC8SzfMVRAJFylfg9YSKAk5UBYuKAnnecMAfDUXC/igmbRXxen2RUGFY5Xn8BYVOMOItcKK+gNfjFES8gUjEG/T7C7zeiD8YDYZgYVwQ9QadvEAg5Pg93pCHyz8L0CqWalIobdcD9yllUlgocVJYyDwpLGSYFC62ZFLYbRAHdnzLACXpLLJ0UriYiXQWEUwKpW0nUvpnsaWTApd/Fv+HtjaXuDuPSznOCXe3Xegk9iju8ywqu1MZ7U5Ux2WWb7nqwFzGMIEuZyomljNuMy5lGos/mcbiT+YtV46xaGz5litXPlxq+ZYrV+w3EbLlShiXitDXinL8/itbrkuYVtcrOFfXy5gmgRWMq2ut8woGUmgmZMt1GWEhuLKanQRD6QsclyvLYcuV0j+rCFfXTQhX11z+WWXwT1kXUqVtsVL65y8m/vyLYBxK2wWiHIfVTOOwWlg8rGEahzXC4mEt0zisjeNIxubCzqAuWRzjonGdxKJxHXPRuI6haGxRTkVjaSvp8iS59YR9URaNLZiKkvVxFI2ljQMEqAorJ+qEoMJyAmF/oDAU8RQGoa6K5nkjXkr/bKhGV+hRFo1c/tmwhx1Hik/PcOxA/U248MJxSX3qMJkwLjeS2Rxk+0Wivxl8vcny0xbtl00Mdm9mqhN0v9nu37NTdn0ox5pjvNum2a/j/9m7Ejibqy8+jSVCMZZhbM+SLel333vz3htkzS6kJBJm5s2zqxTtURFlTdokFCFkTxslJFuIFu2LUpZo0Y7+5/Imx7i8N/POGb/z9/t9Pt//nDnmfzvnfs+999x77nu/w9RJr5Sgvc7mpSDt82EGv7vY5PQzwnNSYMbq8xHCRZgwbhQlF8yT5H/Jx7k4SR6x+yTJlb0ePUczmn9t7rf2+V8Gv+MSeDI53S7nmxKOMvTFeQn2jgG9Y9M2Uvsdb3O/dezHM/idhyn28zDGPtc80K3xuRkDN+TSfaFY7cxLF6uKkGtF2X94DOVNcE4CuG3Ml8Cc5FLsiPMxDPqeQnbE+QQM+li5SBUyAecn5IIw/hRl/zknCnyTbX7KyVbqqrgn3v42nu8QZanaBexvYwGHKEvVEUBUQYcoS1kCiLrAIcpSbgFEFXKIspRXAFGFHaIs5RNAVBGHKEsFBBB1oUOUpeoKIOoihyhL1RdAVFGHKEs1EEBUMYcoSzUSQFSCQ5Sldgo46yvuEGWppgJGVAmHKEvtEDCiSjpEWaq5gBFVyiHKUi0FEJXoEGWp1gKIKu0QZam2Aogq4xBlqXYCiEpyiLJUBwFElXWIslRHAUSVc4iy1D4B+6jyDlGW6iRgRFVwiLJUZwFEVXSIslQXAUS5HKIstUbAGlXJIcpS3QSMqMoOUZbqLoCoKg5RluopgKiqDlGWShNA1MUJ9DYee6hfCED4BRQKf6A/1s+9VSP+kLz+jGQlRHa18Ad9tXw+kgsguSCSL0ByISQXRnIRJF+I5IuQXBTJxZCcgOTiSC6B5JJILoXkRCSXRnIZJCchuSySyyG5PJIrILkikl1IroTkykiuguSqSL4YyRkFjsvVQVcDUBNQC3AJoDbgUkAdwGUAC6AAboAH4AUkA3wAPyAASAHUBdQD1AdcDmgAaKjjCNAY0ATQFHAFoBmgecKJrzekngB0e/oLQ+Jo27Vc4XZagO0tAa0ArQFtAG0BVwLaAdoDOgCuAnQEXA24BtAJcC2gM+A6QBdAV8D1gG6AGwDdAT0APQGpgDRAOiAIyACEEo53GP7gfAvEbaaupUHXyqBrbdC1MejaGnRXGnTtDLr2Bl0Hg+4qg66jQXe1QXeNQdfJoLvWoOts0F1n0HUx6LoadNcbdN0MuhsMuu4GXQ+DrqdBl2rQpRl06QZd0KDLMOhCCXxfdJI5brO2G+t6FmzMkxDkJbazRULsbWUce2enpVoStaV5aZVA52OGzbnIOG6oah27z+7MFxW1ibUt74mXHrUl5CJkXy4s/KKnK2Px2X3yS6Pa5bwtK+sLqNoTctHLhlz4Qqe+dKtDznwOmF7gdVVO2gqYXwbWkZCL3vbiwn+6F6BdnV2f/ad/mdo12WvLfaYXs3Ui5KKPXbjwn/lldNdG73PEFyV2jrYtf8T+U9cRctH37HNhRWGn6hKNz1ZUPquukdtKjrL/1PWEXPQ7m1x4o7ZTdTujz95QNnxWN5ypLX+2+k91J+Si/9nhIpBNO1WP0/icEsq2z6qnuS0rB/2nUgm5GJDbXFg5slOlneqzyqHPKj1rW8Ec958KEnIxMPe48MRgp8pAPrtDMfmsQgl05yH43CJWLm7MJS6s2B5FeD6gCPe3qhchFzcJ4YJwH6QI83jVl5CLm4VwQZjvKcJ8RQ0g5GKQEC4I1zVFOC+rmwi5uIWJC+oaOuH4VYTxpyj7L7Me4gr/xHWYrHUaXMfBdR5cB8J1IlxHwnUmXIfCdSpcx8J1LlwHw3UyXEfDdTZch8N1OlzHw3U+XAfEdUJcR8R1RlyHxHVKXMfEdU5cB8V1UlxHxXVWP5IDSE5Bcl0k10NyfSRfjuQGSG6I5EZIbozkJkhuiuQrkNwMyc2RXB3JNZBcE8m1kHwJkmsj+VIk10HyZUi2kKyQ7EayB8leJCcj2ReWMyeUXvB7b0AfQF9AP0B/wADAQMCNgJsANwMGAW4B3AoYDBgCuA1wO+AOwJ2AuwB3A+4B3AsYChgGuA9wP+ABwHDACMCDgJGAUYCHAA8DRgPGAMYCxgHGAyYAHgFMBDwKmAR4DPB4wnEfaGuoHkvXTzlqqE8k0M5nmfVk3a4rjqMvLDX+/ON9EU/c7ogidP36ZALtOkvdh7r/tI3U8fQUUzw9FbZVo3DciXxD/z64aFzc0bA8BMmZ/uH7SM8UO/HvU8PyZPi7pwFTEo6/s7xwXO68s3xKAk8uFkdrpxv3xTPh+W1qQtzJF0j0PxzJopuKAizzoU4UcSfGdrkiFHomgW4gTGUil3rSo/R5GmpLQTERimv67wJBS3mDUB5zu4NpXivdSk13Z0R4F7rSA7FQ3KnxExdHPxCnJdAn9fqZnsBo8PQE+nafJQwGLr+fTTjRwUTtsrwDdmrYVup2n2NaYXW7XDd3dbYxlYE3Lnt1RsB503gGtD8T8DxgFmA2YA7gBcBcwDzAfMCLgAWAhYBFgMWAJYClgGWAlwDLAS8DXgG8CngN8DpgBWAl4A3Am4BVgLcAq8MrN+Z+RsKpN0JnGnTPG3SzDLrZBt0cg+4Fg26uQTfPoJtv0L1o0C0w6BYadIsMusUG3RKDbqlBt8yge8mgW27QvWzQvWLQvWrQvWbQvW7QrTDoVhp0bxh0bxp0qwy6twy61Ql8N431mJ3MMOcOb2zbG5Un2TmDLBm21EyitjQvzxPmFSNszkXmTeNZsfv8303j2bG2hW4azyHk4kH7cnHSTeMXYvE5y03juTlv65SbxvMIuRhpQy5MN43n58xn403jF3PS1mluGi8g5GKUvbg47U3jhdn1+Qw3jRdlr60z3jReTMjFQ3bhIsJN4yXR+xzxpvHSaNuK4qbxMkIuHj77XER10/ilaHyO8qbx8shtRX3T+GVCLkafTS6ycdP4lQS6m8avJtDdNH6NkIsxZ4eLbN80fj2B7qbxigS6m8YrCbkYm9tc5PCm8RsJdDeN30ygu2m8ipCLcbnHRUw3jd9KoLtpvJrufFfhc4tYuRifS1xYsT2K8HxAEe5v1UhCLiYI4YJwH6QI83j1MCEXjwjhgjDfU4T5ihpLyMVEIVwQrmuKcF5WEwi5eJSJC+oLJITjVxHGn6LsPx2/38WduJG3OlwLXBWuDb4RrhWuCNcOXwvXEl8J1xaXh2uNy8K1xyXhWuSicG1yQbhWOT9cu5wbrmXOCdc2Z4VrnbqmoGsUWZ+sl1pijb2nCXPQNQlkl1qs3LzUsoYujzzpUsvaBEaD1ybQt/s2YTBw+f02GhRE7R4Ltvi43LnK+HQCz2SftU9iHYA4kNfpWKOuFGsiTfe0rdieY5Vtqg7G1fh1aMBR94W2WfcH9ZXFkYT3tN8hDtzs8h4pYDU/7zDcaFifwBNPut1hp4mnSO1EGtxcfbGBqS82xNAXZysuNjL1xUaBcbGJqS82hfsiH9Jlfey8QOOEYnM4cXnXtJhasT1Kk7qOITPi6GCuINySYG+/dQBsYfB7K9Pg2xrDRBThUe8y9cU2pr7YxtgXTzP1xczGvOMhVvu4xsPzZ9fviFdOuGJ/lpBjRMK4VIRcK8r+0wmLPko0nSjEZbM/I8UTbpNjzaLqE5y8vYfin9zoLUyLwHtnOAGI0IyK9N/RNr/HMCnMtUmdJzvJW6w+b0+w5wRDyQWOy+0oOckpP5H6nJKfHbhO4PHA2Aj6VSgY8iT7U9xpyufx+ULekN8X8AZDyd7UoD9DeVM97pQMvxVSgYwMf7In3e8LpQTTfSE8aaugx+MNpqSlq2S3LzXNCgQ9qVbI6/e4rdSgxx8MegI+X6rHE/QFQoEU2BinhjwBK9nvT7F8bk+Km4ufHWgXS7UoRDr1wG1KWRTel7govM+8KLzPsCjMt8micNog9h//lgHKSecDmy4K85kmnQ8IFoVIx4mU/Hxo00WBi58P/4+ONj8Knzzu5KgTnu640IrtUdz1LCq/4xn9jtXGj21+5KoD82OGBfQTpmTiE8Zjxp1MffEpU198ynzkytEXC2x+5Mo1Hhba/MiVK/YXCTlyJYxLRci1ouy//5cj14+Ydtefce6uP2ZaBD5j3F1rmz9jmBSWCTly/ZgwEfw8wZ4TDCUXOC4/z4UjV0p+viDcXS8i3F1z8fOFgZ/sbqQiHbFS8vMl0/z5JUE/RDoFouyHr5j64Sth8fA1Uz98LSwevmHqh2+iKMnYObEzmEsWxzhp3CUxadzFnDTuYkgal+dS0hhpJ52bk9y3hG1RJo3LmZKSb6NIGiP1AwSoSldWyEqBDMvyp/v8aSlBd1oA8qpQsifooeTnuwS6RI8yaeTi57sznDhSfHqG4wRqN+HGC8clddVhNWFcfk/mc4DtjRG7Gbj+webVFs3LDwx+72HKE3S7BcK/fxd36kPZ1xz93SOP/W3cS530SgnaV2xeCtI+72Xw+1WbnH5GeE4KzFh93ke4CBPGjaLkgnmS/C/5OBcnyX12nyS5stf952hG86PN/dY+/8jg9wGmTO5AAu+bEvYz9MVBm8eA3rEdZPD7JwGx/xOD3z8zxf7PjLHPNQ+saHxuxsDKXLovFKudvxAmtIRcK8r+w2PoF+ckgN3GX7mTXIod8a8Mg36VkB3xrwIGfaxcvCVkAj5EyAVh/CnK/nNOFPgm20OUk63UVXFPvP1t/M0hylK1C9jfxt8doixVRwBRfzhEWcoSQNSfDlGWcgsg6i+HKEt5BRD1t0OUpXwCiPrHIcpSAQFEHXaIslRdAUQdcYiyVH0BRB11iLJUAwFE/esQZalGAoiKK+4QpXYKOOs7zyHKUk0FjKh4hyhL7RAwovI4RFmquYARldchylItBRCVzyHKUq0FEJXfIcpSbQUQdb5DlKXaCSCqgEOUpToIIKqgQ5SlOgog6gKHKEvtE7CPKuQQZalOAkZUYYcoS3UWQFQRhyhLdRFA1IUOUZZaI2CNusghylLdBIyoog5RluougKhiDlGW6imAqASHKEulCSCqeHF6G4891C8EIPwCCvUT4TfplCDsQE2u/oxkJUS2br9AWP4t4YT8O5L/QPKfSP4LyX8j+R8kH0byESQfRfK/SI5D9pyH5Hgk50FyXiTnQ3J+JJ+P5AJILojkC5BcCMmFkVwEyRci+SIkF0VyMSQnILk4kjMKHJdLgq4UIBFQGlAGkAQoCygHKA+oAKgIcAEqASoDqgCqAi4GVANUB9QA1ATUAlwCqA24FFAHcBnAAiiAG+ABeIuf+HpD8ise0Ib+wpA42nYtV7idZLDdB/ADAoAUQF1APUB9wOWABoCGehwBGgOaAJoCrgA0AzQHtAC0BLQCtAa0AbQFXAloB2gP6AC4CtARcDXgmuLHOwx/cD4Zx2n4p8+g8xt0AYMuxaCra9DVM+jqG3SXG3QNDLqGBl0jg66xQdfEoGtq0F1h0DUz6JobdC0MupYGXSuDrrVB18aga2vQXWnQtTPo2ht0HQy6qwy6jgbd1QbdNcVPfNFJ5pPdr8+NtP4kF4+9rYxj7660lI+oLT2v+IvT+bi2MU+SQsVFxnFDVSB2n92ZL+xJibUt74mX/9Ql5OJt+3Jh4Rce1YvFZ/fJL0+qn/O2rKwvYrqckIt1NuTCFzr15VMNcuZzwPQiq4Y5aStgfilWI0Iu3rEXF/7TvQiscXZ99p/+pWJNsteW+0wvKGtKyMV6u3DhP/NL2a6I3ueILwxsFm1b/oj9p5oTcrHh7HNhRWGnahGNz1ZUPquWkdtKjrL/VCtCLjaeTS68UdupWp/RZ28oGz6rNmdqy5+t/lNtCbnYdHa4CGTTTnXlaXxOCWXbZ9XO3JaVg/5T7Qm52JzbXFg5slN1ONVnlUOf1VVZ2wrmuP9UR0Iu3s09Ljwx2KmuRj67QzH5rK4pTneeF2xMx8WWXOLCiu1RhOcDinB/q9YRcrFVCBeE+yBFmMerDYRcbBPCBWG+pwjzFbWZkIv3hHBBuK4pwnlZbSXkYjsTF9S1ZMLxqwjjT1H233nhdlzhn7gekbVegesZuN6B6yG4XoLrKbjegusxuF6D6zm43oPrQbhehOtJuN6E61G4XoXrWbjehethuF6G62m43obrcbheh+t5uN6H64G4XojribjeeDGSqyG5OpJrILkmkmsh+RIk10bypUiug+TLkGwhWSHZjWQPkr1ILonkUkhORHJpJJdBchKSyyK5HJLLI7kCkisi2YXkSkiujOQqSK4aljMnlE7w+7WAzoDrAF0AXQHXA7oBbgB0B/QA9ASkAtIA6YAgIAMQAvQC9Ab0AfQF9AP0BwwADATcCLgJcDNgEOAWwK2AwYAhgNsAtwPuANwJuAtwN+AewL2AoYBhgPsA9wMeAAwvftyHzLHdKPzTiunxWLr+r5G13VjXgxHFaeezzLqqbtcVx3cnIlCU907Eg2D/SMAowEOAhwGjAWMAYwHjAOMBEwCPACYCHgVMAjwGeBzwBOBJwFOAyYCnAVMAzwCmAqYBpgOeBTwHmAGYCXi++PEOw/35YPFTa9cjDbpRBt1DBt3DBt1og26MQTfWoBtn0I036CYYdI8YdBMNukcNukkG3WMG3eMG3RMG3ZMG3VMG3WSD7mmDbopB94xBN9Wgm2bQTTfonjXonjPoZhh0Mw2654vz34l4sDjdnYiRRG3peWVUcTofv2ks407EQ7H7/N+diIdjbQvdiRhNyMUu+3Jx0p2IMbH4nOVOxNict3XKnYhxhFx8a0MuTHcixufMZ+OdiAk5aes0dyIeIeTiO3txcdo7EROz6/MZ7kQ8mr22zngnYhIhF7vtwkWEOxGPRe9zxDsRj0fbVhR3Ip4g5OL7s89FVHcinozG5yjvRDwVua2o70RMJuTih7PJRTbuRDxdnO5OxJTidHciniHkYs/Z4SLbdyKmFqe7EzGtON2diOmEXOzNbS5yeCfi2eJ0dyKeK053J2IGIRf7co+LmO5EzCxOdyfiebqzQ7W3ER0X+3OJCyu2RxGeDyjC/a3C+7OYX0ouhAvCfZAizOPV94RcHBDCBWG+pwjzFbWXkIuDQrggXNcU4bysfiTk4icmLqjvRBCOX0UYf4qy/7jqhbXieOuFsyAXmg2YA3gBMBcwDzAf8CJgAWAhYBFgMWAJYClgGeAlwHLAy4BXAK8CXgO8DlgBWAl4A/AmYBXgLcBqwBrAWsDbhnrhLENdZ7ZBN8ege8Ggm2vQzTPo5ht0Lxp0Cwy6hQbdIoNusUG3xKBbatAtM+heMuiWG3QvG3SvGHSvGnSvGXSvG3QrDLqVBt0bBt2bBt0qg+4tg261QbfGoFtr0L1d/ES9kGvcZm031jk/rom9a3OZds4irJPOJqyTziHcO59ncy4y66QvENZJ5xLWSecRchFvXy5OqpPOJ6yTvkhYJ11AyEUeG3JhqpMuJKyTLiKsky4m5CKvvbg4bZ10CWGddClhnXQZIRf57MJFhDrpS4R10uWEddKXCbnIf/a5iKpO+gphnfRVwjrpa4RcnH82uchGnfR1wjrpCsI66UpCLgqcHS6yXSd9g7BO+iZhnXQVIRcFc5uLHNZJ3yKsk64mrJOuIeTigtzjIqY66VrCOunbhHVSfG4RKxeFcokLK7ZHEZ4PKML9rcpDyEVhIVwQ7oMUYR6v8hNyUUQIF4T5niLMV1RBQi4uFMIF4bqmCOdlVZiQi4uYuKCukxKOX0UYf4qy/+LD7VDXW/zMn6tcB7nQO4D1gA2AjYBNgM2AdwFbAFsB2wDvAbYDdgDeB3wA+BDwEWAn4GPAJ4BPAZ8BPgd8AfgS8BXga8A3gF2AbwHfGeqk6wz1rHcMuvUG3QaDbqNBt8mg22zQvWvQbTHothp02wy69wy67QbdDoPufYPuA4PuQ4PuI4Nup0H3sUH3iUH3qUH3mUH3uUH3hUH3pUH3lUH3tUH3jUG3y6D71qD7rjhfnVSPWT12qeukLiF10nWEddJ3COuk6wn3zpWE1Ek3ENZJNxLWSTcRclFZSJ10M2Gd9F3COukWQi6qCKmTbiWsk24jrJO+R8hFVSF10u2EddIdhHXS9wm5uFhInfQDwjrph4R10o8IuagmpE66k7BO+jFhnfQTQi6qC6mTfkpYJ/2MsE76OSEXNc4OF9muk35BWCf9krBO+hUhFzWF1Em/JqyTfkNYJ91FyEUtIXXSbwnrpN8R1kldhOfelwipQRCeDyjC/a2qQshFbSFcEO6DFGEer6oRcnGpEC4I8z1FmK+omoRc1BHCBeG6pgjnZVWbkIvLhNRJCcevIow/Rdl/8eF2qOstHuY66W7Ihb4H/ADYA9gL2AfYD/gRcABwEPAT4GfAL4BfAYcAvwF+B/wB+BPwF+BvwD+Aw4AjgKOAf3U9tAT0DSAekAeQF5CvRNwpddLdhnrW9wbdDwbdHoNur0G3z6Dbb9D9aNAdMOgOGnQ/GXQ/G3S/GHS/GnSHDLrfDLrfDbo/DLo/Dbq/DLq/Dbp/DLrDBt0Rg+6oQfevQafjJavuPIMu3qDLY9DlNejyleCtk3oY6qSNhNRJdxPWSb8nrJP+QLh3biykTrqHsE66l7BOuo+QiyZC6qT7CeukPxLWSQ8QctFUSJ30IGGd9CfCOunPhFxcIaRO+gthnfRXwjrpIUIumgmpk/5GWCf9nbBO+gchF82F1En/JKyT/kVYJ/2bkIsWQuqk/xDWSQ8T1kmPEHLR8uxwke066VHCOum/hHVSvW+l4qKVkDrpeSXo6qTxJejqpHkIuWgtpE6atwRdnTRfCbrzkEaE595thNQgCM8HFOH+VjUl5KKtEC4I90GKMI9XzQm5uFIIF4T5niLMV1QrQi7aCeGCcF1ThPOyakvIRXshdVLC8asI409R9p+uhxRGfad/n1sM6kJheR6S5xQL13jQ3z6D/n1qWM4Pecr5upaja4rh9uPjTn2oazwFSvDEVRytnW7cFwVLHP95Qbj2+l8xTP/DkSw6/UfnZTGKOugLECTpxwtFoVBBwoT/AiZy44n7j9LnQqgtBQejcFCo/y4QtJQ3CEd9bncwzWulW6np7owUL+y1vW6vJz2YDocfgVQVskKp6SmhwHG79EAsFHdq/MTF0Q/EQiVoJ6jMp3AJRoMLl6BvtwhhMHD5XaTEiQ4matdoK8UEUKQEfbsXEgdr5mSt28UrJSVv+jbDBQy8cdmrMwLOW1MXQftFAcUACYDigBKAkoBSgERAaUAZQBKgLKAcoDygAqAiwAWoBKgMqAKoCrgYUA1QHVADUBNQC3AJoDbgUkAdw62piwy3W4oadMUMugSDrrhBV8KgK2nQlTLoEg260gZdGYMuyaAra9CVM+jKG3QVDLqKBp3LoKtk0FU26KoYdFUNuosNumoGXXWDroZBV9Ogq2XQXWLQ1TboLjXo6pTgvTWVn2HO7WmXymukbz4iS4YtVZSoLc1LMcK8ItXmXGTemkqI3ef/bk0Vj7UtdGuqBCEXafbl4qRbUyVj8TnLralSOW/rlFtTiYRcpNuQC9OtqdI589l4a6pMTto6za2pJEIugvbi4rS3pspm1+cz3Joql722znhrqjwhFxl24SLCrakK0fsc8dZUxWjbiuLWlIuQi9DZ5yKqW1OVovE5yltTlSO3FfWtqSqEXPQ6m1xk49ZU1RJ0t6YuLkF3a6oaIRe9zw4X2b41Vb0E3a2pGiXobk3VJOSiT25zkcNbU7UIb01dQnhrqjYhF31zj4uYbk1dSnhrqg7hramehFXwfkJuJBCeDyjC/a1KJ+SivxAuCPdBijCPVyFCLgYI4YIw31OE+YrqQ8jFQCFcEK5rinBeVv0JubiRiQvqCySE41cRxp+i7D8dvwcArnB7dcK1wNrh2mCtcK2wRrh2WC1cS6wari1WDtcaXeHaY4VwLbJcuDaZFK5Vlg7XLkuFa5klwrXNhHCtU9cUdI0i6xOfhdNYY+98whz0shJkl1qs3LzUchldHnnSpRarBKPBVgn6dhVhMHD5rdCgIGr3WLDFx+XOVcbzS/BM9ln7JNYBiAPZrWONulKsiTS9B96K7TlW2abqYFyNd6MBR90X2mbdH/GMfRGrjR7iwM0u75ECVvPjYbjR4C3BE0+63WGniadI7UQa3Fx9kczUF8kx9MXZigsfU1/4BMaFn6kv/OG+yId0WR87L9A4oQiEE5cU02JqxfYoTaqbITPi6GCuIKxbwt5+6wCoy+B3PabBVy+GiSjCo1KY+qI+U1/UZ+yL85n6YlgT3vEQq31c4+G+s+t3xCsnXLF/P7HfmQ/1MSJhXCpCrhVl/+mERR8lmk4U4rLZnxG/CAU9HGsWVZ/g5O1yFP/kRtdlWgQuP8MJQIRmVKT/jrb5coZJ4UGb1Hmyk7zF6nODEvacYCi5wHHZACUnOeUnUp9T8tMQ1wk8HhgbQb8KBUOeZH+KO035PD5fyBvy+wLeYCjZmxr0ZyhvqsedkuG3QiqQkeFP9qT7faGUYLovhCdtFfR4vMGUtHSV7PalplmBoCfVCnn9HreVGvT4g0FPwOdL9XiCvkAokAIb49SQJ2Al+/0pls/tSXFz8dMQ7WKpFoVIpx64TSmLQiOJi0Ij5kWhEcOiMMomi8Jpg9h//FsGKCedxjZdFEYxTTqNCRaFSMeJlPw0semiwMVPk/+jo82m4ZPHKzjqhKc7LrRiexR3PYvK73hGv2P+nmWbH7nqwGzGsIA2Z0ommjMeM17B1BctmPqiBfORK0dfPGzzI1eu8TDa5keuXLE/RsiRK2FcKkKuFWX//b8cuTZl2l235NxdN2NaBFoy7q61zS0ZJoUJQo5cmxEmgq1K2HOCoeQCx2WrXDhypeSnNeHuegzh7pqLn9YGfrK7kYp0xErJTxum+bMNQT9EOgWi7Ie2TP3QVlg8XMnUD1cKi4d2TP3QLoqSjJ0TO4O5ZHGMk8b2EpPG9sxJY3uGpHFiLiWNkXbSuTnJdSBsizJpnMiUlHSIImmM1A9Kfz5eWSErBTIsy5/u86elBN1pAcirQsmeoIeSn6tK0CV6lEkjFz9XneHEkeLTMxwnUB0JN144LrObFERquw5hXF5N5nOApeqgP3XVkYHra2xebdG8XMPgdyemPEG3WyD8+4G4Ux/Kvubo7x557G/jtdRJr5SgnWTzUpD2+VoGvx+zyelnhOekwIzV586EizBh3ChKLpgnyf+Sj3Nxkuxs90mSK3u97hzNaLrY3G/tcxcGv7syZXJdS/C+KeE6hr643uYxoHds1zP43U1A7Hdj8PsGpti/gTH2ueaBJ5ucmzHwFFNynIfYzu6ECS0h14qy//AY6u6cBPDbyJ3kUuyIezAM+ilCdsQ9BAz6WLl4RsgE3JOQC8L4U5T955wo8E22PSknW6mr4p54+9uY6hBlqdoF7G9jmkMUnAkIICrdIcpSlgCigg5RlnILICrDIcpSXgFEhRyiLOUTQFQvhyhLBQQQ1dshylJ1BRDVxyHKUvUFENXXIcpSDQQQ1c8hylKNBBDV3yHKUjsFnPUNcIiyVFMBI2qgQ5SldggYUTc6RFmquYARdZNDlKVaCiDqZocoS7UWQNQghyhLtRVA1C0OUZZqJ4CoWx2iLNVBAFGDHaIs1VEAUUMcoiy1T8A+6jaHKEt1EjCibneIslRnAUTd4RBlqS4CiLrTIcpSawSsUXc5RFmqm4ARdbdDlKW6CyDqHocoS/UUQNS9DlGWShNA1FCur/ikfiEA4RdQqG6E36QzjPhD8vozkpUQ2cPCH/TVciqS05CcjuQgkjOQHEJyLyT3RnIfJPdFcj8k90fyACQPRPKNSL4JyTcjeRCSb0HyrUgejOQhSL4Nybcj+Q4k34nku5B8N5LvQfK9SB6K+7DAcfk+0N0PeAAwHDAC8CBgJGAU4CHAw4DRgDGAsYBxgPGACYBHABMBjwImAR4DPA54AvAk4CnAZMDTgCmAZwBTAdMA09FnfKej2Hi++Ak7ZyJ5BpKfQ/KzSJ6O5GlInorkZ5A8BclPI3kykp9C8pNIfgLJjyP5MSRPQvKjSJ6I5EeQPAHJ45E8DsljkTwGyaOR/DCSH0LyKCSPRPKDxU98eUWj8E8rxsdpz2nPac9pz2nPac9pz2lPVnvuFNr2UtNp21OK2L7UzFzwbZQXrkXyGiSvRvJbSF6F5DeR/AaSVyJ5BZJfR/JrSH4Vya8g+WUkL0fyS0hehuSlSF6C5MVIXoTkhUhegOQXkTwfyfOQPBfJLyB5DpJnI3kWkr9D8rdI3oXkb5D8NZK/QvKXSP4CyZ8j+TMkf4rkT5D8MZJ3IvkjJH+I5A+Q/D6SdyB5O5LfQ/I2JG9F8hYkv4vkzUjehOSNSN6A5PVIfgfJ65CcD+2T8yI5D5LjkXwekuOQ/C9q8yiSjyD5MJL/QfLfSP4LyX8i+Q8k/47k35B8CMm/IvkXJP+M5J+QfBDJB5D8I5L3I3kfkvcieQ+Sf0Dy90jejffDqA8nIvlRJE9C8mNIfhzJTyD5SSQ/heTJSH4ayVOQ/AySpyJ5GpKnI/k+JN+P5AeQPBzJI5D8IJJHInkUkh9C8sNIHo3kMUgei+RxSB6P5AlheVHc8edZ+P05wAzATMDzgFmA2YA5gBcAcwHzAPMBLwIWABYCFgEWA5YAlgKWAV4CLAe8DHgF8CrgNcDrgBWAlYA3AG8CVgHeAqwGrAGsBbwNWAd4B7AesAGwEbAJsBnwLmALYCtgG+A9wHbADsD7gA8AHwI+AuwEfAz4BPAp4DPA54AvAF8CvgJ8DfgGsAvwLeA7wG7A94AfAHsAewH7APsBPwIOAA4CfgL8DPgF8CvgEOA3wO+APwB/Av4C/A34B3AYcARwFPAvIK4kcAKIB+QB5AXkA+QHnA8oACgIuABQCFAYUARwIeAiQFFAMUACoDigBKAkoBQgEVAaUAaQBCgLKAcoD6gAqAhwASoBKgOqAKoCLgZUA1QH1ADUBNQCXAKoDbgUUAdwGcACKIAb4AF4AckAH8APCABSAHUB9QD1AZcDGgAaAhoBGgOaAJoCrgA0AzQHtAC0BLQCtAa0AbQFXAloB2gP6FDy+PvEMr9UMvOJD/9sFP5pxfaoiUVhbBWla+8FaGtu0RP2ErVrxaM+uKrk8Z8dS6K+OY+4Y/Q3NVMZz2XfVSVPbTfm9+GUpC2aZAawbncYI1cdGfriGqa+uIaxLzIHIHVfTG/CU42k/rLLTnScqQsb07VF3X/U/HLNJ8+dXb/TI719nWvumNHE/utHJwa/Z+bSPGHF9ijCuFSEXCvK/jvTC2njstmfkcYRbpM6Vq8iXofjws+1UhJInDxgo7Npc8QX0mqbr2WYFOYwTQrZ/dbyaBZBKp87l7TnZEXJBY7LziUjv5A2UnuR+pySn+sQP8rjgbER9KtQMORJ9qe405TP4/OFvCG/L+ANhpK9qUF/hvKmetwpGX4rpAIZGf5kT7rfF0oJpvtCeAGI9YW0XPxcF+YnczGgnu+mFoPTviInuKfywRVupwvY3xVwPaAb4AZAd0APQE9AKiANkA4IAjIAIUAvQG9AH0BfQD9Af8AAwEDAjYCbADcDBgFuAdwKGAwYArgNcHvJ4x2G+1Pb89+pevhnV4PueoOum0F3g0HX3aDrYdD1NOhSDbo0gy7doAsadBkGXcig62XQ9Tbo+hh0fQ26fgZdf4NugEE30KC70aC7yaC72aAbZNDdYtDdatANNuiGGHS3GXS3h3X4ye7LviO+Rq5k7G1lhPRjqa5Ebel55fqSdD7OzaU8JOc+H2tadYvdZ3dmYn5DrG15TyT53Qm5mGdfLiy8sekRi8/ukzdJPXPelpV1w5VKyMV8G3IBqdUpm8y0nPkcMG1Y03PSVsC8+Q0ScvGivbjwn27Dn5Fdn/2nPzwIZa8t95kOInoRcrHALlz4z3z40jt6nyMeiPaJti1/xP5TfQm5WHj2ubCisFP1i8ZnKyqfVf/IbSVH2X9qACEXi84mF96o7VQDz+izN5QNn9WNZ2rLn63+UzcRcrH47HARyKad6ubT+JwSyrbPapC5LSsH/aduIeRiSW5zYeXITnXrqT6rHPqsBmdtK5jj/lNDCLlYmntceGKwU92GfHaHYvJZ3V6S7hyydGM6LpbZ5Pw/wqMIzwcU4f5W4f1ZrFy8JIQLwn2QIszj1UJCLpYL4YIw31OE+YpaQsjFy0K4IFzXFOG8rF4i5OIVJi6oL5EQjl9FGH+Ksv+46oXPMNcL74Bc6E7AXYC7AfcA7gUM1XVQwH2A+wEPAIYDRgAeBIwEjAI8BHgYMBowBjAWMA4wHjAB8AhgIuBRwCTAY4DHAU8AnjTUC+8w1HXuNOjuMujuNujuMejuNeiGGnTDDLr7DLr7DboHDLrhBt0Ig+5Bg26kQTfKoHvIoHvYoBtt0I0x6MYadOMMuvEG3QSD7hGDbqJB96hBN8mge8yge9yge8Kge7Ikf73wDsJ64Z2E9cK7CPeQ64XUC+8mrBfeQ1gvvJeQiw1C6oVDCeuFwwjrhfcRcrFRSL3wfsJ64QOE9cLhhFxsElIvHEFYL3yQsF44kpCLzULqhaMI64UPEdYLHybk4l0h9cLRhPXCMYT1wrGEXGwRUi8cR1gvHE9YL5xAyMXWs8NFtuuFjxDWCycS1gsfJeRim5B64STCeuFjhPXCxwm5eE9IvfAJwnrhk4T9l9iYrq3tQs7iCc8HFOH+Vm0kPIvfIYQLwn2QIszj1buEXLwvhAvCfE8R5itqGyEXHwjhgnBdU4TzstpByMWHQuqFhONXEcafouw/rnphjTjeeuFTkAtNBjwNmAJ4BjAVMA0wHfAs4DnADMBMwPOAWYDZgDmAFwBzAfMA8wEvAhYAFgIWARYDlgCWApYBXgIsB7wMeMVQL3zKUNeZbNA9bdBNMeieMeimGnTTDLrpBt2zBt1zBt0Mg26mQfe8QTfLoJtt0M0x6F4w6OYadPMMuvkG3YsG3QKDbqFBt8igW2zQLTHolhp0ywy6lwy65QbdywbdKyVP1Au5xm3WdmOd83fbvDaXaedThHXSyYR10qcJ937fC6mTTiGskz5DWCedSsjFD0LqpNMI66TTCeukzxJysUdInfQ5wjrpDMI66UxCLvYKqZM+T1gnnUVYJ51NyMU+IXXSOYR10hcI66RzCbnYL6ROOo+wTjqfsE76IiEXPwqpky4grJMuJKyTLiLk4sDZ4SLbddLFhHXSJYR10qWEXBwUUiddRlgnfYmwTrqckIufhNRJXyask75Sku48ZDfhuffPQmoQhOcDinB/q/YQcvGLEC4I90GKMI9X+wm5+FUIF4T5niLMV9RBQi4OCeGCcF1ThPOy+oWQi9+E1EkJx68ijD9F3X/UtRZdZ7ms6AleqGyND7dDbe9c5s+Avgp522uA1wErACsBbwDeBKwCvAVYDVgDWAt4G7AO8A5gPWADYCNgE2Az4F3AFsBWwDbAe4DtgB2A9wEfAD4EfATYaajpvmqovb1m0L1u0K0w6FYadG8YdG8adKsMurcMutUG3RqDbq1B97ZBt86ge8egW2/QbTDoNhp0mwy6zQbduwbdFoNuq0G3zaB7z6DbbtDtMOjeN+g+MOg+NOg+Muh2luSr6eoxq8cudU03f1MZNd1XCWu6rxHWdF8n3Oefb3MuMmu6KwhruisJa7pvEHJRwL5cnFTTfZOwpruKsKb7FiEXBW3Ihammu5qwpruGsKa7lpCLC+zFxWlrum8T1nTXEdZ03yHkopBduIhQ011PWNPdQFjT3UjIReGzz0VUNd1NhDXdzYQ13XcJuShyNrnIRk13C2FNdythTXcbIRcXnh0usl3TfY+wprudsKa7g5CLi3KbixzWdN8nrOl+QFjT/ZCQi6K5x0VMNd2PCGu6OwlruvjcIlYuiuUSF1ZsjyI8H1CE+1tVkJCLBCFcEO6DFGEerwoTclFcCBeE+Z4izFfURYRclBDCBeG6pgjnZZVAyEVJJi6oa7qE41cRxp+i7D8dv4cArnB7O8O1wA/DtcH3w7XC7eHa4bZwLXFLuLa4OVxr3BiuPa4P1yLXhWuTa8O1ytXh2uWqcC3zjXBtc0W41qlrCrpGkfWJz8JprLE3rxhdWx+jfEzBuRWc4+i/CwQt5Q3CSYzbHUzzWulWaro7I8ULWyGv2+tJD6bD3jSQqkJWKDU9JRQ43pZ+8XWhuBP1KfxQ18I+pssjT3o59SclGQ3WjVO3+ynhhoTL70/RoCBq91iwxceZ37JO7QMecFaMj8FcsgGIA/kzHWvUlWJNpOlTxVZsD9tb2z9DA466L7TNuj/iGfsiVhs/L0kbuNnlPVLAan4+L0nPzRcleeJJtzvsNPEUqZ1Ig5urL75k6osvY+iLsxUXXzH1xVcC4+Jrpr74OtwX+ZAu62PnBRonFN+EE5ddpsXUiu1RmtTPGDIjjg7mCsJvS9rbbx0A3zL4/R3T4PsuhokowqN2MfXFbqa+2M3YF3rC4eiLak15x0Os9nGNh+pn1++IV064Yr+GkGNEwrhUhFwryv7TCYs+SjSdKMRlsz8jxRNuk2PNouoTnLx9j+Kf3OhvmRaB789wAhChGRXpv6Nt/p5hUqhtkzpPdpK3mL8/q6Q9JxhKLnBc/oCSk5zyE6nPKfnZg+sEHg+MjaBfhYIhT7I/xZ2mfB6fL+QN+X0BbzCU7E0N+jOUN9XjTsnwWyEVyMjwJ3vS/b5QSjDdF8KTdqzvS+biZw/axVItCpFOPXCbUhaFvRIXhb3Mi8JehkWhjk0WhdMGsf/YJ6tClJPOPpsuCnWYJp19BItCpONESn7223RR4OJn///R0eaP4ZPHAxx1wtMdF1qxPYq7nkXldzyj3zF/q5fNj1x1YB5kWEB/YkomfmI8ZjzA1Bc/M/XFz8xHrhx9Ydn8yJVrPCibH7lyxb5byJErYVwqQq6V2zlyzfocW7Oo+gQnlb9w7q4PMi0CvzDurrXNvzBMCj4hR64HCRPBX0vac4LxMe3efs2FI1dKfg4R7q7dhLtrLn4OGfjJ7kYq0hErJT+/Mc2fvxH0Q6RTIMp++J2pH34XFg9/MPXDH8Li4U+mfvgzipKMnRM7g7lkcYyTxr8kJo1/MSeNfzEkjQF7fPdOem5Ocn8TtkWZNAaYkpK/o0gaI/UDBKhKV1bISoEMy/Kn+/xpKUF3WgDyqlCyJ+ih5OefknSJHmXSyMXPP2c4caT49AzHCdRhwo0XjkvqqsNOwrg8QuZzgO07nA8zcH3U5tUWzctRBr//ZcoTdLsFwr8fijv1oexrjv7ukcf+NsaVIrZRStDWtXkpSPusyaFut56QLxbBgRmrz+fRBbkijBtFyQXzJPlf8nEuTpLn2X2S5Mpe40udmxlNHpv7rX3Ow7A45C3Fk8npdjnflBDP0Bf5bB4DeseWj8Hv/AJiPz+D3+czxf75jLHPNQ80aHpuxkDDXLovFPPbKggTWkKuVUOmk78CpZyTAG4bC3InuRQ74oIMg76JkB1xQQGDPlYumgqZgC8g5IIw/lRT50RBxGR7AeVkK3VV3BNvfxsLOURZqnYB+9tY2CHKUnUEEFXEIcpSlgCiLnSIspRbAFEXOURZyiuAqKIOUZbyCSCqmEOUpQICiEpwiLJUXQFEFXeIslR9AUSVcIiC41EBRJV0iLJUIwFElXKIstROAWd9iQ5RUEEQMKJKO0RZaoeAEVXGIcpSzQWMqCSHKEu1FEBUWYcoS7UWQFQ5hyhLtRVAVHmHKEu1E0BUBYcoS3UQQFRFhyhLdRRAlMshylL7BOyjKjlEWaqTgBFV2SHKUp0FEFXFIcpSXQQQVdUhylJrBKxRFztEWaqbgBFVzSHKUt0FEFXdIcpSPQUQVcMhylJpAoiqSUmUNi4x7sTn/PTvGdAJR8Nyx5In5KuQvCT+uJz5/6sFRl0CqA24tNQJfeZD/bKBaXRvGVK1CL+lp04p+gDi6L/phP13CWH/XUb8BQZZY1vzkxnDlyG5NpIvLXVybFvwuwK4AZ5SJ3+XL/lnKqB9/WUgcbTtWq5wO15oPxngA/gBAUAKoC6gHqA+4HJAA0BDzQWgMaAJoCngCkAzQHNAC0BLQCtAa0AbQFvAlYB2gPaADoCrAB0BV5c63mH4Q/He8IfisS7ZoPMZdH6DLmDQpRh0dQ26egZdfYPucoOugUHX0KBrZNA1NuiaGHRNDborDLpmBl1zg66FQdfSoGtl0LU26NoYdG0NuisNunYGXXuDroNBd5VB19Ggu7oU7xf4WAyf62/elGc9yUtsp5dgDcg49j5OSyUTtaV58RGuTS1szkXGcUOVP3af3ZkvIQrE2pb3xAuNUgi5aGlfLiz8Eqe6sfjsPvmFUPVy3paV9eVS9Qm5aGVDLnyhU1+odXnOfA6YXs7VICdtBcwv+mpIyEVre3HhP93LzRpl12f/6V+U1jh7bbnP9NK1JoRctLELF/4zv2iuafQ+R3wJ4hXRtuWP2H+qGSEXbc8+F1YUdqrm0fhsReWzahG5reQo+0+1JOTiyrPJhTdqO1WrM/rsDWXDZ9X6TG35s9V/qg0hF+3ODheBbNqp2p7G55RQtn1WV5rbsnLQf6odIRftc5sLK0d2qvan+qxy6LPqkLWtYI77T11FyEWH3OPCE4OdqiPy2R2KyWd1Nd3Zq2pO+H16Vwn5bkPC8wFFuL9VrQi56CiEC8J9kCLM41VbQi6uFsIFYb6nCPMV1Z6Qi2uEcEG4rinCeVl1JOSiUy59/6oV26MIx68ijD8lpf8IX3Ch8hPmjtfQ2fXfe1KHhX/q328veaK2dRuShyB5MJJvRfItSB6E5JuRfBOSb0TyQCQPQHJ/JPdDcl8k90FybyT3QnIIyRlIDiI5HclpSE5Fck8k90BydyTfgORuSL4eyV2R3AXJTyL5CSQ/juTHkDwJyY8ieSKSH0HyBCSPR/I4JI9F8hgkj0byw0h+CMmjkDwSyQ8ieQSShyP5ASTfj+T7kDwMyUORfC+S70Hy3Ui+C8l3IvkOJL+C5JeRvBzJLyF5GZKXInkJkhcjeRGSFyJ5AZJfRPJ8JM9D8lwkv4DkOUiejeRZSH4eyTORPAPJzyH5WSRPR/I0JE9F8jNInoLkp5E8GclPIfkaVFsvhOTCSC6C5AuRfBGSiyK5GJITkFwcySWQXBLJpZCciOTSSC6D5CQkl0VyOSSXR3IFJFdEsgvJlZBcGclVkFwVyRcjuRqSqyO5BpJrIhnfA8H3RPA9EnzPBN9DwfdU8D0WfM8F34PB92TwPRp8zwbfw8H3dPA9HnzP52ok43sa+B4HvueB74HgeyL4Hgm+Z4LvoeB7KvgeC77ngu/B4Hsy+B5N5j2bCXHHn07w+7WAzoDrAF0AXQHXA7oBbgB0B/QA9ASkAtIA6YAgIAMQAvQC9Ab0AfQF9AP0BwwADATcCLgJcDNgEOAWwK2AwYAhgNsAtwPuANwJuAtwN+AewL2AoYBhgPsA9wMeAAwHjAA8CBgJGAV4CPAwYDRgDGAsYBxgPGAC4BHARMCjgEmAxwCPA54APAl4CjAZ8DRgCuAZwFTANMB0wLOA5wAzADMBzwNmAWYD5gBeAMwFzAPMB7wIWABYCFgEWAxYAlgKWAZ4CbAc8DLgFcCrgNcArwNWAFYC3gC8CVgFeAuwGrAGsBbwNmAd4B3AesAGwEbAJsBmwLuALYCtgG2A9wDbATsA7wM+AHwI+AiwE/Ax4BPAp4DPAJ8DvgB8CfgK8DXgG8AuwLeljsfQeeFYahT+acX0pFj6DpJG1nZjzWe/K0Wbz2bex9LtuuI4+uL4fawZxeL+e6js57r3qe8zc9773A19/T3gB8AewF7APsB+wI+AA4CDgJ8APwN+AfwKOAT4DfA74A/An4C/AH8D/gEcBhwBHAX8q+M6EfoGEA/IA8gLyJd4vMMw99qezLk1U/e9QfeDQbfHoNtr0O0z6PYbdD8adAcMuoMG3U8G3c8G3S8G3a8G3SGD7jeD7neD7g+D7k+D7i+D7m+D7h+D7rBBd8SgO2rQ/WvQ6XjJqjvPoIs36PIYdHkNunxhXVwczzyjxy71nBvKvfpTTHbuLkV37/N7orY0Lz+UovOxl5B7n3ti9/m/e597Y20L3fvcR8hFbyH3PvfH4nOWe58/5rytU+59HiDkoo+Qe58Hc+az8d7nTzlp6zT3Pn8m5KKvkHufv2TX5zPc+/w1e22d8d7nIUIu+gm59/lb9D5HvPf5e7RtRXHv8w9CLvoLuff5ZzQ+R3nv86/IbUV97/NvQi4GCLn3+U8punufh0vR3fs8QsjFQCH3Po+Worv3+W8punufet9KxcWNQu59npdId+8zPpHu3mceQi5uEnLvM28i3b3PfIl05yEhwns8Nwu5U0V4PqAI97eqDyEXg4RwQbgPUoR5vOpPyMUtQrggzPcUYb6ibiTk4lYhXBCua4pwXlaDCLkYLOTeIuH4VYTxpyj7T8fvX3En6rv5wrXAPOHaoM4ldQ79b7h2eCRcS/wnXFv8K1xr/CNce/wtXIv8NVyb/DlcqzwYrl3+GK5l7gvXNveEa526prC7VNwpT3wWTmONPfx9SrG2lR/lYwrOreAcR/9dIGgpbxBOYtzuYJrXSrdS090ZKV7YCnndXk96MB32poFUFbJCqekpocDxtvJBG4XiTtSn8ENdC8tPl0da2N7zExkN1o1Tt1uAcEPC5XeBxBMdTNTusWCLjzsxuDiDjfALzCyDuWQDEAdyQR1r1JViTaTp1o8V23Ossk3VwbgaXxANOOq+0Dbr/ohn7ItYbbwgkTZws8t7pIDV/FyQSM9NoUSeeNLtDjtNPEVqJ9Lg5uqLwkx9UTiGvjhbcVGEqS+KCIyLC5n64sJwX+RDuqyPnRdonFBcFE5cipoWUyu2R2lSCzJkRhwdzBWExRLt7bcOgGIMficwDb6EGCaiCI8qytQXxZn6ojhjX+gJh6MvHmzKOx5itY9rPIw8u35HvHLCFfujhBwjEsalIuRaUfafTljw122bnmj/WxFL+ujhWLOo+gQnbyVQ/JMbXYxpEShxhhOACM2oSP8dbXMJhklhjE3qPNlJ3mL1uWSiPScYSi5wXJZEyUlO+YnU55T8lMJ1Ao8HxkbQr0LBkCfZn+JOUz6Pzxfyhvy+gDcYSvamBv0Zypvqcadk+K2QCmRk+JM96X5fKCWY7gvhSVsFPR5vMCUtXSW7falpViDoSbVCXr/HbaUGPf5g0BPw+VI9nqAvEAqkwMY4NeQJWMl+f4rlc3tS3Fz8lEK7WKpFIdKpB25TyqKQKHFRSGReFBIZFoVxNlkUThvE/mOfrApRTjqlbboojGOadEoTLAqRjhMp+Slj00WBi58y/0dHm0nhk8eyHHXC0x0XWrE9irueReV3PKPfsdpYzuZHrjowyzEsoOWZkonyjMeMZZn6ogJTX1RgPnLl6IsJNj9y5RoPj9j8yJUr9icKOXIljEtFyLWa6By5Zn2OrVlUfYKTyoqcu+tyTItARcbdtba5IsOk8LiQI9dyhImgK9GeE8zjTLs3Vy4cuVLyU4lwdz2RcHfNxU8lAz/Z3UhFOmKl5Kcy0/xZmaAfIp0CUfZDFaZ+qCIsHqoy9UNVYfFwMVM/XBxFScbOiZ3BXLI4xkljNYlJYzXmpLEaQ9L4pD2+eyc9Nye56oRtUSaNTzIlJdWjSBoj9QMEqEpXVshKgQzL8qf7/GkpQXdaAPKqULIn6KHkp0YiXaJHmTRy8VPjDCeOFJ+e4TiBqkm48cJxSV11yEcYl7XIfA6wVB30p65qMnB9ic2rLZqXSxj8rs2UJ+h2C4R//yvu1Ieyrzn6u0ce+9t4KXXSKyVoJ9u8FKR9vpTB76eFfLHIpYQLUh3CRZgwbhQlF8yT5H/Jx7k4Sdax+yTJlb1edo5mNJbN/dY+Wwx+K6ZMTiXyvinhMoa+cNs8BvSOzc3gt0dA7HsY/PYyxb6XMfa55oGpTc/NGJiWS/eFYrUzmTChJeRaTWM6+Ut2TgLYbfRxJ7kUO2Ifw6B/TsiO2Cdg0MfKxQwhE7CfkAvC+FMznBMFEZOtn3Kylboq7om3v40BhyhL1S5gfxtTHKLgoFIAUXUdoixlCSCqnkOUpdwCiKrvEGUprwCiLneIgm2sAKIaOERB6iuAqIYOUZBRCSCqkUMULNQCiGrsEAXzvwCimjhEwbQigKimDlGW2ingrO8KhyiIVgEjqplDlKV2CBhRzR2ioBMEjKgWDlGWaimAqJYOUZZqLYCoVg5RlmorgKjWDlGWaieAqDYOUZbqIICotg5RluoogKgrHaIstU/APqqdQ5SlOgkYUe0doizVWQBRHRyiLNVFAFFXOURZao2ANaqjQ5SlugkYUVc7RFmquwCirnGIslRPAUR1coiyVJoAoq619xd5pFn6yww0qD/j2Jnpw+26XVfcyQ/1yxEIv4xDeQi/Veg64j499nnR+BOBrz/HVsCRHfkcla9LPCEHkJyC5LpIrofk+ki+HMkNkNwQyY2Q3BjJTZDcFMlXILkZkpsjuQWSWyK5FZJbI7kNktsi+Uokt0NyeyR3QPJVSO6I5KuRfA2SOyH5WiT3Sjgh90ZyHyT3RXI/JPdH8gAkD0TyjUi+Cck3I3kQkm9B8q1IHozkIUi+Dcm3I/kOJN+J5LuQfDeS70HyvUgeiuRhSL4Pyfcj+QEkD0fyCCQ/iOSRSB6F5IeQ/DCSRyN5DJLHInkckscjeQKSH0HyRCQ/iuRJSH4MyY8juVNxFFdI7ozk65DcBcldkXw9krsh+QYkd0dyDyT3RHIqktOQnI7kIJIzkBxCci8k90ZyHyT3RXI/JPdH8gAkD0TyjUi+Cck3I3kQkm9B8q1IHozkIUi+Dcm3I/kOJN+J5LuQfDeS70HyvUgeiuRhSL4Pyfcj+QEkD0dyp1IofpDcGcnXIbkLkrsi+Xokd0PyDUjujuQeSO6J5FQkpyE5HclBJGcgOYTkXkjujeQ+SO6L5H5I7o/kAUgeiOQbkXwTkm9G8iAk34LkW5E8GMlDkHwbkm9H8h1IvhPJdyH5biTfg+R7kTwUycOQfB+S70fyA0gejuQRSH4QySORPArJDyH5YSSPRvIYJI9F8jgkj0fyBCQ/guSJSH4UyZOQ/BiSH0fyE0h+EslPIXkykp9G8hQkP4PkqUiehuTpSH4Wyc8heQaSZyL5eSTPQvJsJM9B8gtInovkeUiej+QXkbwAyQuRvAjJi5G8BMlLkbwMyS8heTmSX0byK0h+FcmvIfl1JK9A8kokv4HkN5G8CslvIXk1ktcgeS2S30byOiS/g+T1SN6A5I1I3oTkzUh+F8lbkLwVyduQ/B6StyN5B5LfR/IHSP4QyR8heSeSP0byJ0j+FMmfIflzJH+B5C+R/BWSv0byN0jeheRv8XgpgcYLkmcgeSaSn0fyLCTPRvIcJL+A5LlInofk+Uh+EckLkLwQyYuQvBjJS5C8FMnLkPwSkpcj+WUkv4LkV5H8GpJfR/IKJK9E8htIfhPJq5D8FpJXI3kNktci+W0kr0PyO0hej+QNSN6I5E1I3ozkd5G8BclbkbwNye8heTuSdyD5fSR/gOQPkfwRknci+WMkf4LkT5H8GZI/R/IXSP4SyV8h+Wskf4PkXUj+FsnfIXk3kr9H8g9I3oPkvUjeh+T9SP4RyQeQfBDJPyH5ZyT/guRfkXwIyb8h+Xck/4HkP5H8F5L/RvI/SD6M5CNIPorkf5EcV/KEfB6S45GcB8l5kZwPyfmRfD6SCyC5IJIvQHIhJBdGchEkX4jki5BcFMnFkJyA5OJILoHkkkguheREJJdGchkkJyG5LJLLIbk8kisguSKSXUiuhOTKSK6C5KpIvhjJ1ZBcHck1kFwTybWQfAmSayP5UiTXQfJlSLaQrJDsRrIHyV4kJyPZh2Q/kgNITkFyXSTXQ3J9JF+O5AZIbojkRkhujOQmSG6K5CuQ3AzJzZHcAsktkdwKya2R3AbJbZF8JZLbIbk9kjuE5S5wDtcVcD2gG+AGQHdAD0BPQCogDZAOCAIyACFAL0BvQB9AX0A/QH/AAMBAwI2AmwA3AwYBbgHcChgMGAK4DXA7IC5sj34ahX9asT3qgXBtK562XY9uM7OtWGs6dzDVye4I18n0+wwviDtRI8MPR39TtXXMtvg440P037Ccdp12nXaddp12nXaddp12nXaddp12nXaddp12nXaddp12nXaddp12nXbt0S71eTXl5ym4bAwIsDFFgI11BdhYT4CN9QXYeLkAGxsIsLGhABsbCbCxsQAbmwiwsakAG68QYGMzATY2F2BjCwE2thRgYysBNrYWYGMbATa2FWDjlQJsbCfAxvYCbOwgwMarBNjYUYCNVwuw8RoBNnYSYOO1AmzU33dgdxt7C7CxjwAb+wqwsZ8AG/sLsHGAABsHCrDxRgE23iTAxpsF2DhIgI23CLDxVgE2DhZg4xABNt4mwMbbBdh4hwAb7xRg410CbLxbgI33CLDxXgE2DhVg4zABNt4nwMb7Bdj4gAAbhwuwcYQAGx8UYONIATaOEmDjQwJsfFiAjaMF2DhGgI1jBdg4ToCN4wXYOEGAjY8IsHGiABsfFWDjJAE2PibAxscF2Ki/b93uNl4rwMbOAmy8ToCNXQTY2FWAjdcLsLGbABtvEGBjdwE29hBgY08BNqYKsDFNgI3pAmwMCrAxQ4CNIQE29hJgY28BNvYRYGNfATb2E2BjfwE2DhBg40ABNt4owMabBNh4swAbBwmw8RYBNt4qwMbBAmwcIsDG2wTYeLsAG+8QYOOdAmy8S4CNdwuw8R4BNt4rwMahAmwcJsDG+wTYeL8AGx8QYONwATbq9z3b3cZrBdjYWYCN1wmwsYsAG7sKsPF6ATZ2E2DjDQJs7C7Axh4CbOwpwMZUATamCbAxXYCNQQE2ZgiwMSTAxl4CbOwtwMY+AmzsK8DGfgJs7C/AxgECbBwowMYbBdh4kwAbbxZg4yABNt4iwMZbBdg4WICNQwTYeJsAG28XYOMdAmy8U4CNdwmw8W4BNt4jwMZ7Bdg4VICNwwTYeJ8AG+8XYOMDAmwcLsDGEQJsfFCAjSMF2DhKgI0PCbDxYQE2jhZg4xgBNo4VYOM4ATaOF2DjBAE2PiLAxokCbHxUgI2TBNj4mAAbHxdg4xMCbHxSgI1PCbBxsgAbnxZg4xQBNj4jwMapAmycJsDG6QJsfFaAjc8JsHGGABtnCrDxeQE2zhJg42wBNs4RYOMLAmycK8DGeQJsnC/AxhcF2LhAgI0LBdi4SICNiwXYuESAjUsF2LhMgI0vCbBxuQAbXxZg4ysCbHxVgI2vCbDxdQE2rhBg40oBNr4hwMY3Bdi4SoCNbwmwcbUAG9cIsHGtABvfFmDjOgE2viPAxvUCbNwgwMaNAmzcJMDGzQJsfFeAjVsE2LhVgI3bBNj4ngAbtwuwcYcAG98XYOMHAmz8UICNHwmwcacAGz8WYOMnAmz8VICNnwmw8XMBNn4hwMYvBdj4lQAbvxZg4zcCbNwlwMZvJdzHLWF/G58TYOMMATbOFGDj8wJsnCXAxtkCbJwjwMYXBNg4V4CN8wTYOF+AjS8KsHGBABsXCrBxkQAbFwuwcYkAG5cKsHGZABtfEmDjcgE2vizAxlcE2PiqABtfE2Dj6wJsXCHAxpUCbHxDgI1vCrBxlQAb3xJg42oBNq4RYONaATa+LcDGdQJsfEeAjesF2LhBgI0bBdi4SYCNmwXY+K4AG7cIsHGrABu3CbDxPQE2bhdg4w4BNr4vwMYPBNj4oQAbPxJg404BNn4swMZPBNj4qQAbPxNg4+cCbPxCgI1fCrDxKwE2fi3Axm8E2LhLgI3fCrDxOwE27hZg4/cCbPxBgI17BNi4V4CN+wTYuF+AjT8KsPGAABsPCrDxJwE2/izAxl8E2PirABsPCbDxNwE2/i7Axj8E2PinABv/EmDj3wJs/EeAjYcF2HhEgI1HBdj4rwAb40ra38bzBNgYL8DGPAJszCvAxnwCbMwvwMbzBdhYQICNBQXYeIEAGwsJsLGwABuLCLDxQgE2XiTAxqICbCwmwMYEATYWF2BjCQE2lhRgYykBNiYKsLG0ABvLCLAxSYCNZQXYWE6AjeUF2FhBgI0VBdjoEmBjJQE2VhZgYxUBNlYVYOPFAmysJsDG6gJsrCHAxpoCbKwlwMZLBNhYW4CNlwqwsY4AGy8TYKMlwEYlwEa3ABs9Amz0CrAxWYCNPgE2+gXYGBBgY4oAG+sKsLGeABvrC7DxcgE2NhBgY0MBNjYSYGNjATY2EWBjUwE2XiHAxmYCbGwuwMYWAmxsKcDGVgJsbC3AxjYCbGwrwMYrBdjYToCN7QXY2IHBRg47HyhC1pY7q43kxo4sQtupHJ2pbYynbdeN/fZYPq83w+/OUB6VarlT0gLJljc5zRdQAZUcSA66Ax5PRsAb8KekpfitFOX1ZKhQcoonFG7szkS6PtT9lyfcj7pdV9zJTx7i/h1RhCeWYu3Tu5j6VLd7HuNYeqjIqe3G2hd3M/XF3Si+OPqiYTH6vriHqS/uMYw1O8859zL1w72MMaH/GyMYxsespvZew7TfIxn8nt2UJyHKQ2znULpYVYRcK8r+w2NoKOMak5dpDM21+RjKyzSG5gkZQ8MIxxAh12oe0xgaxjiG8jPF0n1Ma/J9jGuy7guO+eR+pr64Pxf2RIQ8KtwPsfbpA0x9+gBjfBVmGmvDmfpiOHNfcIy1EUx9MSIXxhohj2oE4Vh7kKlPH2SMrwuZxtpIpr4YydwXHGNtFFNfjMqFsUbIoxpFONYeYurThxjjqyjTWHuYqS8eZu4LjrE2mqkvRufCWCPkUY0mHGtjmPp0DGN8JTCNtbFMfTGWuS84xto4pr4YlwtjjZBHNY5wrI1n6tPxjPGVyDTWJjD1BW6Xoy84xtojTH2B2+Uaa4Q8qkcIx9pEpj6dyBhfFZnG2qNMffEo47xTkWmsTWLqi0m5sK4R8qgmEY61x5j69DHG+HIxjbXHmfricea+4BhrTzD1xRO5MNYIeVRPEI61J5n69EnG+KrENNaeYuqLp5j7gmOsTWbqi8m5MNYIeVSTCcfa00x9+jRjfFVmGmtTmPpiCnNfcIy1Z5j64plcGGuEPKpnCMfaVKY+ncoYX9WYxto0pr6YxtwXHGNtOlNfTM+FsUbIo5pOONaeZerTZxnji+lzHx7KO9jPMfXrc8z9OoLh8zQjCPt1BlO/zsiFOYAwJtQMwjlgJlOfzmSM1RFMn6d5nqkvns+F+CL8LJB6njC+ZjH16Szm+OL4jNJspr6YnQvxRfj5KjWbML7mMPXpnFz43Bfl2vgCUz+8kAuxRfiZNfUCYWzNZerTufLyY9LP8M5j6td5uRCrhJ+LJv3c53ymPp0f7tN8gEJx6AsH0EMdwzXjaH3JfF5MZDT4xUT6dhcQTmZcfi9IPNHBRO1aOtj0hyLiTzRNPqHpgVwyjnaCLBlH3xdxhifGtlWmgPt3YZjHRYnhQMmcAfQ/fJFFt4hxBdOdyHGCuKApLSkcfnOcIi9k+iRrXho73WE71ULCyW4RYUZJGDeKiwvqyZGSi8WGttKs9GCySvMF/SojNTmQnp7iUcqd6kv1pbkDoYy0ZBVIDkCb6anuAPzn3KnpKsNK9WXkZhayOJEnC1mSyGjwEoYsZKnNsxDt91KGLMRkK8XEpG2lGrCZ7VJytIxpK6HbrXSa2I95cU88npRQfb1CRujYk76AcCFZRMjRS3R2JWOOXkLbvawZeOZDvdjMstnCf5z6UJrBdZbMe3l47no5a+a9PDyZY93LhjOOvDTG/WckFyGxZojLCe16mThQqCc0/X10CxLpB9tdhH34SiLtYpv5xBP3JWXcvEq4IJjixortUZqTVxPp4/G1RN7EyortOTZnvcbg9+s291vz/TqD3yuYksAVZzg5opiPXmWYM18hnD9W5tKcacX2kCarbxAmqxxjSHPyBsMYelPA3PEmg9+rmOaOVYynzlzz6BKbnzpzxcBSId+f+BZhPkfItaLsPzyG3mIcQ5l7FmqOKPcslCXV1TbfC+g1bTXD2F4jZN9HyfVam3OtOVnLwPXbTGv521Hc1YnV9nXnwNzOEUs6jtYxxNI7TLH0DuOaxjWulp+jMfCykLxwPeHcQci1epkpL1wfHkNaLhh3Yi3Wv++BX46GZX3l62j43zYkxp30UJ9BbCBcvzfS8Zmu+0G7nhf10T7UR/uRrP+7mfKWsD7z/7cJ/m0z4F3AlsTj+nzhv42PO/WhHuOLmPI4ajs3EdqZH9m5NRy/28I/3wv/3B7+uSM8/9UI//378PsHgA8BHwF2Aj4GfAL4FPAZ4HN9Ww7wJeArwNeAbwC7AN8CvgPsBnwP+AGwB7AXsA+wH/Aj4ADgIOAnwM+AXwC/Ag4BfgP8DvgD8CfgL8DfgH/QXM2yGFARgCedHYm5f7l4G7Evmc/hREaDDyfSt3uEcHbl8vsIWmGI2rVyM9jeYwq2o4mMBh9lCLZ/bR5s2u9/hQfbdqZgiyvNaLBunLrd80rbO9i03+eVjiMPNg5bj4QHBvU+ML60zEG2g2mQ5SnNaHAehkGW1+aDTPudV8gg05NBfGn6QZavtL391vzkY/A7f2naQZp1s78NberfQ/IOJK/Nstk/H2wqACgIuKD0CX3mQ/1BVcJsQJ1PONYLMXOj28/koACSCyL5gtInc1MYfi8CuBBwUemT26OMS72P1rEZT8z1WsLsuighP/Gn6UcrtkdtDR/Kx9G2a2Ue9BSDPkgAFAeUAJQElAIkAkoDygCSAGUB5QDlARUAFQEuQCVAZUAVQFXAxYBqgOqAGoCagFqASwC1AZcC6gAuA1gABXADPAAvIBngA/gBgXD84HOUYqVPvSieYNAVN+hKGHQlDbpSBl2iQVfaoCtj0CUZdGUNunIGXXmDroJBV9Ggcxl0lQy6ygZdFYOuqkF3sUFXzaCrbtDVMOhqGnS1DLpLDLraBt2lBl0dg+4yg84y6JRB5zboPAad16BLNuh8Bp3foAugfIJ63tFzzlaGzdBrTXkO4vMS21mMIA8If7IqlEDXVrA4YX7yus25CPucUoKu/1RJsrYyVClCLlaI4CJdJZL1X0CVJmvLUmUIuVgpgYsMSyVR9V+6pcpStRWwVDlCLt6QwAWsl+WJ+i8D2qpA1Fa6fqkMIRdvCuAioF/uQdR/ln55AU1bGbqtyoRcrLI/F+na5yo0/RfQbVWlaUu7rC4m5OIt23ORccznaiT9l36sreokbQWOtVWDkIvVtufiWNOqJkX/ZRxvqxZFW+nH27qEkIs1ducicNzn2hT9d9xMdSlBW8FwW3UIuVhrcy7Swj5fRuCzP9yWFXtb/30hgyLk4m17c6EyfXbH7HMglNmWJ/a20jLb8hJysc7WXAQy7VTJMfvs/68tX8xtJf/Xlp+Qi3dszYX6z+cAXd1IEZ6HKnyeF/OHAnKJCyu2RxGemynCcx/1BiEXG4RwQXg+oAj3t+otQi42CuGCcB+kCPN4tZaQi01CuCDM9xRhvqLeIeRisxAuCNc1RTgvq42EXLybSx88tGJ7FOH4VYTxp6j7j6M2X6w0fW0+pTSv3xR3yorZ/E5Z3dL2jh19/68oQ+zUs7nf+gONKQx+f2PzuULHYz0Gv3cJ+XB7fcK9OiHXapfN40aPl7oMcbPb5n6nMI2X74WMl8sJxwsh14qy/47d5407+e67nicy78xfjuQeeU7IPfOcfJe+AfxdQ91fgMalT3+X3ortOZafJDDEZBMB+V6CzfO9pjbPe/SXODRhiJ29Np/H9dhsyuD3PiHz+BWE8zgh12qfzeNGjxeOuDkgYLxwzBMHhYyXZoTjhZBrdZA577kC5TrNosx7msPftQC0BLRiznuKM8RkawF5T3Gb5z1tbJ736C+uas0QO7/YfB7XY7MNg9+/CpnH2xLO44Rcq19tHjd6vHDEze8CxgvHPPGHkPFyJeF4IeRa/cGc97RFuc6VUeY97eDv2gM6AK5izntKMMRkRwF5Twmb5z1X2zzv0V/W2ZEhdv62+Tyux+bVDH7/I2Qev4ZwHifkWv1j87jR44Ujbo4KGC8c88S/QsZLJ8LxQsi1+pc577kG5Tqdosx7roW/6wy4DtCFOe8pyRCTXQXkPSVtnvdcb/O8R39BeVeG2Im/wt5+67F5PYPfea6QMY93I5zHCblWeWweN3q8cMRNfgHjhWOeOF/IeLmBcLwQcq0o+8+U93RDuc4NUeY93eHvegB6AlKZ855SDDGZJiDvKWXzvCfd5nmPfilLGkPsXGDzeVyPzXQGvwsJmceDhPM4IdeqkM3jRo8Xjri5UMB44ZgnLhIyXjIIxwsh1+oi5rwniHKdjCjznhD8XS9Ab0Af5rwnkSEm+wrIexJtnvf0s3neo19E15chdhJsPo/rsdmPwe/iQubx/oTzOCHXqrjN40aPF464KSVgvHDME4lCxssAwvFCyLVKZM57+qNcZ0CUec9A+LsbATcBbmbOe0ozxOQgAXlPaZvnPbfYPO/RL98dxBA7STafx/XYvIXB77JC5vFbCedxQq5VWZvHjR4vHHFTQcB44ZgnKgoZL4MJxwsh16oic95zK8p1BkeZ9wyBv7sNcDvgDua8pwxDTN4pIO8pY/O85y6b5z2fga93MsROZZvP43ps3sXgdxUh8/jdhPM4Ideqis3jRo8XjripJmC8cMwT1YWMl3sIxwsh16o6c95zN8p17oky77kX/m4oYBjgPua8J4khJu8XkPck2TzvecDmec/n4Ov9DLFTy+bzuB6bDzD4fYmQeXw44TxOyLW6xOZxo8cLR9zUETBeOOaJy4SMlxGE44WQa3UZc94zHOU6I6LMex6EvxsJGAV4iDnvKcsQkw8LyHvK2jzvGW3zvOcL8PVhhthx23we12NzNIPfHiHz+BjCeZyQa+Wxedzo8cIRNz4B44VjnvALGS9jCccLIdfKz5z3jEG5ztgo855x8HfjARMAjzDnPeUYYnKigLynnM3znkdtnvd8Cb5OZIidujafx/XYfJTB73pC5vFJhPM4Ideqns3jRo8XjrhpIGC8cMwTDYWMl8cIxwsh16ohc94zCeU6j0WZ9zwOf/cE4EnAU8x5T3mGmJwsIO8pb/O852mb5z1fga+TGWKnic3ncT02n2bwu6mQeXwK4TxOyLVqavO40eOFI26aCxgvHPNECyHj5RnC8ULItWrBnPdMQbnOM1HmPVPh76YBpgOeZc57KjDE5HMC8p4KNs97Ztg87/kafH2OIXZa23we12NzBoPfbYTM4zMJ53FCrlUbm8eNHi8ccdNOwHjhmCfaCxkvzxOOF0KuVXvmvGcmynWejzLvmQV/NxswB/ACc95TkSEm5wrIeyraPO+ZZ/O85xvwdS5D7HS0+Tyux+Y8Br+vFjKPzyecxwm5VlfbPG70eOGIm2sFjBeOeaKzkPHyIuF4IeRadWbOe+ajXOfFKPOeBfB3CwGLAIuZ8x4XQ0wuEZD3uGye9yy1ed6zC3xdwhA7XW0+j+uxuZTB7+uFzOPLCOdxQq7V9TaPGz1eOOKmu4DxwjFP9BAyXl4iHC+EXKsezHnPMpTrvBRl3rMc/u5lwCuAV5nznkoMMfmagLynks3zntdtnvd8C76+xhA7aTafx/XYfJ3B73Qh8/gKwnmckGuVbvO40eOFI25CAsYLxzzRS8h4WUk4Xgi5Vr2Y854VKNdZGWXe8wb83ZuAVYC3mPOeygwxuVpA3lPZ5nnPGpvnPd+Br6sZYqevzedxPTbXMPjdT8g8vpZwHifkWvWzedzo8cIRNwMFjBeOeeJGIePlbcLxQsi1upE571mLcp23o8x71sHfvQNYD9jAnPdUYYjJjQLynio2z3s22Tzv2Q2+bmSInUE2n8f12NzE4PctQubxzYTzOCHX6habx40eLxxxM0TAeOGYJ24TMl7eJRwvhFyr25jzns0o13k3yrxnC/zdVsA2wHvMeU9VhpjcLiDvqWrzvGeHzfOe78HX7Qyxc6fN53E9Nncw+H2XkHn8fcJ5nJBrdZfN40aPF464uVfAeOGYJ4YKGS8fEI4XQq7VUOa8532U63wQZd7zIfzdR4CdgI+Z856LGWLyEwF5z8U2z3s+tXne8wP4+glD7Nxv83lcj81PGfx+QMg8/hnhPE7ItXrA5nGjxwtH3DwoYLxwzBMjhYyXzwnHCyHXaiRz3vMZynU+jzLv+QL+7kvAV4CvmfOeagwx+Y2AvKeazfOeXTbPe/aAr98wxM7Ddn/fAPi8i8Hv0ULm8W8J53FCrtVom8eNHi8ccTNOwHjhmCfGCxkv3xGOF0Ku1XjmvOdblOt8F2Xesxv+7nvAD4A9zHlPdYaY3Csg76lu87xnn83znr3g616G2Jlo93sa4PM+Br8fFTKP7yecxwm5Vo/aPG70eOGIm8cFjBeOeeIJIePlR8LxQsi1eoI579mPcp0fo8x7DsDfHQT8BPiZOe+pwRCTvwjIe2rYPO/51eZ5zz7w9ReG2Jls83lcj81fGfx+Wsg8fohwHifkWj1t87jR44UjbqYKGC8c88Q0IePlN8LxQsi1msac9xxCuc5vUeY9v8Pf/QH4E/AXc95TkyEm/xaQ99S0ed7zj83znv3g698MsfOczedxPTb/YfB7hpB5/DDhPE7ItZph87jR44UjbmYJGC8c88RsIePlCOF4IeRazWbOew6jXOdIlHnPUfi7fwFxZeDfy/DmPbUYYjK+jP3znlo2z3vylLH3fPYj+Kp5puZmrs3ncT028zD4PU/IPJ6XLi4VIddqns3jRo8XjrhZIGC8cMwTC4WMl3yE44WQa7WQOe/R80RmfpOvTHR5T374u/MBBQAFmfOeSxjyngsE5D2X2DzvKWTzvOcA+HoBw3y2xObzuB6bhRj8XipkHi9MOI8Tcq2W2r3ek8gTN8sFjBeOeeJlIeOlCOF4IeRavcyc9xRGuU6RKPOeC+HvLgIUBRRjzntqM+Q9CQLynto2z3uK2zzvOQi+JjDMZ6/ZfB7XY7M4g9+vC5nHSxDO44Rcq9dtHjd6vHDEzRsCxgvHPPGmkPFSknC8EHKt3mTOe0qgXKdklHlPKfi7REBpQBnmvOdShrwnSUDec6nN856yNs97fgJfkxjms9U2n8f12CzL4PcaIfN4OcJ5nJBrtcbmcaPHC0fcrBMwXjjmiXeEjJfyhOOFkGv1DnPeUw7lOuWjzHsqwN9VBLgAlZjznjoMeU9lAXlPHZvnPVVsnvf8rN9xxjCfbbT5PK7HZhUGvzcJmcerEs7jhFyrTTaPGz1eOOJmi4DxwjFPbBUyXi4mHC+EXKutzHlPVZTrXBxl3lMN/q46oAagJnPecxlD3lNLQN5zmc3znktsnvf8ou+GM8xn220+j+uxeQmD3zuEzOO1CedxQq7VDpvHjR4vHHHzoYDxwjFPfCRkvFxKOF4IuVYfMec9tVGuc2mUeU8d+LvLABZAMec9FkPe4xaQ91g2z3s8Ns97fgVf3Qzz2Sc2n8f12PQw+P2pkHncSziPE3KtPrV53OjxwhE3XwgYLxzzxJdCxksy4Xgh5Fp9yZz3eFGukxxl3uODv/MDAoAU5rxHMeQ9dQXkPcrmeU89m+c9h8DXugzz2Tc2n8f12KzH4PcuIfN4fcJ5nJBrtcvmcaPHC0fc7BYwXjjmie+FjJfLCccLIdfqe+a8pz7KdS6PMu9pAH/XUPcXoDFz3uNmyHuaCMh73DbPe5raPO/5DXxtwjCf7bX5PK7HZlMGv/cJmcevIJzHCblW+2weN3q8cMTNAQHjhWOeOChkvDQjHC+EXKuDzHnPFSjXaRZl3tMc/q4FoCWgFXPe42HIe1oLyHs8Ns972tg87/kdfG3NMJ/9YvN5XI/NNgx+/ypkHm9LOI8Tcq1+tXnc6PHCETe/CxgvHPPEH0LGy5WE44WQa/UHc97TFuU6V0aZ97SDv2sP6AC4ijnv8TLkPR0F5D1em+c9V9s87/kDfO3IMJ/9bfN5XI/Nqxn8/kfIPH4N4TxOyLX6x+Zxo8cLR9wcFTBeOOaJf4WMl06E44WQa/Uvc95zDcp1OkWZ91wLf9cZcB2gC3Pek8yQ93QVkPck2zzvud7mec+f4GtXhvksvpm9/dZj83oGv/M0kzGPdyOcxwm5VnlsHjd6vHDETX4B44VjnjhfyHi5gXC8EHKtKPvPlPd0Q7nODVHmPd3h73oAegJSmfMeH0PekyYg7/HZPO9Jt3ne8xf4msYwn11g83lcj810Br8LCZnHg4TzOCHXqpDN40aPF464uVDAeOGYJy4SMl4yCMcLIdfqIua8J4hynYwo854Q/F0vQG9AH+a8x8+Q9/QVkPf4bZ739LN53vM3+NqXYT5LsPk8rsdmPwa/iwuZx/sTzuOEXKviNo8bPV444qaUgPHCMU8kChkvAwjHCyHXKpE57+mPcp0BUeY9A+HvbgTcBLiZOe8JMOQ9gwTkPQGb5z232Dzv+Qd8HcQwnyXZfB7XY/MWBr/LCpnHbyWcxwm5VmVtHjd6vHDETQUB44VjnqgoZLwMJhwvhFyrisx5z60o1xkcZd4zBP7uNsDtgDsY855i0MaIIvQxWVlITN5JGJODGtG1VbmZ/fPGIQxzWVWbz+Ha7zsZ/L6YabxQ5/WE/KiLhcwRmxLpfN5GuC+6i3BflA/aKITGC36oxxCl3djeu8swGnx3Gfp27ylDFwxcft9T5kQHE7V7LNji405MTpzBRjh4LU47tyXyDIp7ddxSr1Y6KPRKyLG6UnZCnjBR96LBy5EJ6f6w8wnaUOKVIk9c7qwUlIMCTzbDwpPafabBYcX2KN3Z9zLMmhwdrO0cypDO3m/zI1sdAPcz+P1AGZ4JTLc7LI5nkN3H1BfDmfpiOGNf6AmHoy9q2Hw7zzUeap5dv9Mj2McW+7VyaWtrxfYowrhUhFwryv7TCYs+PjXtNuKy2Z+R4gm3ybFmUfUJTt5GoPgnN/p+pkVgxBky+gjNqEj/HW3zCIZJoQ7TpJA3m5xlJ3mL1ecHy9hzgqnTjCcuH0TJSU75idTnlPyMRG0pjwfGRtCvQsGQJ9mf4k5TPo/PF/KG/L6ANxhK9qYG/RnKm+pxp2T4rZAKZGT4kz3pfl8oJZjuC+FJWwU9Hm8wJS1dJbt9qWlWIOhJtUJev8dtpQY9/mDQE/D5Uj2eoC8QCqQE3O7UkCdgJfv9KZbP7Ulxc/EzMsxPbu5iNzHtYkeFN5kPSZnAuewbxTBZP8y0cD3MuHvRffEQQ1+MZuqL0Yx9sYlpJ2fZfCfHNR6UzXdyXLHvFrKTI4xLRci1cjs7uayPGsW0kxsjcSc3hnknN4ZhUvCdgzu5sWXsOcH4mHYKY4Xt5MYR7uTchDs5Ln7GoZ3c6RYFOx/BcdrJtcCMl7jAjGdeYMYzLDCBXFpgKOu8NqoVnbTAxGpXipBrihMIF2jC+FMpTAvAhCgW6Fj79JEydAvhScejNlqgA0z8PPJ/dNQ6MXzU+ijHbbrTXcKxYnvUUOJshcvveEa/Y7Vxks2Pv3VgTmJIQB5jSsYeYzzyfZSpLx5n6ovHmY+/Ofqivs2Pv7nGw+U2P/7miv0GQo6/CeNSEXKtGjjH31mfY2sWVZ/gpPIJztOJSUyLwBOMpxPa5icYJoUmQo6/JxEmgk+WsecE04Rp9/ZkLhx/U/LzFOHxdwPC3TUXP0+dhd0118dxJod3109LmcC57JvMMFlPYVq4pjDuXnRfPM3QF88w9cUzzB9J4cjsr7D5To5rPDSz+U6OK/abC9nJEcalIuRaNXd2clkfNZlpJzdV4k5uKvNObirDpND6HNzJTStjzwmmNdNOYZqwndx0wp1cc8KdHBc/08/CRaaJZXjGvZQF5lmJC8yzzAvMswwLTFshF5koJ7DLmTLYWO26UshFpucIF2jC+FNXMi0Az+XCRaYZhBeZGjSz5wLdlomfGQZ+qHe9mwi/7Wk7YVszCdey3PyOwZlMicPzZRgNfp7hEtgswoWNy+9ZZU50MFG7ufodg9uFfMfgJqbvGJzNcStSB4Wk7xicfYbsnOI7BmeVsfd3DM4hXimkXxl+ITypzTUNDiu2R+nOns0wa3J0sLZzDsPWcp7NC7o6AOYx+D2f6XhhPmMRcy5TX7zI1BcvMl/N5eiLDjYv6HKNh6tsXtDliv2OQgq6hHGpCLlWHZ2Cbtbn2JpF1Sc4eVvAed4+j2kRWMB43q5tXsAwKVwrpKA7j/BYYmEZe04w1zKdRy7MhYIuJT+LCAu6HQnPi7n4WXQWruZuZ9rFLg5vMpdImcC57FvMMFkvZVq4ljLuXnRfLGHoi2VMfbGMsS+2M+3krrP5To5rPHSx+U6OK/a7CtnJEcalIuRadXV2clkftZhpJ/eSxJ3cS8w7uZcYJoXu5+BObnkZe04w3Zl2CsuF7eReJtzJdSXcyXHx8/JZuJr7QhmecS9lgXlF4gLzCvMC8wrDAtNTyNVcygnsKqYMNla7UoVczX2VcIEmjD+VyrQAvJoLV3NfI7ya27GZPRfonkz8vPZ/dNT6eviodQXHbbrTXcKxYnvUHOJshcvveEa/Y7Vxpc2Pv3VgrmRIQN5gSsbeYDzyXcHUF28y9cWbzMffHH0RtPnxN9d4yLD58TdX7IeEHH8TxqUi5FqFnOPvrM+xNYuqT3BSuYrzdGIl0yKwivF0Qtu8imFS6Cvk+HslYSL4Vhl7TjB9mXZvb+XC8TclP6sJj79DhLtrLn5Wn4XdNdfHcdaEd9drpUzgXPatYZis32ZauN5m3L3ovljL0BfrmPpiHfNHUjgy+/4238lxjYcBNt/JccX+QCE7OcK4VIRcq4HOTi7ro9Yw7eTekbiTe4d5J/cOw6Qw6Bzcya0vY88JZhDTTmG9sJ3cBsKd3EDCnRwXPxvOwkWm18vwjHspC8xGiQvMRuYFZiPDAnOrkItMlBNYBlMGG6tdg4VcZNpEuEATxp8azLQAbMqFi0ybCS8yhZrZc4G+lYmfzYynO3OY6rbv2vy087zSEOOl6f3eYnO/9ftPOd4YstXmd710PGpuqE+LCONcbSHMAbbZPA51vGxjiMP3bB6H+lv13itj72/r227zPtQVie0MsXN7M3uPmW1Mft/BlJdTxzghP+oOm1ef3mPiegfh2M7N72zewXQQ834ZRoPfZ7hU/wFhksDl9wdlTnQwUbvHgi3ze5u5g61mHM+ESG3nIsL7MIWRnR+G+fso/HNn+OfH4Z+fhH9+Gv75Wfjn5+GfX4R/fhn++VX459ccn17RwSbpu6B3hicFrPvUoPvCoPs6rMvNmfdDppn3mzKMBn/DMPPusvnMq/3exTTz5lawfcQUbN+WYTT4W4Zg+87mwab9/o4h2Ey2xur/zvDAoN6PUE4Iu4Xm5R8zDdjvyzAa/D3DgP3B5gNW+/2D8NXhE6Zg21OG0eA9DMG21+bBpv3eK2R1+DQ8MKhXB8oJYZ/NT/N1JrCb4bRqv8391jG+j8HvH4VmA58xTdAHyjAafIBhgj5o8wla+31QeDbwOVOw/VSG0eCfGILtZ5sHm/b7ZyHZwBfhgUGdDVBOCL/YfFXUq/aPDKvirzb3W8f4Lwx+HxKaDXzJNEH/VobR4N8YJujfbT5Ba79/F54NfMUUbH+UYTT4D4Zg+9Pmwab9/lNINvB1eGBQZwOUE8JfNl8V9ap9iGFV/NvmfusY/4vB73/K2HvM6Lr5Bza/4XjY5rGjY/sfhtg5QrxIAiX/fVJE/74VfjkalnU5OlP+CMnbwn+T+f87Cv/2r14PkuDfk07oMx/qG9s76fpAHSWcx+OTeC4dUfcfYcVP/UvYf3mE9B9hEUvFJdH1X94k3rlBx3fmHJAHyXmRfF7SyXNDPvg9P+B8QIFcmBs+JeQmHyE3BYXENuH5v8pP2H8XCOk/wiNtdT5h/xVinhsKojngAiQXQnKBLHNDYfi9COBCwEW5MDd8QchNYUJuigqJbcLTQFWEsP+KCek/wgMudSFh/yUwzw1F0RxQDMkJSL4oy9xQHH4vASgJKJULc8PXhNwUJ+QmkZmbRMRBCSSXRHKpLNyUht/LAJIAZZNObg9zQrHHP8JwDnGYcM9SjnjuoT6H0FxpG6m5KW9zv7k+fVfB5n7r2C7PwPfdNv+0pfa7AoPf9wj5ZC0hP4rSZ11AzB+XOwVEyg/9FUF2Vkw6/tMV/lkp/LNy+GeV8M+q4Z8Xh39WC/+sHv5ZI/yzZvhnrfDPS5IMH6qzYntU5iF+HG27J30QrlLSqR9wq2rQVTfoaiXl/gfhKhInU5lP7SRGg2sn0bd7KWGGyuX3pUlx5MGbm8HmYgq2OkmMBtdhCLbLbB5s2u/LGILNZGus/lcKDwzq9IFyQrCSZA7YykwDViUxGqwYBqzb5gNW++0WvjpUYQo2TxKjwR6GYPPaPNi0314hq0PV8MCgXh0oJ4Rkmx+g6EzAYjhI8Nncbx3jyQx++4VmAxczTdCBJEaDAwwTdIrNJ2jtd4rwbKAaU7DVTWI0uC5DsNWzebBpv+sJyQaqhwcGdTZAOSHUt/mqqFdtP8OqeLnN/dYxXp/B7wZCs4EaTBN0wyRGgxsyTNCNbD5BHyNKeDZQkynYGicxGtyYIdia2DzYtN9NhGQDtcIDgzoboJwQmtp8VdSrdgOGVfEKm/utY7wpg9/NbO53Zg2d2u/mNvdbx2MzBr5bEC9sZ/rwWkV0gdGVdPoPr7WEf2sFaA1ok8R/0bQSXR+oloRzb1vimOTqP8IqnWpF2H9XCuk/wsKTak3Yf+2Y54a2aA64EsntkNwm6eS5oT383gFwFaBjLswNVQm5aU/IzdVCYpvwzF51IOy/a4T0H+ExtLqKsP86Mc8NV6M54Bokd0Jyxyxzw7Xwe2fAdYAuuTA3VCfk5lpCbroKiW3CEzzVmbD/rhfSf4SHUuo6wv7rxjw3dEVzwPVI7obkLlnmhhvg9+6AHoCeuTA31CLk5gZCblKZuUlFHHRHcg8k98zCTRr8ng4IAjKS+D68pvf4LRjO25oT8hOy+TmE5irEcA7Rizkud8SfiL9eKBYvQfKW+JPjsjf8Wx9AX0C/M8SlFdtz7EMyzRn6dJjNPyCmfe7N4Pd9Qj4gRsiPus/mr9nUXxB1mOHcdrjN/dZnixxje0Sz3MlRY7WzP2EeRMi1GmHzuNF1jv4McTOAeJ3N/OzgAGQrdV98yjR3jLJ5DFRlmjseEjJ3DCScOwi5Vg8JmDsGMsTNjUxzx42Mc8eHTHPHGJvHQEWmuWOskLnjJsK5g5BrNdbmcfMR03iZYHO/XUzj5REh4+VmwvFCyLWi7D/TudBN6PznZiT3P8O50CD4t1sAtwIGh8+F9GXUgogffMlzCIorlsWeqK1jHaSdiEe21ilwoiP0QdXR8L/dlpS7XxRyG3HykfncnsRo8O1J9O3eQXjazOX3HUknOpioXbZMmcNW00zjRQPpNlwZyYMqI3lOnmnuhL+7C3A34B7GE+iZYKzuC+oTTsrXC9zLtPvQ7brijk9mheNO9AF+qPt7LsGkHTr+WAZzY21bZQq4L4aGx8mwpHCHZHbg0PAkh3XDwp2KH+oS69zYg8sdDi41lHBSHZZESy51SqoH5VAZE7RnbnhiIi8RMU0m96G4l9IX9xP2he6HD+JOfajaj+PpW0XZB1w2PkBtI0c2dSfDHnqSzevY2u8HGPx+jOnsIC9jYMZczyU8hyCMG0XJBfMkqTLbOxcnyeE2nyT/W8XtvNUawZQdjciF7MjO/fqgk2mpBwVMIiPtnmnNZNoKPCkg0xrJkGk9JSTTGkmYaY0izLQI40Y95WRaIibJUedopuWmzAgeYsq0HpKXaZH268NOpqUeFjCJjOaeRCgyjtEMnxkaTbiSj5ET7GwrpoRgH2P3bYWEPfRYphVzLCoD54mTd6clHtk5LlzdGy/l4hGXfbcx7BWnCNgjj2Pw+5mz63d6BPuO8T2ewe+puXSD04rtUYRxqQi5VlOJb3AWQH2nf68Vd+L+1BB0r2pQWPYBJoD8SC5fWJzAdGFxYhKjwRMZLiw+avMLi9rvRxnuw+RmsD3CFGyTkhgNnsQQbI/ZPNi0348JuR37aNhW6hX18ST7Z1CPJ9l7G/QE8YDXN1/zxBni0qvcbo/y+sE0C2wMpgfcGYHU5OTUlGR30BsMuS13si+UYYFtwRRvCqi9Kj3VskJWalpIJR/N2l5qIB289llBC/4nlBwMgNvelKA3EPJYXm/Q8imvlZYSyAj6lT81JS3Z404N+TxWukr2WP4Ulbm6LwhXvzI50vI4tPqPD8tPws+nAJOTcveG72SG84g4Ez+xPW7cF0+H56UpWW/46n84kkU3JenUlY06pZ1MMJlnhK/SPk24MExhIpd6wqH0+RnUlgp43G6/R/9dIGgpbxA2Z253MM1rpVup6e6MFK9KCXndXk96MD0N2kxVISuUmp4SChy3Kzczo2eYMqOpSYwGT2XIjKbZPDPSfk/LpcyIYgKYxpAZTWc63JyedPJKSclbZrZE3RfPMmeJVmzPMb+fZcgSFxBmic8J6MPnGGJnBtM4moFs5eiLKTaPp5kC4mkmQzw9zxRPzzPGkz7WeoKhL2bZPAYeYfJ7NnEMFAn7PgvtWmcj+Tn0sconkf4pJGfG+hz4+QJgbniXe37c8Z9ZHzsXMA3mxty2OyU1XanU1Mwxx9kXteLo+4LaxiECbkkMYoopajvnCLFzJl2dXuEN8Lxz/XLBPCHH+DMF3Necz5Rgzee7B+vm+jz2i0x98aLAvlhAfLXx47hTH6r243j6Vi0QsGgvlPDZ9DkMu4LnBNwGW8hxwiLkE1MLCU+9FxF+YoowbtSMZmImSbb73xImyUU2nyTdEu5/L2bKjhbnQnZk535d4mRaaomASWSphE9MaSOpL4MQHgmc1Ikxn4fb/JuNT7f9j9XvZYTZ0CwngxEx+SyjtFEbl/VLUgcXRZf5kTz+/NN/HfNLYNRywMuAV5L4viS1cTGeM45XbV5Quxt4eKEovd9zhHw1+muEE118Y8IChM0XnnuY4maukLh5nTBu8hPGzVybx81QpriZLyRuVhDGzYWEcTPf5nGj19HXGI46V9p8fdZ+v87g9xs297sp5GOvMvj9JvEJU9YcdyW6wPMGkt9MOn2Ouwr+7S3AasCaJP7XV79EuEFeRdjWWkJucvNTCGuJYyrzeTuJ0eC3GT6FsM7mn0LQfq9LOtHBRO0eCzb9yfX4OP5ge8nmt/LCjxtPYu+E+3x9+OeG8M+NOgapZ3hNsGknb8X2kL+LKbM2sQFdBc26mryDVo31SN5whtVkE/zbZsC7gC1nODGhOApel2TvusdW5iwnVvv0YN7KkOUssHk2v4nJ74VCXg5PyI+i9Dk3P0Q9R+BrkraFF673kuJO/sD0NjSJZ+reQ0XnzIc6lZ9D+JqkbYTZ23tJtORSTxR68tkm44pvsuaYY7LcznTZYjvfZQs1EY4O5zEcHy4Rcny4g/D4kLDEoJbYPOHQcTOfIW6WCYmb9wnjhrDEoJYJiJtFDHGzXEjcfEAYN4QlBrVcQNwsZoibV2zu92NM5b1XhYyXDwnHCyHX6lUB42UJQ9x8ZPMyl/Z7KYPfOwX4vYzB748F+P0Sg9+fCPB7OYPfnwrw+2UGvz8T4PcrDH5/LsDvVxn8/kKA368x+P2lAL9fZ/D7KwF+r2Dw+2sBfr/B4Pc3AvxexeD3LgF+r2bw+1sBfq9l8Ps7AX6vY/B7twC/1zP4/b0Avzcy+P2DAL83M/i9R4DfWxj83ivA720Mfu8T4Pd2Br/3C/D7fQa/fxTg94cMfh8Q4PdOBr8PCvD7Ewa/fxLg92cMfv8swO8vGPz+RYDfXzH4/asAv79h8PuQAL+/ZfD7NwF+72bw+3cBfv/A4PcfAvzey+D3nwL83s/g918C/D7A4PffAvz+icHvfwT4/QuD34cF+H2Iwe8jAvz+ncHvowL8/pPB738F+P03g99xZe3v92EGv88T4PdRBr/jBfgdV4ze7zwC/I5n8DuvAL/zMvidT4Df+Rn8zi/A7wIMfp8vwO8LGPwuIMDvwgx+FxTg94UMfl8gwO+iDH4XEuB3AoPfhQX4XYLB7yIC/C7F4PeFAvwuzeD3RQL8TmLwu6gAv8sx+F1MgN8VGPxOEOC3i8Hv4gL8rszgdwkBfldl8LukAL+rMfhdSoDfNRj8ThTgdy0Gv0sL8Ls2g99lBPhdh8HvJAF+Wwx+lxXgt5vB73IC/PYy+F1egN8+Br8rCPA7wOB3RQF+12Xw2yXA7/oMflci9Ft/8XU9MLBDuD393Yn6e/AWgO36e830dzXp7wfS35WjvzdGf4eK/j4R/d0a+nsm9Hcu6O8f0J/F159L15/R1p9X1p/d1Z9j1Z/p1J9v1J/10597058B05+H0p8N0p+T0Z8Z0Z+f0J8l0Pfq9R1zfd9a3z3W93D1nVR9P1PfVdT39vQdNn2fS99t0vd89J0Xff9D34XQ9wJ0jVzXi3XtVNcRdU1N15d0rUXXHfQZvD6P1mez+pxSn9np8yt9lqPPNfQeX+939d5P74P0nkDnxzpX1HmTziH0eqrXFj3P6jlHjz8di5qXzIc4lti+37QyYSzlCcdS1oeqfaa+VZR9wGVjFWobqQ18h+nbylfY/PXy2mdNDnW7K4W8Xh4HZqw+V6ULckUYN2plMzGTJNvLWSVMklVtPkn+t4rHEzu+lfBb6S8m7ETdf5nfeK7bdfEQL6JfqzmZlqomYBKpbvdMaz1TprVKQKZVnSHTektIplWdMNOqQZhpEcaNesvJtERMkjXO0UzLTZkR1GTKtGrKy7RI+7WWk2mpWgImkUvsnmltYMq01grItC5hyLTeFpJpXUKYadUmzLQI40a97WRaIibJ2udopuWhzAguZcq0LpWXaZH2ax0n01J1BEwil9k909rIlGmtF5BpXcaQaW0QkmldRphpWYSZFmHcqA1OpiVikrTO0UzLS5kRKKZMS8nLtEj71e1kWsotYBLxcE8iFBmHNjIPqeOekw5wrdiekzoxVn+9cgYO2+orYeB47b5FkXDHJJlp9U3mW33VWujXdQxbP5/NPx3wKvi8gsFvv5MpqB557G9jgDI+pRK1J97+NqY4REEZooD9baxr9xRCf6jKx3Dat9nmL67XKU5dBr/fZTrlzENsZz3Ck0lCrtW7No8bnRrWY4ib+kxpcv2wrWJLWQIm+cud1RiOqgUQ1cAhCk5eBBDV0CEKjp8EENXIIcpSPgFENbb7RkQn5I0ZEqttNk8o9TdYcGzA3hOyEWlCuBEh5Fq9J2Aj0oQhbpoybUSaCt+IBARM8lc4qzEcuQkgqplDlKXqCyCquUMUbJsFENXCIQp2YwKIailhI9KSIbF63+YJ5RdMG5EPhGxEWhFuRAi5Vh8I2Ii0Yoib1kwbkdbCNyI7BdxPaOOsxpZqKmA1busQZakdAkbUlQz3ZY898aSGKksvB5ltxboEtHPuDap2Ze1vY3sZwWmFKIOzA53TbqnB2UFAcF4lYcN5FUMCvdPmG4ddTBvOj4VsODsSbjgJuVYfC9hwdmSIm6uZNpxXI1szH+Ksy025sF3jZF3qGgELWychWwIPZXBe6wSnulZAcHYWEpxeyuC8zglOdZ2A4OwiJDiTKYOzqxOcqquA4Lz+XJw5uzmHKaqbgOC8QcJhyg0Mm8PPbL4p/oHpMOVzIYcp3QkPUwi5Vp8LOEzpzhA3PZgOU3rwH6b4KRe2nk7WpXoKWNhShWRdAcrgTHOCU6UJCM50IcGZQhmcQSc4VVBAcGYICc5UyuAMOcGpQgKCs9e5OHP2dg5TVG8BwdlHwmFKH4bN4Vc23xT/yHSY8rWQw5S+hIcphFyrrwUcpvRliJt+TIcp/fgPU9IpF7b+Ttal+gtY2AYIybqClME50AlONVBAcN4oJDgzKIPzJic41U0CgvNmIcFJ+kmKQU5wqkECgvOWc3HmvNU5TFG3CgjOwRIOUwYzbA6/tfmm+Bemw5TvhBymDCE8TCHkWn0n4DBlCEPc3MZ0mHIb+2GKW1EubLc7WZe6XcDCdoeMrMtN+hm0O53gVHcKCM67hAQn6WfQ7naCU90tIDjvERKcpJ+kuNcJTnWvgOAcei7OnMOcwxQ1TEBw3ifhMOU+hs3hDzbfFP/BdJiyR8hhyv2EhymEXKs9Ag5T7meImweYDlMe4D9M8VEubMOdrEsNF7CwjRCSdZF+Bu1BJzjVgwKCc6SQ4CT9DNooJzjVKAHB+ZCQ4CT9JMXDTnCqhwUE5+hzceYc4xymqDECgnOshMOUsQybw/023xQfZjpM+VHIYco4wsMUQq7VjwIOU8YxxM14psOU8fyHKWmUC9sEJ+tSEwQsbI8IybpIP4M20QlONVFAcD4qJDhJP4M2yQlONUlAcD4mJDhJP0nxuBOc6nEBwfnEuThzPukcpqgnBQTnUxIOU55i2Bz+ZPNN8XlleQ5TfhZymDKZ8DCFkGv1s4DDlMkMcfM002HK0+yHKR7SdyhOcbIuNUXAwvaMjKzLQ/oZtKlOcKqpAoJzmpDgJP0M2nQnONV0AcH5rJDgJP0kxXNOcKrnBATnjHNx5pzpHKaomQKC83kJhynPM2wOD9l8U5yf6TDlNyGHKbMID1MIuVa/CThMmcUQN7OZDlNm8x+mkL5DcY6Tdak5Aha2F4RkXaSfQZvrBKeaKyA45wkJTtLPoM13glPNFxCcLwoJTtJPUixwglMtEBCcC8/FmXORc5iiFgkIzsUSDlMWM2wO/7T5prgQ02HKX0IOU5YQHqYQcq3+EnCYsoQhbpYyHaYs5T9MIX2H4jIn61LLBCxsLwnJukg/g7bcCU61XEBwviwkOEk/g/aKE5zqFQHB+aqQ4CT9JMVrTnCq1wQE5+vn4sy5wjlMUSsEBOdKCYcpKxk2h4dtvikuynSYckTIYcobhIcphFyrIwIOU95giJs3mQ5T3uQ/TCF9h+IqJ+tSqwQsbG/JyLq8pJ9BW+0Ep1otIDjXCAlO0s+grXWCU60VEJxvCwlO0k9SrHOCU60TEJzvnIsz53rnMEWtFxCcGyQcpmxg2BzGNbf3prgk02HKec15ZiPqw5SNhIcphFyr82weN3oS38gQN5uYDlM2sR+meEnfobjZybrUZgEL27tCsi7Sz6BtcYJTbREQnFuFBCfpZ9C2OcGptgkIzveEBCfpJym2O8GptgsIzh3n4sz5vnOYot4XEJwfSDhM+YBhc5jX5pviJKbDlHxCDlM+JDxMIeRa5RNwmPIhQ9x8xHSY8hH/YQrpOxR3OlmX2ilgYftYSNZF+hm0T5zgVJ8ICM5PhQQn6WfQPnOCU30mIDg/FxKcpJ+k+MIJTvWFgOD88lycOb9yDlPUVwKC82sJhylfM2wOC9h8U1yR6TCloJDDlG8ID1MIuVYFBRymfMMQN7uYDlN28R+mkL5D8Vsn61LfCljYvhOSdZF+Bm23E5xqt4Dg/N7uWdecRJ7s44ey9l89f2Dwew/T6qnbdTEFqY4BnX3HE7er26Tq170C4mkvQzztY4qnfYzxxDW2CgvIyDlioIiQndx+wp0cIdeKsv/wGNrPOIYaFzu+Ltt5Tv5RwJz8I8N4PMA0Jx9AtlL3RdNiPHleUSFz00HCuWkt4ZfJFBWwph1kiJufmMbQT2Fb9e8fx536UPY1R3/vibe/jT9znbjkITZ0JuGJC3Y61rZ+IZyM8kEbheJOPVrlIP4X4kGb+fxaltHgX8vSt3uIMBi4/D5U9kQHE7VrSZ1V6xSwv42/nYuz6m+EA+l3obPq70yz6h9lGQ3+g2FW/dPms6r2+09nVs18lFvArPrXuTir/kU4kP4WOqv+zTSr/lOW0eB/GGbVwzafVbXfhxlmVZOtMb/MPLwCUA/+Q2XtuYoeKeuscj4Bq9zRc3GVO0oY6P8KXeX+ZVrl4soxGqwbp273vHL2XuW03+eVO9G/RO2yrHJ6NT7CsModJhxkRwgHf3w5Z5WrK2CVy1OO3sZjj51XuTyEE1vecjJXOUK7T1rl8pVjNDgfwyqX3+arnPY7v5BVTq/GeuanHvznEQ6yeEK+z3dWOdVAwCpX4Fxc5QoQBnpBoatcQaZV7oJyjAZfwLDKFbL5Kqf9LiRkldOr8fkMq1x+wkF2PiHfhZ1VTu0UcIesyLm4yhUhDPQLha5yFzKtcheVYzT4IoZVrqjNVzntd1Ehq5xejQszrHKFCAdZYUK+izmrnNohYJVLOBdXuQTCQC8udJUrzrTKlSjHaHAJhlWupM1XOe13SSGrnF6NizGsckUJB1kxQr5LMc2e8aT9p0jf35tIyIXUlT2xnP1tLH0uruylCQd3GaErexmmlT2pHKPBSQwre1mbr+za77JCVnadgZRiWNlLEg6yUoR8l5OxspO+X7q8s7Kr8gJW9grn4spegXBwVxS6sldkWtld5RgNdjGs7JVsvrJrvysJWdl1BlKOYWUvSzjIyhHyXVnGyk76DuMqzsquqghY2aueiyt7VcLBfbHQlf1ippW9WjlGg6sxrOzVbb6ya7+rC1nZdQZSmWFlr0Q4yCoT8l1DxspO+qbYms7KrmoKWNlrnYsrey3CwX2J0JX9EqaVvXY5RoNrM6zsl9p8Zdd+XypkZdcZSA2Glb064SCrQch3HRkre4ByZb/MWdnVZQJWdutcXNktwsGthK7simlld5djNNjNsLJ7bL6ya789QlZ2nYHUYVjZLyUcZHUI+fbKWNlJ3zOe7KzsKlnAyu47F1d2H+Hg9gtd2f1MK3ugHKPBAYaVPcXmK7v2O0XIyq4zEC/Dyu4hHGReQr7ryljZ0ylX9nrOyq7qCVjZ65+LK3t9wsF9udCV/XKmlb1BOUaDGzCs7A1tvrJrvxsKWdl1BlKXYWVPIRxkdQn5biRjZSd913pjZ2VXjQWs7E3OxZW9CeHgbip0ZW/KtLJfUY7R4CsYVvZmNl/Ztd/NhKzsx7IkhpW9IeEga0TId/Ny9uZDx01zBj6aEfLRnJCPFsx8WLE9x9692qIcPc84c7NifPQiVDDuxIMn95bIdpbOoXQiT1zurKQtCYMuHtnZKjzpt5bS6Vz2tWQYMQnN7T1za79bMfhd/Oz6nR7BvmN8t2bwu0QuvdXciu1RhHGpCLlWlP2nuS2M+o6y/46euT13ekh5kjP8yZYv1Zsc9HncQbffCnqTQwoCyZ3ihTAKpXsDwYDbE3L73elHwzG+IPH4z8wJWst6fGb+e+uw3AZ+tgVcCcgX9hNP6nHo/0/p95Vc+3haO924L9qFF7j25cIdkrli6384kkXXvtypqzn14LuSIBXNCB1/2hGmte1FHCBaitLnDqgtFfC43X6P/rtAEKquQVhG3O5gmtdKt1LT3RkpXpUS8rq9nvRgehq0mapCVig1PSUUOG5Xbp6rdGA6V7mqHKPBVzGcq3S0+bmK9rujkHOV9mFbqdu9mjhYMydr3S5eKSl50xniwCT6yWsB4QHzNQLOIa5hiKdOTPHUCdlK3Rcfl4mLO1yGvi9KN7d3DFSGMdQ8id7vMrm004rVzmsJzzAJuVZlbB43nzCNl3I297sK03gpL2S8dCYcL4Rcq/KMJxP692vRLr8zkjPXz0gnAtfBzy6Arrl8ItBV4InA9eF8vFvWE4HrDScC3XLhRKAr4YnA9YQbom5CTgQofb5B6InADUwnAt3LMRrcneFEoIfNTwS03z2EnAh0C9tK3W5Pph1cT+YTgW4MvHHZqzMCbTO1va5wO6nQfhogHRAEZABCgF6A3oA+gL6AfoD+gAGAgYAbATcBbgYMAtwCuBUwGDAEcBvgdsAdgDsBdwHuBtwDuBcwFDAsvHJj7rU9BeJO1qUZdOkGXdCgyzDoQgZdL4Out0HXx6Dra9D1M+j6G3QDDLqBBt2NBt1NBt3NBt0gg+4Wg+5Wg26wQTfEoLvNoLvdoLvDoLvToLvLoLvboLvHoLvXoBtq0A0L6+LieOaZ6xjmXBfTDjAvsZ2pZMmwpdKI2tK8pBPmFZVszkXGcUNVMHaf3Zl3LjJibct74v5GiJCLyvblwsJ3VnrF4rP75PsvvXPelpX1Lk0fQi6q2JALX+jU+0N9c+ZzwHQXqV9O2gqY7zX1J+Siqr248J/uLteA7PrsP/29sIHZa8t9pjtmNxJycbFduPCf+V7dTdH7HPGO3s3RtuWP2H9qECEX1c4+F1YUdqpbovHZispndWvktpKj7D81mJCL6meTC2/UdqohZ/TZG8qGz+q2M7Xlz1b/qdsJuahxdrgIZNNOdcdpfE4JZdtndae5LSsH/afuIuSiZm5zYeXITnX3qT6rHPqs7snaVjDH/afuJeSiVu5x4YnBTjUU+ewOxeSzGkZ3vqvwuUXMX1edS1xYsT2K8HxAEe5vVRVCLmoL4YJwH6QI83hVjZCLS4VwQZjvKcJ8RdUk5KKOEC4I1zVFOC+r2oRcXCbk81yE41cRxp+i7D8dvw2gKOIKtzcsXAu8N1wbvDtcK7wzXDu8PVxLHBKuLd4arjUOCtcebwrXIgeGa5P9w7XKvuHaZe9wLTMUrm0Gw7VOXVPQNYqsT9ZLLbHGXhfCHPS+cmSXWqzcvNRyH10eedKllvvLMRp8fzn6dh8gDAYuvx9Ag4Ko3WPBFh+XO1cZu5Tjmeyz9kmsAxAH8nAda9SVYk3k2kSeyjZVB+Nq/HA04Kj7Qtus+4P6yiLlt6CNIA7c7PIeKWA1PyMYbjQ8WI4nnnS7w04TT5HaiTS4ufpiJFNfjIyhL85WXIxi6otRAuPiIaa+eCjcF7n5FTiUCzROKB4OJy6jTYupFdujNKnDGTIjjg7mCsIx5ezttw6AMQx+j2UafGNjmIgiPGo0U1+MY+qLcYx90YWpLxrZ/GuhuMZDY5t/LRRX7DcRcoxIGJeKkGtF2X86YdFHiaYThbhs9mekeMJtcqxZVH2Ck7fxKP7JjR7DtAiMP8MJQIRmVKT/jrZ5PMOk0NwmdZ7sJG+x+jyhnD0nGEoucFxOQMlJTvmJ1OeU/DyC6wQeD4yNoF+FgiFPsj/FnaZ8Hp8v5A35fQFvMJTsTQ36M5Q31eNOyfBbIRXIyPAne9L9vlBKMN0XwpO2Cno83mBKWrpKdvtS06xA0JNqhbx+j9tKDXr8waAn4POlejxBXyAUSIGNcWrIE7CS/f4Uy+f2pLi5+HkE7WKpFoVIpx64TSmLwkSJi8JE5kVhIsOi0NImi8Jpg9h//FsGKCedR226KLRkmnQeJVgUIh0nUvIzyaaLAhc/k/6PjjYfC588Ps5RJzzdcaEV26O461lUfscz+h2rjU/Y/MhVB+YTDAvok0zJxJOMx4yPM/XFU0x98RTzkStHX7S2+ZEr13hoY/MjV67YbyvkyJUwLhUh16qtc+Sa9Tm2ZlH1CU4qJ3Purp9gWgQmM+6utc2TGSaFDkKOXJ8gTASfLmfPCaYD0+7t6Vw4cqXkZwrh7rot4e6ai58pBn6yu5GKdMRKyc8zTPPnMwT9EOkUiLIfpjL1w1Rh8TCNqR+mCYuH6Uz9MD2KkoydEzuDuWRxjJPGZyUmjc8yJ43PMiSNHe3x3TvpuTnJPUfYFmXS2JEpKXkuiqQxUj8o/R2BygpZKZBhWf50nz8tJehOC0BeFUr2BD2U/MwoR5foUSaNXPzMOMOJI8WnZzhOoGYSbrxwXFJXHYYRxuXzZD4H2N5INJOB61k2r7ZoXmYx+D2bKU/Q7RYI/97AUH+l7GuO/u6Rx/42zqFOeqUE7TU2LwVpn+cw+N1JyBeLzCFckF4gXIQJ40ZRcsE8Sf6XfJyLk+QLdp8kubLXuedoRjPP5n5rn+cx+D2fKZObX473TQlzGfriRZvHgN6xvcjg9wIBsb+Awe+FTLG/kDH2ueaB62z+fkyuGOgi5P2YiwgTWkKuVRemk79FzkkAu42LuZNcih3xYoZB303IjnixgEEf83s3hUzASwi5IIw/dYNzoiBisl1COdlKXRX3xNvfxqUOUZaqXcD+Ni5ziLJUHQFEveQQZSlLAFHLHaIs5RZA1MsOUZbyCiDqFYcoS/kEEPWqQ5SlAgKIes0hylJ1BRD1ukOUpeoLIGqFQ5SlGgggaqVDlKUaCSDqDYcoS+0UcNb3pkOUpZoKGFGrHKIstUPAiHrLIcpSzQWMqNUOUZZqKYCoNQ5RlmotgKi1DlGWaiuAqLcdoizVTgBR6xyiLNVBAFHvOERZqqMAotY7RFlqn4B91AaHKEt1EjCiNjpEWaqzAKI2OURZqosAojY7RMGuX8Aa9a5DlKW6CRhRWxyiLNVdAFFbHaIs1VMAUdscoiyVJoCo97i+4pP6hQCEX0ChFhB+k8524g/J689IVkJkbw9/0FfLS5G8DMkvIXk5kl9G8itIfhXJryH5dSSvQPJKJL+B5DeRvArJbyF5NZLXIHktkt9G8jokv4Pk9UjegOSNSN6E5M1IfhfJW5C8FcnbkPwekjMKHJd3gO59wAeADwEfAXYCPgZ8AvgU8Bngc8AXgC8BXwG+BnwD2AX4FvAdYDfge8APgD2AvYB9gP2AHwEHAAcBPwF+BvxS7sTXG1JPAMe4SIz77yFq13KF2/kVbD8E+A3wO+APwJ+AvwB/A/4BHAYcARwF/AuIKw9+AuIBeQB5AfkA+QHnAwoACgIuABQCFAYUAVwIuAhQFFAMkFD+eIdpHzM/OP8r4jZTd8ig+82g+92g+8Og+9Og+8ug+9ug+8egO2zQHTHojhp0/xp0un+z6s4z6OINujwGXV6DLp9Bl9+gO9+gK2DQFTToLjDoChl0hQ26IgbdhQbdRQZdUYOumEGXUJ7vi04yx23WdmNdz3ra42udI9r5K8EannHsnZ2WOkTUlublN8LcItXmXGQcN1T9HrvP7swXFf0Ra1veEy89+pOQizT7cmHhFz39FYvP7pNfGvV3ztuysr6A6h9CLtJtyIUvdOpLtw7nzOeA6QVeR3LSVsD8MrCjhFwE7cWF/3QvQPs3uz77z/AytfLZast9pheznVeejosMu3DhP/PL6OKj9zniixLzRNuWP2L/qbyEXITOPhdWFHaqfNH4bEXls8ofua3kKPtPnU/IRa+zyYU3ajtVgTP67A1lw2dV8Ext+bPVf+oCQi56nx0uAtm0UxU6jc8poWz7rAqb27Jy0H+qCCEXfXKbCytHdqoLT/VZ5dBndVHWtoI57j9VlJCLvrnHhScGO1Ux5LM7FJPPKqE8YVWM8Dv3+gn5/kPC8wFFuL9V6YRc9BfCBeE+SBHm8SpEyMUAIVwQ5nuKMF9RfQi5GCiEC8J1TRHOy6o/IRc35tJ3tFqxPYpw/CrC+FOU/ZdZD3GFf+I6TNY6Da7j4DoPrgPhOhGuI+E6E65D4ToVrmPhOheug+E62Ul1NCTjOhyu0+E6Hq7z4TogrhPiOiKuM+I6JK5T4jomrnPiOiiuk+I6Kq6z7kLyt0j+Dsm7kfw9kn9A8h4k70XyPiTvR/KPSD6A5INI/gnJPyP5FyTvQPL7SP4AyR8i+SMk70Tyx0j+BMmfIvkzJH+O5C+Q/CWSv0Ly10j+JixnTijFIVZKAEoCSgESAaUBZQBJgLKAcoDygAqAigAXoBKgMqAKoCrgYkA1QHVADUBNQC3AJYDagEsBdQCXASyAArgBHoAXkAzwAfyAACAFUBdQD1AfcDmgAaCh3hsAGgOalD/uA20N1WPp+ilHDbVpedr5LLOerNt1xXH0haXGn3+8L+KJ212QSNevV5SnXWep+1D3n7aROp6aMcVTs7Ctx9a2uBP5hv59cFFYR8LyECRn+ofvI7Uqd+LfW4fl5vB3LQAtyx9/Z3nhuNx5Z3nL8jy5WBytnW7cF63C81vr8H2l/wjS/3Aki641CrDMhzpRbElwsHX8ckUo1IrwkKw1E7nUkx6lz21QWwqKiVBc038XCFrKG4TymNsdTPNa6VZqujsjwrvQlR6IheJOjZ+4OPqB2KY8fVKvn7blGQ1uW56+3SsJg4HL7yvLn+hgonZZ3gHbOmwrdbvtmFZY3S7XzV2dbbRm4I3LXp0RcN40bg/tdwBcBegIuBpwDaAT4FpAZ8B1gC6AroDrAd0ANwC6A3oAegJSAWmAdEAQkAEIAXoBegP6APoC+gH6AwYABoZXbsx9+/Kn3gjtYNBdZdB1NOiuNuiuMeg6GXTXGnSdDbrrDLouBl1Xg+56g66bQXeDQdfdoOth0PU06FINujSDLt2gCxp0GQZdyKDrZdD1Nuj6GHR9Dbp+Bl1/g26AQTewPN9NYz1mmzPMucOE3DRuT5YMW6oDUVual6sI84r7hNw07hi7z//dNL461rbQTeNrCLm4X8hN406x+JzlpvG1OW/rlJvGnQm5eEDITePrcuaz8aZxl5y0dZqbxl0JuRgu5Kbx9dn1+Qw3jbtlr60z3jS+gZCLEUJuGneP3ueIN417RNtWFDeNexJy8aCQm8ap0fgc5U3jtMhtRX3TOJ2Qi5FCbhoHy9PdNM4oT3fTOETIxSghN417lae7ady7PN1N4z6EXDwk5KZx3/J0N437lae7adyfkIuHhdw0HlCe7qbxQLrzXTWM8ObYaCG3+AjPBxTh/lY9QMjFGCFcEO6DFGEerx4k5GKsEC4I8z1FmK+ohwi5GCeEC8J1TRHOy2oMIRfjhdw0Jhy/ijD+FGX/6fhtet6JG3kDw7XA/uHaYN9wrbB3uHYYCtcSg+HaYlq41tgzXHvsHq5FdgvXJruGa5XXhWuX14ZrmdeEa5sdw7VOXVPQNYqsT9ZLLbHGXgvCHPTG8mSXWqzcvNRyI10eedKllpvKMxp8U3n6dm8mDAYuv29Gg4Ko3WPBFh+XO1cZW5Tnmeyz9kmsAxAH8iAda9SVYk2k6Z62FdtzrLJN1cG4Gj8IDTjqvtA26/6gvrK4lvCe9i3EgZtd3iMFrObnFoYbDbeW54kn3e6w08RTpHYiDW6uvhjM1BeDY+iLsxUXQ5j6YojAuLiNqS9uC/dFPqTL+th5gcYJxe3hxOUO02JqxfYoTeoghsyIo4O5gvDO8vb2WwfAnQx+38U0+O6KYSKK8Kg7mPribqa+uJuxL1ow9cX05rzjIVb7uMbDs2fX74hXTrhi/zkhx4iEcakIuVaU/acTFn2UaDpRiMtmf0aKJ9wmx5pF1Sc4ebsHxT+50XcyLQL3nOEEIEIzKtJ/R9t8D8OkMMsmdZ7sJG+x+nxveXtOMJRc4Li8FyUnOeUnUp9T8jMU1wk8HhgbQb8KBUOeZH+KO035PD5fyBvy+wLeYCjZmxr0ZyhvqsedkuG3QiqQkeFP9qT7faGUYLovhCdtFfR4vMGUtHSV7PalplmBoCfVCnn9HreVGvT4g0FPwOdL9XiCvkAokAIb49SQJ2Al+/0pls/tSXFz8TMU7WKpFoVIpx64TSmLwjCJi8Iw5kVhGMOiMMcmi8Jpg9h//FsGKCed+2y6KMxhmnTuI1gUIh0nUvJzv00XBS5+7v8/Otp8IHzyOJyjTni640Irtkdx17Oo/I5n9DvmTwzZ/MhVB+YIhgX0QaZk4kHGY8bhTH0xkqkvRjIfuXL0xVybH7lyjYd5Nj9y5Yr9+UKOXAnjUhFyreY7R65Zn2NrFlWf4KRyFOfuegTTIjCKcXetbR7FMCksEnLkOoIwEXyovD0nmEVMu7eHcuHIlZKfhwl31/MJd9dc/Dxs4Ce7G6lIR6yU/Ixmmj9HE/RDpFMgyn4Yw9QPY4TFw1imfhgrLB7GMfXDuChKMnZO7AzmksUxThrHS0waxzMnjeMZksYl9vjunfTcnOQmELZFmTQuYUpKJkSRNEbqB6W/20ZZISsFMizLn+7zp6UE3WkByKtCyZ6gh5KfR8rTJXqUSSMXP4+c4cSR4tMzHCdQEwk3XjguqasOAwnj8lEynwNsb4yYyMD1JJtXWzQvkxj8fowpT9DtFgj/3tRQf6Xsa47+7pHH/jY+Tp30SgnaZTYvBWmfH2fw+yUhXyzyOOGC9AThIkwYN4qSC+ZJ8r/k41ycJJ+w+yTJlb0+eY5mNE/Z3G/t81MMfk9myuQml+d9U8KTDH3xtM1jQO/Ynmbwe4qA2J/C4PczTLH/DGPsc80DrzQ/N2Pg1Vy6LxSrnVMJE1pCrtWrTCd/U52TAHYbp3EnuRQ74mkMg36FkB3xNAGDPlYuVgqZgKcTckEYf2qlc6IgYrKdTjnZSl0V98Tb38ZnHaIsVbuA/W18ziHKUnUEEDXDIcpSlgCiZjpEWcotgKjnHaIs5RVA1CyHKEv5BBA12yHKUgEBRM1xiLJUXQFEveAQZan6Aoia6xBlqQYCiJrnEGWpRgKImu8QZamdAs76XnSIslRTASNqgUOUpXYIGFELHaIs1VzAiFrkEGWplgKIWuwQZanWAoha4hBlqbYCiFrqEGWpdgKIWuYQZakOAoh6ySHKUh0FELXcIcpS+wTso152iLJUJwEj6hWHKEt1FkDUqw5RluoigKjXHKIstUbAGvW6Q5SlugkYUSscoizVXQBRKx2iLNVTAFFvOERZKk0AUW9yfcUn9QsBCL+AQk0h/CadVcQfktefkayEyF4V/qCvlp9F8nNInoHkmUh+HsmzkDwbyXOQ/AKS5yJ5HpLnI/lFJC9A8kIkL0LyYiQvQfJSJC9D8ktIXo7kl5H8CpJfRfJrSH4dySuQvBLJbyD5TSRnFDguvwW61YA1gLWAtwHrAO8A1gM2ADYCNgE2A94FbAFsBWwDvAfYDtgBeB/wAeBDwEeAnYCPAZ8APgV8Bvgc8AXgS8BX5U98vSH1BKDb018YEkfbruUKt/M12P4NYBfgW8B3gN2A7wE/APYA9gL2AfYDfgQcABwE/AT4GfAL4FfAIcBvgN8BfwD+BPwF+BvwD+Aw4AjgKOBfQFyF4x2mfcz84PzXiNtM3TcG3S6D7luD7juDbrdB971B94NBt8eg22vQ7TPo9ht0Pxp0Bwy6gwbdTwbdzwbdLwbdrwbdIYPuN4Pud4PuD4PuT4PuL4Pub4PuH4PusEF3xKA7atD9a9Dp+Mv8opPMJ7tfnxtp/fm6fOxtZRx7d6WlviFqS88ru8oTrrH2+KrpM/h8rGn1bew+uzNf2PNdrG15T7z8ZzchF2/ZlwsLv/Do+1h8dp/88qQfct6WlfVFTHsIuVhtQy58oVNfPrU3Zz4HTC+y2peTtgLml2LtJ+Rijb248J/uRWA/Ztdn/+lfKnYge225z/SCsoOEXKy1Cxf+M7+U7afofY74wsCfo23LH7H/1C+EXLx99rmworBT/RqNz1ZUPqtDkdtKjrL/1G+EXKw7m1x4o7ZT/X5Gn72hbPis/jhTW/5s9Z/6k5CLd84OF4Fs2qn+Oo3PKaFs+6z+Nrdl5aD/1D+EXKzPbS6sHNmpDp/qs8qhz+pI1raCOe4/dZSQiw25x4UnBjvVv8hndygmn5U+JyDyWfUk/O65jUK+B5DwfEAR7m/VakIuNgnhgnAfpAjzePU2IRebhXBBmO8pwnxFrSfk4l0hXBCua4pwXlabCLnYIuTl8oTjVxHGn6Lsv8w6oSv8E9cjstYrcD0D1ztwPQTXS3A9BddbcD0G12twPQfXe3A9CNeLcD0J15twPQrXq3A9C9e7cD0M18twPQ3X23A9DtfrcD0P1/twPRDXC3E9Edcb30PydiTvQPL7SP4AyR8i+SMk70Tyx0j+BMmfIvkzJH+O5C+Q/CWSv0LyW0hejeQ1SF6L5LeRvA7J7yB5PZI3IHkjkjcheTOS30XyFiRvRfK2sJw5oZwHYyAekAeQF5APkB9wvh4bgIKACwCFAIUBRQAXAi4CFAUUAyQAigNKAEoCSgESAaUBZQBJgLKAcoDygAqAigAXoBKgMqAKoCrgYkA1QHVADUBNQC3AJYDagEsBdQCXAawKYR/CvjQK/7RiejyWrv9rZG031vVAVaCdzzLrqrpdVxzfnYjbknjvRLjBfg/AC0gG+AB+QACQAqgLqAeoD7gc0ADQUPcloDGgCaAp4ApAM0BzQAtAS0ArQGtAG0BbwJWAdoD2gA6Aqwx3ItwVTq1deww6r0GXbND5DDq/QRcw6FIMuroGXT2Drr5Bd7lB18Cga2jQNTLoGht0TQy6pgbdFQZdM4OuuUHXwqBradC1MuhaG3RtDLq2Bt2VBl07g669QdfBoLsqF+5EuCvQ3YnwELWl5xVvBTofvxByJyI5dp//uxPhi7UtdCfCT8jFl0LuRARi8TnLnYiUnLd1yp2IuoRcfCXkTkS9nPlsvBNRPydtneZOxOWEXHwt5E5Eg+z6fIY7EQ2z19YZ70Q0IuTiGyF3IhpH73PEOxFNom0rijsRTQm52CXkTsQV0fgc5Z2IZpHbivpORHNCLr4VcieiRQW6OxEtK9DdiWhFyMV3Qu5EtK5AdyeiTQW6OxFtCbnYLeROxJUV6O5EtKtAdyeiPSEX3wu5E9GhAt2diKvozg7VlGZ0XPwgpN5IeD6gCPe36ivCeuMeIVwQ7oMUYR6vdhFysVcIF4T5niLMV9RuQi72CeGCcF1ThPOy2kPIxX4hdyIIx68ijD9F2X9c9cJacbz1wo6QC10NuAbQCXAtoDPgOkAXQFfA9YBugBsA3QE9AD0BqYA0QDogCMgAhAC9AL0BfQB9Af0A/QEDAAMBNwJuAtxsqBd2NNR1rjborjHoOhl01xp0nQ266wy6LgZdV4PueoOum0F3g0HX3aDrYdD1NOhSDbo0gy7doAsadBkGXcig62XQ9Tbo+hh0fQ26fgZdf4NugEE30KC70aC7yaC7ucKJeiHXuM3abqxz/mGb1+Yy7exIWCe9mrBOeg3h3vmIkDppJ8I66bWEddLOhFwcFVInvY6wTtqFsE7alZCLf4XUSa8nrJN2I6yT3kDIRVwLGXXS7oR10h6EddKehFycZxcuItRJUwnrpGmEddJ0Qi7izz4XUdVJg4R10gzCOmmIkIs8Z5OLbNRJexHWSXsT1kn7EHKR9+xwke06aV/COmk/wjppf0Iu8uU2Fzmskw4grJMOJKyT3kjIRf7c4yKmOulNhHXSmwnrpIcJz73PzyUurNgeRXg+oAj3t+pfQi4KCOGCcB+kCPN4hfPQWLkoKIQLwnxPEeYrKh8hFxcI4YJwXVOE87IqQMhFISYuqOukhONXEcafouw/rjrpEObPVQ6CXOgWwK2AwYAhgNsAtwPuANwJuAtwN+AewL2AoYBhgPsA9wMeAAwHjAA8CBgJGAV4CPAwYDRgDGAsYBxgPGAC4BFDnXSQoZ51i0F3q0E32KAbYtDdZtDdbtDdYdDdadDdZdDdbdDdY9Dda9ANNeiGGXT3GXT3G3QPGHTDDboRBt2DBt1Ig26UQfeQQfewQTfaoBtj0I016MYZdOMNugkG3SMV+OqkeszqsUtdJy1nr3Pv09o5iLBOegthnfRWwr1zeZtzkVknHUxYJx1CWCe9jZCLCvbl4qQ66e2EddI7COukdxJyUdGGXJjqpHcR1knvJqyT3kPIhUtInfRewjrpUMI66TBCLioJqZPeR1gnvZ+wTvoAIReVhdRJhxPWSUcQ1kkfJOSiipA66UjCOukowjrpQ4RcVBVSJ32YsE46mrBOOoaQi4uF1EnHEtZJxxHWSccTclFNSJ10AmGd9BHCOmk5wnPv6kJqEITnA4pwf6sqEnJRQwgXhPsgRZjHq8qEXNQUwgVhvqcI8xV1MSEXtYRwQbiuKcJ5WdUg5OISIXVSwvGrCONPXSKgTjqIuU46EXKhRwGTAI8BHgc8AXgS8BRgMuBpwBTAM4CpgGmA6YBnAc8BZgBmAp4HzALMBswBvACYC5gHmA94EbAAsBCwCLDYUCedaKhnPWrQTTLoHjPoHjfonjDonjTonjLoJht0Txt0Uwy6Zwy6qQbdNINuukH3rEH3nEE3w6CbadA9b9DNMuhmG3RzDLoXDLq5Bt08g26+QfeiQbfAoFto0C0y6BZX4K2TDmKok9YXUiedSFgnfZSwTjqJcO98uZA66WOEddLHCeukTxBy0UBInfRJwjrpU4R10smEXDQUUid9mrBOOoWwTvoMIReNhNRJpxLWSacR1kmnE3LRWEid9FnCOulzhHXSGYRcNBFSJ51JWCd9nrBOOouQi6ZC6qSzCeukcwjrpC8QcnGFkDrpXMI66TzCOul8Qi6aCamTvkhYJ11AWCddSMhFcyF10kWEddLFhHXS+oTn3i2E1CAIzwcU4f5WNSTkoqUQLgj3QYowj1dNCLloJYQLwnxPEeYrqhkhF62FcEG4rinCeVm1JOSijZA6KeH4VYTxpyj7T9dDCqO+079fWy4u7mhY7ozka8od/4lrq63Qv7cOy0sgT1kKWAbIF24/Pu7Uh7rGs6wCT1zF0drpxn3xUoXjP5eHa6//FcP0PxzJotN/dF4Wo6iDfhlZoSgUeokw4V/ORG48cf9R+vwyakvBwSgcFOq/CwQt5Q3CUZ/bHUzzWulWaro7I8ULe22v2+tJD6bD4UcgVYWsUGp6Sihw3C49EAvFnRo/cXH0A/HlCrQTVObzSgVGg1+pQN/uq4TBwOX3qxVOdDBRu0ZbKSaAVyvQt/sacbBmTta6Xa5bSPo2w3IG3rjs1RkB562p16H9FYCVgDcAbwJWAd4CrAas0f99wNuAdYB3AOsBGwAbAZsAmwHvArYAtgK2Ad4DbAfsALwP+ADwIeAjwE7Ax4BPwis35v51w+2WFQbdSoPuDYPuTYNulUH3lkG32qBbY9CtNejeNujWGXTvGHTrDboNBt1Gg26TQbfZoHvXoNti0G016LYZdO8ZdNsNuh0G3fsG3QcG3YcG3UcG3U6D7mOD7pMKvLemljDMud2E3Jp6nfDW1ArCW1MrCfOKG4TcmnqD8NbUm4S3plYRctFdyK2ptwhvTa0mvDW1hpCLHkJuTa0lvDX1NuGtqXWEXPQUcmvqHcJbU+sJb01tIOQiVcitqY2Et6Y2Ed6a2kzIRZqQW1PvEt6a2kJ4a2orIRfpQm5NbSO8NfUe4a2p7YRcBIXcmtpBeGvqfcJbUx8QcpEh5NbUh4S3pj4ivDW1k5CLkJBbUx8T3pr6hO58V3UjrIL3EnIjgfB8QBHub1UPQi56C+GCcB+kCPN4lUbIRR8hXBDme4owX1EZhFz0FcIF4bqmCOdl1ZuQi35Cbk0Rjl9FGH+Ksv90/LaFoogr3N4n4VrgznBt8MNwrfD9cO1we7iWuC1cW9wSrjVuDtceN4ZrkevDtcl14Vrl2nDtcnW4lrkqXNt8I1zr1DUFXaPI+mS91BJr7C0lzEE/rUB2qcXKzUstn9LlkSddavmsAqPBn1Wgb/dzwmDg8vtzNCiI2j0WbPFxuXOVcWkFnsk+a5/EOgBxIH+hY426UqyJNL0H3ortOVbZpupgXI3/Ag046r7QNuv+oL6yiPsiVhu/JA7c7PIeKWA1P18y3Gj4qgJPPOl2h50mniK1E2lwc/XF10x98XUMfXG24uIbpr74RmBc7GLqi13hvsiHdFkfOy/QOKH4Npy4fGdaTK3YHqVJ/YIhM+LoYK4g3F3B3n7rANjN4Pf3TIPv+xgmogiP+o6pL35g6osfGPtiKVNf3N2CdzzEah/XeLjn7Pod8coJV+zfK+QYkTAuFSHXirL/dMKijxJNJwpx2ezPSPGE2+RYs6j6BCdve1D8kxu9m2kR2HOGE4AIzahI/x1t8x6GSeF+m9R5spO8xerz3gr2nGAoucBxuRclJznlJ1KfU/KzD9cJPB4YG0G/CgVDnmR/ijtN+Tw+X8gb8vsC3mAo2Zsa9Gcob6rHnZLht0IqkJHhT/ak+32hlGC6L4QnbRX0eLzBlLR0lez2paZZgaAn1Qp5/R63lRr0+INBT8DnS/V4gr5AKJACG+PUkCdgJfv9KZbP7Ulxc/GzD+1iqRaFSKceuE0pi8J+iYvCfuZFYT/DojDcJovCaYPYf/xbBignnR9tuigMZ5p0fiRYFCIdJ1Lyc8CmiwIXPwf+j442D4ZPHn/iqBOe7rjQiu1R3PUsKr/jGf2O1cafbX7kqgPzZ4YF9BemZOIXxmPGn5j64lemvviV+ciVoy8etPmRK9d4GGnzI1eu2B8l5MiVMC4VIddqlHPkmvU5tmZR9QlOKg9x7q5/ZloEDjHurrXNhxgmhTFCjlx/JkwEf6tgzwlmDNPu7bdcOHKl5Od3wt31KMLdNRc/vxv4ye5GKtIRKyU/fzDNn38Q9EOkUyDKfviTqR/+FBYPfzH1w1/C4uFvpn74O4qSjJ0TO4O5ZHGMk8Z/JCaN/zAnjf8wJI3j7PHdO+m5OckdJmyLMmkcx5SUHI4iaYzUD0p/PllZISsFMizLn+7zp6UE3WkByKtCyZ6gh5KfIxXoEj3KpJGLnyNnOHGk+PQMxwnUUcKNF45L6qrDJ4Rx+S+ZzwGWqoP+1NVRBq7jKtq72qJ50TZS+31eRZ7xrtstEP69raH+StnXHP3dI4/9bYwnjlkxQTvB5qUg7XM8g9+PCPliERyYsfqchy7IFWHcKEoumCfJ/5KPc3GSzGP3SZIre817jmY0+Wzut/Y5H4Pf+ZkyufwVed+UkJehL863eQzoHdv5DH4XEBD7BRj8LsgU+wUZY59rHpjU4tyMgcdy6b5QrHZeQJjQEnKtHmM6+bvAOQlgt7EQd5JLsSMuxDDonxSyIy4kYNDHysVTQibgwoRcEMafeso5URAx2RamnGylrop74u1vYxGHKEvVLmB/Gy90iLJUHQFEXeQQZSlLAFFFHaIs5RZAVDGHKEt5BRCV4BBlKZ8Aooo7RFkqIICoEg5RlqorgKiSDlGWqi+AqFIOUZZqIICoRIcoSzUSQFRphyhL7RRw1lfGIcpSTQWMqCSHKEvtEDCiyjpEWaq5gBFVziHKUi0FEFXeIcpSrQUQVcEhylJtBRBV0SHKUu0EEOVyiLJUBwFEVXKIslRHAURVdoiy1D4B+6gqDlGW6iRgRFV1iLJUZwFEXewQZakuAoiq5hBlqTUC1qjqDlGW6iZgRNVwiLJUdwFE1XSIslRPAUTVcoiyVJoAoi6pSG/jsYf6hQCEX0ChChB+k05t4g/J689IVkJk1w5/0FfLRZB8IZIvQnJRJBdDcgKSiyO5BJJLIrkUkhORXBrJZZCchOSySC6H5PJIroDkikh2IbkSkisjuQqSqyL5YiRXQ3J1JNdAck0k10LyJUjOKHBcvhR0dQCXASyAArgBHoAXkAzwAfyAACAFUBdQD1AfcDmgAaChjhdAY0ATQFPAFYBmgOaAFoCWgFaA1oA2gLboM77TUWxcVeGEnR2Q3B7J7ZB8JZLbIrkNklsjuRWSWyK5BZKbI7kZkq9AclMkN0FyYyQ3QnJDJDdA8uVIro/kekiui+QUJAeQ7EeyD8nJSPYi2YNkd4UTX17RKPzTivFx2nPac9pz2nPac9pz2nPak9WeO4W2vdR02vaUIrYvNTMXvBnlhTch+UYkD0TyACT3R3I/JPdFch8k90ZyLySHkJyB5CCS05GchuRUJPdEcg8kd0fyDUjuhuTrkdwVyV2QfB2SOyP5WiR3QvI1SL4ayR2R/AiSJyB5PJLHIXkskscgeTSSH0byQ0geheSRSH4QySOQPBzJDyD5fiTfh+RhSB6K5HuRfA+S70byXUi+E8l3IPl2JN+G5CFIHozkW5F8C5IHIXkxkhcheSGSFyD5RSTPR/I8JM9F8gtInoPk2UieheTnkTwTyTOQ/BySn0XydCRPQ/JUJD+D5ClIfhrJk5H8FJKfRPITSH4cyY8heRKSH0XyRLwfRucUDZDcEMmNkNwYyU2Q3BTJVyC5GZKbI7kFklsiuRWSWyO5DZLbIvlSJNdB8mVItpCskOxGsgfJXiQnI9mHZD+SA0hOQXJdJNdDcv2wvCju+HMl/N4O0B7QAXAVoCPgasA1gE6AawGdAdcBugC6Aq4HdAPcAOgO6AHoCUgFpAHSAUFABiAE6AXoDegD6AvoB+gPGAAYCLgRcBPgZsAgwC2AWwGDAUMAtwFuB9wBuBNwF+BuwD2AewFDAcMA9wHuBzwAGA4YAXgQMBIwCvAQ4GHAaMAYwFjAOMB4wATAI4CJgEcBkwCPAR4HPAF4EvAUYDLgacAUwDOAqYBpgOmAZwHPAWYAZgKeB8wCzAbMAbwAmAuYB5gPeBGwALAQsAiwGLAEsBSwDPASYDngZcArgFcBrwFeB6wArAS8AXgTsArwFmA1YA1gLeBtwDrAO4D1gA2AjYBNgM2AdwFbAFsB2wDvAbYDdgDeB3wA+BDwEWAn4GPAJ4BPAZ8BPgd8AfgS8BXga8A3gF2AbwHfAXYDvgf8ANgD2AvYB9gP+BFwAHAQ8BPgZ8AvgF8BhwC/AX4H/AH4E/AX4G/AP4DDFY+/TyzzSyUzn/jwz0bhn1Zsj9qaBH2WRNeeryyM4bIn7CVq14pHfXCk4vGfRyuivjmPuGP0NzVTGc9l35GKp7Yb8/twKtIWTTIDWLc7jJGrowx9Eefi6QvdLldfZA5A6r6YIuTLLs9z0fXl+mZ0bU2x+StcuOaTqWfX7/RIb1/nmjum2fxbybXfeqxQ+z09l+YJK7ZHEcalIuRaUfbfmV5IG5fN/ow0jnCb1LF6hDgnyXziXUISSJw8YKOzaXPEF9Jqm3H7me3GOinMtMm3lkezCFL5nMdlz8lqJtNrD7S/w+JOfrLLT6Q+p+QnL+JHeTwwNoJ+FQqGPMn+FHea8nl8vpA35PcFvMFQsjc16M9Q3lSPOyXDb4VUICPDn+xJ9/tCKcF0X2ga4QtpufjJG+YnczGgnu9al4NTmcQT3FP54Aq3kw+E/IDzAQUABQEXAAoBCgOKAC4EXAQoCigGSAAUB5QAlASUAiQCSgPKAJIAZQHlAOUBFQAVAS5AJUBlQBVAVdfxDsP9qe3JPHn879VRBt35Bl0Bg66gQXeBQVfIoCts0BUx6C406C4y6IoadMUMugSDrrhBV8KgK2nQlTLoEg260gZdGYMuyaAra9CVM+jKG3QVDLqKBp3LoKtk0FU26KoYdFXDOvxk92XfEV8j54q9rYyQfiyVn6gtPa+c76LzcVYu5SE59/lY06pA7D67MxPzgrG25T2R5F9AyMVs+3Jh4Y1NoVh8dp+8SSqc87asrBuuIoRczLEhF5BanbLJvDBnPgdMG9aLctJWwLz5LUrIxQv24sJ/ug1/sez67D/94UFC9tpyn+kgojghF3PtwoX/zIcvJaL3OeKBaMlo2/JH7D9VipCLeWefCysKO1ViND5bUfmsSkduKznK/lNlCLmYfza58EZtp0o6o8/eUDZ8VmXP1JY/W/2nyhFy8eLZ4SKQTTtV+dP4nBLKts+qgrktKwf9pyoScrEgt7mwcmSncp3qs8qhz6pS1raCOe4/VZmQi4W5x4UnBjtVFeSzOxSTz6qqi+4cskRzOi4WCXlrKeH5gCLc36o5hG8tXSyEC8J9kCLM49U8Qi6WCOGCMN9ThPmKWkDIxVIhXBCua4pwXlaLCblYJuQSCeH4VYTxpyj7j6te2Iq5XngxCNUA1QE1ADUBtQCXAGoDLgXUAVwG0P8nBXADPAAvIBngA/gBAUAKoC6gHqA+4HJAA0BDQCNAY0ATQFPAFa64U+qF2p6sdZ1qBl11g66GQVfToKtl0F1i0NU26C416OoYdJcZdJZBpww6t0HnMei8Bl2yQecz6PwGXcCgSzHo6hp09Qy6+gbd5QZdA4OuoUHXyKBrbNA1MeiaGnRXuPjrhTqeY20rs15YjagtPa9Ud9H5uFZIvbBG7D7/Vy+sGWtbqF5Yi5CLt4XUCy+Jxecs9cLaOW/rlHrhpYRcrBNSL6yTM5+N9cLLctLWaeqFFiEX7wipF6rs+nyGeqE7e22dsV7oIeRivZB6oTd6nyPWC5OjbSuKeqGPkIsNQuqF/mh8jrJeGIjcVtT1whRCLjYKqRfWddHVC+u56OqF9Qm52CSkXni5i65e2MBFVy9sSMjFZiH1wkYuunphYxddvbAJIRfvCqkXNnXR1QuvIOy/4oT1wi1CzuIJzwcU4f5WrSM8i98qhAvCfZAizOPVBkIutgnhgjDfU4T5itpMyMV7QrggXNcU4bysthJysV1IvZBw/CrC+FPbBdQLa8bx1gubgdAc0ALQEtAK0BrQBtAWcCWgHaA9oAPgKkBHwNWAawCdANcCOgOuA3QBdAVcD+gGuAHQHdAD0BOQCkgDpAOCrrhT6oXanqx1neYGXQuDrqVB18qga23QtTHo2hp0Vxp07Qy69gZdB4PuKoOuo0F3tUF3jUHXyaC71qDrbNBdZ9B1Mei6GnTXG3TdDLobDLruBl0Pg66nQZdq0KUZdOkGXdB1ol7INW6zthvrnP+NzWtzmXbqcRxrW5l10uZEbWleWrjofNwlpE7aMnaf/6uTtoq1LVQnbU3IxbdC6qRtYvE5S520bc7bOqVOeiUhF98JqZO2y5nPxjpp+5y0dZo6aQdCLnYLqZNelV2fz1An7Zi9ts5YJ72akIvvhdRJr4ne54h10k7RthVFnfRaQi5+EFIn7RyNz1HWSa+L3FbUddIuhFzsEVIn7eqiq5Ne76Krk3Yj5GKvkDrpDS66Oml3F12dtAchF/uE1El7uujqpKkuujppGiEX+4XUSdNddHXSoIvuPOQbwnPvH4XUIAjPBxTh/lZ9R8jFASFcEO6DFGEer34g5OKgEC4I8z1FmK+ofYRc/CSEC8J1TRHOy+oAIRc/C6mTEo5fRRh/irr/qGstus4yMOkEL1S2ctV0r2X+DGgGCCFAL0BvQB9AX0A/QH/AAMBAwI2AmwA3AwYBbgHcChgMGAK4DXA74A7AnYC7AHcD7gHcCxgKGAa4D3A/4AHAcFfcKTVdbU/W2lvIoOtl0PU26PoYdH0Nun4GXX+DboBBN9Cgu9Ggu8mgu9mgG2TQ3WLQ3WrQDTbohhh0txl0txt0dxh0dxp0dxl0dxt09xh09xp0Qw26YQbdfQbd/QbdAwbdcBdfTVePWT12qWu68S1l1HT1OI61rcyaboioLc1LLxedj3lszkVmTbd37D7/V9PtE2tbqKbbl5CLvPbl4qSabr9YfM5S0+2f87ZOqekOIOQinw25MNV0B+bMZ2NN98actHWamu5NhFzktxcXp63p3pxdn89Q0x2UvbbOWNO9hZCL8+3CRYSa7q3R+xyxpjs42raiqOkOIeSiwNnnIqqa7m3R+BxlTff2yG1FXdO9g5CLgmeTi2zUdO900dV073LR1XTvJuTigrPDRbZruve46Gq697roarpDCbkolNtc5LCmO8xFV9O9z0VX072fkIvCucdFTDXdB1x0Nd3hLrrzEHxuESsXRXKJCyu2RxGeDyjC/a3KR8jFhUK4INwHKcI8XhUg5OIiIVwQ5nuKMF9RhQi5KCqEC8J1TRHOy+pCQi6KMXFBXdMlHL+KMP4UZf/p+O0IRRFXuD2dY+icRedq97mO13h0Dq1zcp3j672N3ivpvZfec+o9rN4T67MAfbagzyr0GY0+89FnSPrsTJ/F6bM9faapz0j1mas+a9Zn1/osXNcAdE0hwxV3yhOfhdNYY69zObq2RrhOtKXg3ArOcfTfBYKW8gbhJMbtDqZ5rXQrNd2dkeKFrZDX7fWkB9NhbxpIVSErlJqeEgocb0u/+LpQ3In6FH6oa2HYbivGB9v7oIvRYN04dbsjXXTBwOX3SNeJDiZq91iwxceZ37JO7QMecFaMj8FcsgGIA3mUC/qBulKsiTR9qtiK7VFcb20/1gmnCYpY+0LbrPsjnrEvYrXxIdfZvTkVKWA1Pw+56Ll52MUTT7rdYaeJp0jtRBrcXH0xmqkvRsfQF2crLsYw9cUYgXExlqkvxob7Ih/SZX3svEDjhGKc6/jP8S7DYmrF9ihN6ijXif8YlQMcHcwVhBNc9vZbB8AEBr8fcfEMPt3usHC71H0xnqkvJjL1xUTGvtATDkdfVG7JOx5itY9rPFQ5u35HvHLCFftVhRwjEsalIuRaUfafTlj0UaLpRCEum/0ZKZ5wmxxrFlWf4OTtURdK5qiNpkwE8CKAjc6mzSrSf0fbjNvPbDfWSaGGTeo82UneYvV5ksueEwwlFzgutb/D4k5+sstPpD6n5Ocx1JbyeGBsBP0qFAx5kv0p7jTl8/h8IW/I7wt4g6Fkb2rQn6G8qR53SobfCqlARoY/2ZPu94VSgum+EJ60Y31fMhc/j7lO7GKpFoVIpx64TSmLwuMugYsCNppjUcDtZ7Yb6wCsZZNF4bRB7D/2yaoQ5aTzhMuei0ItpklH+zss7uQnu/xEOk6k5OdJlz0XBS5+nnT9/xxtPuU6/nOyi6FOeLrjQiu2R3HXs6j8jmf0O1Ybn2buQyu2R+nAfNpFz80UF8+koNsdFm6Xui8mM/XFM0x98YyL98iVoy9q2/zIlWs8XGrzI1eu2K8j5MiVMC4VIdeqjnPkmvU5tmZR9QlOKqe6GHfXlIkAXgSw0dS7a20zbj+z3VgnBbeQI1fMWaw+T3PZc4JxM+3etL/D4k5+qI9cKfmZ7qLbXdch3F1z8TPdwE92N1KRjlgp+XnWxdMPzxL0Q6RTIMp+eI6pH54TFg8zmPphhrB4mMnUDzNdkUsydk7sDOaSxTFOGp93CUwasdEcSSNuP7PdWAPda4/v3knPzUluFmFblEmjlykp0f4Oizv5ye53Iyn9vfjKClkpkGFZ/nSfPy0l6E4LQF4VSvYEPZT8zHbRJXqUSSMXP7Ndpz9xpPj0DMcJ1BwXXdzHoSe7SUGktocTxuULZD4H2L7DeQ4D13NdtGsEtd+al7kMfs9z8Yx33W6B8O8dDfVXyr7m6O8eeexv43wXsY1SgtZn81KQ9nk+g99+IV8sggMzVp9fpAtyRRg3ipIL5knyv+TjXJwkCeOHZ5Lkyl4XuM7NjGahzf3WPi9k8HuRiyeT0+1yvilhAUNfLLZ5DOgd22IGv5fY3G8d+0sY/F7q4on9pYyxzzUP1G15bsZAvVy6LxSrnctcdH1JyLWqx3Tyt8zlnARw2/iSiznJpdgRayOp220gZEdMSBDboI+Vi4ZCJuDlLrr+I4w/1dA5URAx2RLGjyV2VdwTb38bX3Y5RKnaBexv4ysuhyhVRwBRr7ocopQlgKjXXA5Ryi2AqNddDlHKK4CoFS6HKOUTQNRKl0OUCggg6g2XQ5SqK4CoN10OUaq+AKJWuRyiVAMBRL3lcohSjQQQtdrlEKV2CjjrW+NyiFJNBYyotS6HKLVDwIh62+UQpZoLGFHrXA5RqqUAot5xOUSp1gKIWu9yiFJtBRC1weUQpdoJIGqjyyFKdRBA1CaXQ5TqKICozS6HKLVPwD7qXZdDlOokYERtcTlEqc4CiNrqcohSXQQQtc3lEKXWCFij3nM5RKluAkbUdpdDlOougKgdLoco1VMAUe+7HKJUmgCiPnAR2qiNS4w78Tk//XsGdMLRsHy04gn5CJKXxB+XM/9/H4JRHwF2Aj52ndBnPtQvG2hD95Yh9SHq0Fg/U/eJiz6AOPqvLWH/fUTYf58S9p8ptjU/mTH8KZJ3Ivlj18mx/Rn8/jngC8CXrpO/y5d6cOv/lv4ykDjadi1XuJ2vQPga8A1gF+BbwHeA3YDvAT8A9gD2AvYB9gN+BBwAHAT8BPgZ8AvgV8AhwG+A3wF/AP4E/AX4G/AP4DDgiO5PwL+u4x2GPxSv7SkQd7Lua4PuG4Nul0H3rUH3nUG326D73qD7waDbY9DtNej2GXT7DbofDboDBt1Bg+4ng+5ng+4Xg+5Xg+6QQfebQfe7QfeHQfenQfeXQfe3QfePQXfYoDti0B016P518X6Bjx67WduNdT5s0pJnPclLbKcex7G2lXHsfZyW+pqoLc3LNy46H5vanIuM44aqXbH77M58CdG3sbblPfFCo+8IubjCvlxY+CVOu2Px2X3yC6G+z3lbVtaXS/1AyEUzG3LhC536Qq09OfM5YHo5196ctBUwv+hrHyEXze3Fhf90Lzfbn12f/ad/UdqP2WvLfaaXrh0g5KKFXbjwn/lFcwej9zniSxB/irYtf8T+Uz8TctHy7HNhRWGn+iUan62ofFa/Rm4rOcr+U4cIuWh1NrnwRm2n+u2MPntD2fBZ/X6mtvz/Y+9K4Gyu3v4YiSypiIpsY4zd79x7Z+4dZM2+RpISZubOVfalKMqafStrUYiyZ6tQSYpKKoqKKIkiVERRlN7ncOfvMX7Mcp/nOs/rdz+f571f5z/v6XnO99l+55x7b4bWT50i5KLh1eHCl0E91V+XsTk+kGGb1d/2c1mZWD91mpCLRuHmwsqUnurMpTarTNqs/kk9lz/T66f+JeSicfi4cIegpzqLbHYFQrJZ/VeMbj+kFuH36TUR8t2GhPsDivD5VtUh5KKpEC4In4MUYR+v6hNy0UwIF4T9niLsV1QjQi6aC+GCsK4pwrysmhJycU+Yvn/VCu2lCONXEfqfkrJ+hD9wofAPBoTqfxHFac+w9WtQ8F3/u2SxC2dbUQiXQLg4wsUQLopwEYTvRLgwwoUQvgPh2xG+DeGCCBdA+FaE8yOcD+FbEL4Z4ZsQzovwjQjnQTg3wrkQzonwDQjnQDg7wtcjnA3huxGujXAthGsiXAPh6ghXQ/guhKsiXAXhygjHI+xD2ItwHMKxCHsQdiPsQlghbCFcCeGKCFdAuDzC5RAui3AZhEsjHINwKYSjEfYjnIRwIsIJCHdAuD3C7RB+COG2CD+I8AMIt0H4foRbI3wfwq0Qvhfhlgi3QPgehJsj3Azhpgg3Qbgxwo0QbohwA4TrI1wP4boI10FY57cUvBqNr0H4TYTfQvhthNci/A7C6xB+F+H1CL+H8PsIb0B4I8IfIPwhwh8hvAnhjxHejPAnCH+K8GcIb0F4K8KfI/wFwtsQ3o7wlwh/hTC+B4LvieB7JPieCb6Hgu+pHEIY33PB92DwPRl8jwbfs8H3cPA9nR8Q3ovwfwjjexr4Hge+54HvgeB7IvgeCb5ngu+h4Hsq+B4LvueC78HgezL4Hk3KPZtnIs6/shSPiIgEyQpyHUg2kOtBsuvYALkBJCdILpDcIHlAbgTJC3ITyM0gt4DkA8kPcitIAZCCILeB3A5yB0ghkMIgd4IUASkKUgykOEgJkCiQkiDRIKVAYkBKg5QBKQtSDqQ8SAWQiiCVQCwQBeICcYN4QGJB4kC8ID6QeJDKIFVAqoLcBVINpDpIDZCaILVAaoPcDVIHpC5IPZD6IA1AGoI0AmkM0gSkKUgzkOYg94C0AGkJci9IK5D7QFqD3A/SBuQBkAdB2oI8BNIOpD1IB5AEkESQJBA/SDJIAKQjyMMgj4B0AukM0gWkK0g3kO4gPUB6gvQC6Q3yKMhjIH1A+oI8DvIESD+Q/iBPgjwFMgBkIMggkMEgQ0CGgjwNMgxkOMgIkJEgo0BGg4wBGQsyDmQ8yASQZ4oHfSjoSzWC71ZIr3hL30HSknreUPvZZ4vT9rMp97H0vMUiONbi/H2sZoUj/vei0p/r3qe+z8x573MirPUkkMkgU0CmgkwDeQ7keZDpIDNAXgB5EWQmyCyQ2SAvgcwBmQvyMsgrIPNA5oMsAFkIsghkMcgSkFdBloIsA1kOsqL4+QXD3Gt9UnJrytgkm7HJNmNTbMam2oxNsxl7zmbseZux6TZjM2zGXrAZe9FmbKbN2Cybsdk2Yy/ZjM2xGZtrM/ayzdgrNmPzbMbm24wtsBlbaDO2yGZssc3YEpuxV23GltqMLbMZW24ztiI4FhHBk2d07KaeN9Scm1hfxr1PHcehzpVy73MS0Vyal8nF6WxMMpyLlHufU0K3+X/3PqeGOhe69zmNkAu/uVxcdO/zuVBsTnXv8/nMz3XJvc/phFwkG8iF3b3PGZmz2fbe5wuZmesy9z5fJOQiYBYXl733OTOjNl/h3uesjM11xXufswm56GgKF2nc+3wp/Tanee9zTnrnSse9z7mEXDx89blI173Pl9Njczrvfb6S9lzpvvc5j5CLR64mFxm49zm/ON29zwXF6e59LiTkotPV4SLD9z4XFae797m4ON29zyWEXHQONxeZvPf5anG6e59Li9Pd+1xGyEWX8HER0r3P5cXp7n2uKE63H4L3LULlomuYuLBCeynC/QFF+Hyrkgm56CaEC8LnIEXYx6uHCbnoLoQLwn5PEfYrqjMhFz2EcEFY1xRhXlbdCLnoycQF9b1FwvhVhP6nKNdP+2/rLBfOd3WPoXsW3avp3k/3krqH1j257vH1s41+VtLPXvqZUz/D6mdivReg9xb0XoXeo9F7PnoPSe+d6b04vben9zT1Hqnec9V7zXrvWu+F6zMAfaagzyhSvyJTcRry54UK0821EvVjCvatYB9H/53PbymPH3ZiXC5/osdKshKSXMnxHngU8rg87iR/Ejyb+hJUwAokJMUHfOfnygZz5Iq4cD6FX9RnYSvp+kgL6/tacUaF9eTU875O+EDCZffrKCiI5j3nbJERF4KL09kIv8DMslGXLACxI7+hfY36pFgTaXfrxwrtde5km2qB8Wn8GyjgqNdC66zXI5JxLULVcVVxWsfNKO9pOazmZ1Vxem5WF+fxJz3voMv4U1rzpBXcXGuxhmkt1oSwFlfLL95kWos3BfrFW0xr8VZwLbKhsdQvkws0bijeDjYua+2KqRXaS2lS3yh+4T9GZQDHAnM54TvFzbZbO8A7DHavYwq+dSEkojReai3TWrzLtBbvMq6FTjgcazGkPm88hKofVzwMvbp2p3nlhMv3nxayjUjol4qQa0W5frphwV+3bfdK738rLX/Cc3LULKo1wc3beuT/5Eq/w1QE1l9hByCNaVRa/x2t83qGpDDSkHOejDRvodr8XnEzEwwlF9gv30PNSWb5SWvNKfl5H58TuN0QG36vCvgD7lhvvCtRxbnj4gKegDfO5/EHYj0Jfm+y8iS4XfHJXiugfMnJ3lh3kjcuEO9PigvgpK38brfHH5+YpGJdcQmJls/vTrACHq/bZSX43V6/3+2Li0twu/1xvoAvHh6MEwJunxXr9cZbcS53vIuLn/fRUyxVUUhr1wPPKaUobJBYFDYwF4UNDEVhtCFF4bJO7D33yaoAZdLZaGhRGM2UdDYSFIW0thMp+fnA0KLAxc8H/4+2Nj8sfv79o+IM54SX2y60Qnsp7vMsKrsjGe0OVcdNhm+5asfcxFBAP2ZqJj5m3Gb8iGktNjOtxWbmLVeOtRhr+JYrVzyMM3zLlcv3xwvZciX0S0XItRrvbLmmfp2rWVRrgpvKTzifrjcxFYFPGJ+utc6fMCSFiUK2XDcRNoKfFjczwUxkenr7NAxbrpT8fEb4dD2e8Omai5/PbPjJ6INUWluslPxsYcqfWwjWIa1dIMp12Mq0DluF+cPnTOvwuTB/+IJpHb5Ix5GMyY2djbpkfoybxm0Sm8ZtzE3jNoamcbIZ372TFM4kt51wLsqmcTJTU7I9HU1jWuug9Of2lRWw4qHDsrxJcd7EeL8r0Qd9VSDW7XdT8vNlcbpGj7Jp5OLnyyvsOFJ8eoZjB+orwgcv7JfUpw4rCP3yazKbfSynDvpTV18xcL2DuIGgtlvzsoPB7p1MfYKeN0fw361x10O7Lv+rx9Tr3T6r+Tp+Q930SnHaqYYfBWmbv2Gwe5qQLxb5hrAg7SIswoR+oyi5YE6S/2s+rsUkucv0JMnVve6+Rjuabw23W9v8LYPd3zF1ct8V5/2lhN0Ma7HHcB/QT2x7GOz+XoDvf89g914m39/L6PtceWB6/WvTB2aE6b5QqHr+QNjQEnKtZjDt/P3g7ASw67iPu8mleCLexxD0M4U8Ee8TEPShcjFLSALeT8gFof+pWc6Ogohku58y2UqtiocizdfxR4coS5XPYb6OPzlEWaqiAKIOOERZyhJA1EGHKEu5BBD1s0OUpTwCiDrkEGWpOAFEHXaIspRPAFFHHKIsVVkAUb84RFmqqgCifnWIslQ1AUT95hBlqRoCiDrqEGWpnQL2+o45RFmqtoCI+t0hylLbBUTUcYcoS9UVEFEnHKIsVV8AUX84RFmqoQCi/nSIslRjAUSddIiyVFMBRJ1yiLJUcwFE/eUQZakWAoj62yEKjhAEPEeddoiyVCsBEXXGIcpSrQUQ9Y9DlKXaCCDqX4coS20QUKPOOkRZqq2AiPrPIcpS7QQQFVHCIUp1EEBUFocoSyUKICqyBLGOtAomWvrLDLSknjfUz6tlJTRc65bywVw9b7GIi1/UP45A+GUcCn+5Qahreh3xmp77vGjkBcfXn2PL4WAHX6NYx1cK1h/DS8E/IXwA4YMI/4zwIYQPI3wE4V8Q/hXh3xA+ivAxhH9H+DjCJxD+A+E/ET6J8CmE/0L4b4RPI3wG4X8Q/hfhswj/h3AEWtssCEcinO/OCzg/wrciXADhggjfhvDtCN+BcCGECyN8J8JFEC6KcDGEiyNcAuEohEsiHI1wKYRjEC6NcBmEyyJcDuHyCFdAuCLClRC2EFYIuxB2I+xBOBbhOIS9CPsQjke4MsJVEK6K8F0IV0O4OsI1EK6JcC2EsxRBfoVwVoSvQzgbwtcjnB3hHAjfgHBOhHMhnBvhPAjfiHBehG9C+GaEb0E4H8L5Eb4V4QIIF0T4NoRvR/gOhAshXBjhOxEugnBRhIshXBzhEghHIVwS4WiESyEcg3BphMsgXBbhcgiXR7gCwhURroSwhXCW4sh/EM6K8HUIZ0P4eoSzI5wD4RsQzolwLoRzI5wH4RsRzovwTQjfjPAtCOdDOD/CtyJcAOGCCN+G8O0I34FwIYQLI3wnwkUQLopwMYSLI1wC4SiESyIcjXAphGMQLo1wGYTLIlwO4fIIV0C4IsKVELYQVgi7EHYj7EE4FuE4hL0I+xCOR7gywlUQrorwXQhXQ7g6wjUQrolwLYRrI3w3wnUQrotwPYTrI9wA4YYIN0K4McJNEG6KcDOEmyN8D8ItEG6J8L0It0L4PoRbI3w/wm0QfgDhBxFui/BDCLdDuD3CHRBOQDgR4SSE/QgnIxxAuCPCDyP8CMKdEO6McBeEuyLcDeHuCPdAuCfCvRDujfCjCD+GcB+E+yL8OMJPINwP4f4IP4nwUwgPQHggwoMQHozwEISHIvw0wsMQHo7wCIRHIjwK4dEIj0F4LMLjEB6P8ASEn0G4SVEULwg3Q7g5wvcg3ALhlgjfi3ArhO9DuDXC9yPcBuEHEH4Q4bYIP4RwO4TbI9wB4QSEExFOQtiPcDLCAYQ7Ivwwwo8g3Anhzgh3Qbgrwt0Q7o5wD4R7ItwL4d4IP4rwYwj3Qbgvwo8j/ATC/RDuj/CTCD+F8ACEByI8COHBCA9BeCjCTyM8DOHhCI9AeCTCoxAejfAYhMciPA7h8QhPQPgZhJ9FeCLCkxCejPAUhKciPA3h5xB+HuHpCM9A+AWEX0R4JsKzEJ6N8EsIz0F4LsIvI/wKwvMQno/wAoQXIrwI4cUIL0H4VYSXIrwM4eUIr0B4JcKvIfw6wm8gvArh1QivQfhNhN9C+G2E1yL8DsLrEH4X4fUIv4fw+whvQHgjwh8g/CHCHyG8CeGPEd6M8CcIf4rwZwhvQXgrwp8j/AXC2xDejvCXCH+F8NcI70B4J8LfILwL4d0If4vwdwjvQfh7hPci/APC+xDej/CPCP+E8AGEDyL8M8KHED6M8BGEf0H4V4R/Q/gowscQ/h3h4wifQPgPhP9E+CTCpxD+C+G/ET6N8BmE/wnibLAPdz1Idr0fB3IDSE6QXCC5QfKA3AiSF+QmkJtBbgHJB5If5FaQAiAFQW4DuR3kDpBCIIVB7gQpAlJUn9+AFAcpARIFUhIkIqiPftUIvluhvdTLwbOtSNp53XrOlLlCPdOJZjoniw6ek+nfM8wdEZ7fM1xSMPS5AudfIf2e4eX0SwF4LUoFfS+mRHBBUhZQ/w9ZUo3FhOHwcUnozuVK+VXyUiXoHDWmBC25qZ0vVP10UKaQScgHx7eJe5YwHbqXZkompW383ubLhtP8rcwrvZLypNI9hNn8eS5Zh0zPlpyHjp859elvrFyGCysUqwN5bPXM1Gwd81zG5kzM9jAhF3PDzYWVOasfyXMFPTM4W6c8V7Q5Q7N1JuTi5avDhZVRq7vkSVPPdM/WNU86bE7nbN0IuXjlanJhpd/q7nnSqWc6ZuuRJ902pzlbT0Iu5l19Lqz0WN0rT4b0vOJsvfNk0OYrzPYoIRfzTeHCurLVj+XJhJ6Xma1PnkzZbDtbX0IuFpjFhXU5qx/Pk2k9L5ntiTwh2Jxqtn6EXCw0kQvrUqv75wlRTzTbk3lCtvl/sz1FyMUic7mwsNUD8pDoeW62gXmIbIbZBhFysdh0Ls6/1OA8dHMRPt8q/HwWKhdLhHBB+BykCPt4NY+Qi1eFcEHY7ynCfkUtJORiqRAuCOuaIszLagkhF8vCxEWoepah22NWhLlAEfqy4uKCer+/LBUXLstjp58V4p7+COgt2jCcc6wj5sf2fCcEy7XdDzDY/W447A7Bcm33gwx2rw+P3Zm2XNvdlsHu98JldyYt13Y/xGD3++GzO1OWa7vbMdi9IZx2Z8JybXd7Brs3htfuDFuu7e7AYPcH4bY7g5ZruxMY7P4w/HZnyHJtdyKD3R9dDbszYLm2O4nB7k1Xx+50W67t9jPY/fHVsjudlmu7kxns3nz17E6X5druAIPdn1xNu9Nhuba7I4Pdn15du9O0XNv9MIPdn11tu9OwXNv9CIPdW66+3Ve0XNvdicHurSbYfQXLtd2dGez+3Ay7L2u5trsLg91fmGL3ZSzXdndlsHubOXbbWq7t7sZg93aT7LaxXNvdncHuL82y+xLLtd09GOz+yjS7U1mu7e7JYPfX5tl9keXa7l4Mdu8w0W5kuba7N4PdO820+3+Wa7sfZbD7G1PtDlqu7X6Mwe5d5tp9znJtdx8Gu3ebbDdYru3uy2D3t0LucRCe2yrCs1C1nvAex3dCuCA8W1SE53VqAyEXe4RwQXj+pQjPlNSHhFx8L4QLwjMaRXjuoT4m5GKvEC4IzxEU4d68+pSQix+EcEG4160I94/VVkIu9gnhgnA/VhHucapthFzsF8IF4Z6hItyHU18RcvGjEC4I97UU4V6R2knIxU9CuCDce1GE+xlqNyEXB4RwQbg/oAifb9UeQi4OCuGC8DlIEfbx6gdCLn4WwgVhv6cI+xX1IyEXh4RwQVjXFGFeVgcJuTgs5DNe5UrQrR9hLlCEvqy4uIikjAuX5RlB+Jn08nS8Wtrn2mS5MJ/+XOD72SMi9GfSpsK79qF+cNah/5uLC57/oaX/z5LykvJdgRUIfSFr0BdSv6jmZ1pbRbkGXDpWpNaR+kOe2jn1twdTO+htDcJwmBuC5dru6xnsvj0cdodgubY7O4Pdd4TH7kxbru3OwWB3oXDZnUnLtd03MNhdOHx2Z8pybXdOBrvvDKfdmbBc252Lwe4i4bU7w5Zru3Mz2F003HZn0HJtdx4Gu4uF3+4MWa7tvpHB7uJXw+4MWK7tzstgd4mrY3e6Ldd238Rgd9TVsjudlmu7b2awu+TVsztdlmu7b2GwO/pq2p0Oy7Xd+RjsLnV17U7Tcm13fga7Y6623WlYru2+lcHu0lff7itaru0uwGB3GRPsvoLl2u6CDHaXNcPuy1qu7b6Nwe5ypth9Gcu13bcz2F3eHLttLdd238FgdwWT7LaxXNtdiMHuimbZfYnl2u7CDHZXMs3uVJZru+9ksNsyz+6LLNd2F2GwW5loN7Jc212UwW6XmXb/z3JtdzEGu92m2h20XNtdnMFuj7l2n7Nc212Cwe5Yk+3WH+YqeP5XTantjmO2m+IHGCsy2O0ltjvlRX2BjfCgXhGefSt8nhwqFz4hXBCeJSvC81lVmJCLeCFcEJ53KsIzRFWUkIvKQrggPJNThOdcqgQhF1WEcEF4bqQIz2JUNCEXVYVwQXi2oQjPC1RpQi7uEsIF4f67ItzTVuUIuagmhAvCPWJFuO+qKhJyUV0IF4T7mIpwb1ApQi5qCOGCcK9NEe5fKQ8hFzWFcEG4H6QI91iUl5CLWkK4INwfUITPt6oyIRe1hXBB+BykCPt4dRchF3cL4YKw31OE/YqqQchFHSFcENY1RZiXVW1CLuqGiYuQz+YJ98wJc4Ei9GVFyQXzBy1VynzX4gctK1HryPVJ4Ehiw/WcNYgC2iJcRL1+WYPrqOctxkO8iHVVJcQkEbYApVwDLh1d3EmE4pReK5mV1nAXdnYrtNdFixiqvX0Mvy3y8mWST8i3ogg7qz5OByMi+bi5k48V2our0rooK62HqYPxyOtgSNc11ulgFOUacOkYJ6GDiaPuYFyWh7KDiSPsYLxyAoet+koIHG+Ja7P6uimrhI+p+vrkVV/SdY13qq+iXAMuHStLqL6V6fcPFGX1rUxYfR+/RvcPqhDuHzzu7B+ISD5VuJOPFdpLSdipr8rUwVQNdjDZQHJGXEjA+MWRXKjmOqdbZITti+i/YTnzOvM68zrzOvNe+eXM68zrzOvM68zrzOvM68zrzOvM68zrzOvM68zrzOvMG655qferrxNwyPJjcfN1/EmAjgcE6HhQgI4/C9DxkAAdDwvQ8YgAHX8RoOOvAnT8TYCORwXoeEyAjr8L0PG4AB1PCNDxDwE6/ilAx5MCdDwlQMe/BOj4twAdTwvQ8YwAHf8RoOO/AnQ8K0DH/wToGCFgTyqLAB0jBeiY707zdcwvQMdbBehYQICOBQXoeJsAHW8XoOMdAnQsJEDHwgJ0vFOAjkUE6FhUgI7FBOhYXICOJQToGCVAx5ICdIwWoGMpATrGCNCxtAAdywjQsawAHcsJ0LG8AB0rCNCxogAdKwnQ0RKgoxKgo0uAjm4BOnoE6BgrQMc4ATp6BejoE6BjvAAdKwvQsYoAHasK0PEuATpWE6BjdQE61hCgY00BOtYSoGOWIgLuAQjQMasAHa8ToGM2ATpeL0DH7AJ0zCFAxxsE6JhTgI65BOiYW4COeQToeKMAHfMK0PEmATreLEDHWwTomE+AjvkF6HirAB0LCNCxoAAdbxOg4+0CdLxDgI6FBOhYWICOdwrQsYgAHYsK0LGYAB2LC9CxhAAdowToWFKAjtECdCwlQMcYATqWFqBjGQE6lhWgYzkBOpYXoGMFATpWFKBjJQE6WgJ0zFJcwPm1AB2zCtDxOgE6ZhOg4/UCdMwuQMccAnS8QYCOOQXomEuAjrkF6JhHgI43CtAxrwAdbxKg480CdLxFgI75BOiYX4COtwrQsYAAHQsK0PE2ATreLkDHOwToWEiAjoUF6HinAB2LCNCxqAAdiwnQsbgAHUsI0DFKgI4lBegYLUDHUgJ0jBGgY2kBOpYRoGNZATqWE6BjeQE6VhCgY0UBOlYSoKMlQEclQEeXAB3dAnT0CNAxVoCOcQJ09ArQ0SdAx3gBOlYWoGMVATpWFaDjXQJ0rCZAx+oCdKwhQMeaAnSsJUDH2gJ0vFuAjnUE6FhXgI71BOhYX4CODQTo2FCAjo0E6NhYgI5NBOjYVICOzQTo2FyAjvcI0LGFAB1bCtDxXgE6thKg430CdGwtQMf7BejYRoCODwjQ8UEBOrYVoONDAnRsJ0DH9gJ07CBAxwQBOiYK0DFJgI5+ATomC9AxIEDHjgJ0fFiAjo8I0LGTAB07C9CxiwAduwrQsZsAHbsL0LGHAB17CtCxlwAdewvQ8VEBOj4mQMc+AnTsK0DHxwXo+IQAHfsJ0LG/AB2fFKDjUwJ0HCBAx4ECdBwkQMfBAnQcIkDHoQJ0fFqAjsME6DhcgI4jBOg4UoCOowToOFqAjmME6DhWgI7jBOg4XoCOEwTo+IwAHZsUNV/HpgJ0bCZAx+YCdLxHgI4tBOjYUoCO9wrQsZUAHe8ToGNrATreL0DHNgJ0fECAjg8K0LGtAB0fEqBjOwE6thegYwcBOiYI0DFRgI5JAnT0C9AxWYCOAQE6dhSg48MCdHxEgI6dBOjYWYCOXQTo2FWAjt0E6NhdgI49BOjYU4COvQTo2FuAjo8K0PExATr2EaBjXwE6Pi5AxycE6NhPgI79Bej4pAAdnxKg4wABOg4UoOMgAToOFqDjEAE6DhWg49MCdBwmQMfhAnQcIUDHkQJ0HCVAx9ECdBwjQMexAnQcJ0DH8QJ0nCBAx2cE6PisAB0nCtBxkgAdJwvQcYoAHacK0HGaAB2fE6Dj8wJ0nC5AxxkCdHxBgI4vCtBxpgAdZwnQcbYAHV8SoOMcATrOFaDjywJ0fEWAjvME6DhfgI4LBOi4UICOiwTouFiAjksE6PiqAB2XCtBxmQAdlwvQcYUAHVcK0PE1ATq+LkDHNwTouEqAjqsF6LhGgI5vCtDxLQE6vi1Ax7UCdHxHgI7rBOj4rgAd1wvQ8T0BOr4vQMcNAnTcKEDHDwTo+KEAHT8SoOMmATp+LEDHzQJ0/ESAjp8K0PEzATpuEaDjVgE6fi5Axy8E6LhNgI7bBej4pQAdvxKg49cCdNwhQMedAnT8RoCOuwTouFuAjt8K0PE7ATruEaDj9wJ03CtAxx8E6LhPgI77Bej4owAdfxKg4wEBOh4UoOPPAnQ8JEDHwwJ0PCJAx18E6PirAB1/E6DjUQE6HhOg4+8CdDwuQMcTAnT8Q4COfwrQ8aQAHU8J0PEvATr+LUDH0wJ0PCNAx38YdOTQ8+WCZHO5UutIf2mqIM+iZk2lp9uK83iSva5k5VYJlis+0RdreWIT43zKp2J9sX6Xz+1O9nl83vjEeK8VrzzuZBWIjXcHgnPfVYLO5lW16eZaTTeXlSW4bvpd21ss4uIX9ZpWI1zT3HXp5spTl2dNq6E1Jf+QJMSRjqVI4nlxfIbKd/USPOtanXFdB4L9SwteOm+oa9GvAW3e47B7I4Pd/RvIyPc1CHMTIdeKcv1wDGl7szDF0CCmGBpgeAwNYoqhgUJiqCZhDBFyrQYyxVBNxhjKBnMMy0PvS0MMjyFt9wgGu4cKiaFahDFEyLUaarjfDGXKvbWZetjajD3sUKb6ezfTWtydjmdPK7SXIuRR4XUIdU3rMK1pHUb/yh7BU5uGG55jtN0ctWmEkNpUlzCGCLlWIwz3mxxM8TJagN0c8TJGSLzUI4wXQq7VGMP95gameBkvwG6OeJkgJF7qE8YLIddqguF+k5MpXiYKsJsjXiYJiZcGhPFCyLWaZLjf5GKKl6kC7OaIl2lC4qUhYbwQcq2mGe43w5n21hox7X00Ytz7GM60t9aYaS0ah2FvjZBH1Zhwb60J05o2YfQvSM8stWm64TlG281Rm2YIqU1NCWOIkGs1w3C/GcVUm5ox5Y5mjLljFFNtas60Fs3DUJsIeVTNCWvTPUxreg+jf+WN4KlNMw3PMdpujto0S0htakEYQ4Rcq1mG+81YptrUkil3tGTMHWOZatO9TGtxbxhqEyGP6l7C2tSKaU1bMfrXBKZYu49pLe5jXguOWGvNtBatwxBrhDyq1oSxdj/Tmt7P6F/5Inj6wDmG13NtN0cfOFdIH9iGMIYIuVZzDfeb/EzxMk+A3RzxMl9IvDxAGC+EXCsp6/cg4fotJfwM7rLaZsddgQiefLPI8Hyj7ebIN4uFxEtbwngh5FotNtxvJjI9Oz7E1NvjeTnWguPZsR3TWuB5LxdXVmgvRcijakf47NieaU3bM/rXbRE8tWmp4TlG281Rm5YJqU0dKHs5wtq0zHC/uZ0pXlYKsJsjXl4TEi8JhPFCyLV6zXC/uYMpXlYJsJsjXlYLiZdEwngh5FqtNtxvCjHFy1sC7OaIl7eFxEsSYbwQcq3eNtxvCjPFyzoBdnPEy7tC4sVPGC+EXKt3DfebO5ni5X0BdnPEywYh8ZJMGC+EXKsNhvtNEaZ4+VCA3Rzx8pGQeAkQxgsh1+ojw/1mCtPZTUemvXU9b7HgvBxrwXF28zDTWjyM1uJycWWF9lKEPKqHCc9uHmFa00cY/es5pljrxLQWnZjXgiPWOjOtRecwxBohj6ozYax1YVrTLoz+NYMp1royrUVX5rXgiLVuTGvRLQyxRsij6kYYa92Z1rQ7o3/NZIq1Hkxr0YN5LThirSfTWvQMQ6wR8qh6EsZaL6Y17cXoX1ERPPsbmw1/TtV2c+xvfCJkf6M3YQwRcq0+MdxvSjLFyxYBdnPEy1Yh8fIoYbwQcq22Gu430Uzxsk2A3Rzxsl1IvDxGGC+EXKvthvvNS0zPPn2YetM+jL3pS0zPPn2Z1qJvGJ59CHlUfQmffR5nWtPHGf3rZZ7fbHRT/mbjE0zr+gTzui6lX1fXUsJ17ce0rv3CkAMIfUL1I8wB/ZnWtD+jr74ZydOffm14n6Ht5uhPdwjpT58kjCFCrlW41s8K7aWW0v1uOOlvHD/FlIP0vCmxQh2Lei03MPS5uwzPQdruDxns3i0kBw0gzEGEXCvK9cMxNCAMvdFdhGs6gLA3GsiUlwYy9kY6Pn8uRB+fewTkpcMMdn8vJC8NIowhQq7V90x5aVAY8lI1wjUdRJiXBjPlpcGMeWkRz/6CotxfGMK0rkPC4KvVCX11CKGvDmVa06HBNdX/bpMl4pIX1X8zgike2mc1X8enCbkTS9ShSPN1HFaCWEdqBfVuwbAS9N3ZcKbsMpyxEr6fneeEbATTWowIQ/Ui5FGNIKxeI5nWdKTw6lU+h/k6jnKql6UqCiBqtITqNZqheo1hyi5jGKvXVKbqNZZpLcaGoXoR8qjGElavcUxrOk549bIEJMXxTvWylEsAURMkVK8JDNXrGabs8gxj9erHdDvxWaa1eDYM1YuQR/UsYfWayLSmE4VXL4+ApDjJqV6WihNA1GQJ1WsyQ/WawpRdpjBWr8VM1Wsq01pMDUP1IuRRTSWsXtOY1nSa8OrlE5AUn3Oql6UqCyDqeQnV63mG6jWdKbtMF55dqgpw2hlOdrFUNQFEvSAhu7zAkF1eZMouLwrPLjUEOO1MJ7tYamek+TrOkpBdZjFkl9lM2WW28OxSW0B2ecnJLpbaLiC7zJGQXeYwZJe5TNllrvDsUldAdnnZyS6Wqi+AqFckZJdXGLLLPKbsMk94dmkowGnnO9nFUo0FELVAQnZZwJBdFjJll4XCs0tTAU67yMkulmougKjFErLLYobssoQpuywRnl1aCHDaV53sYqkjAvZdlkrILksZsssypuyyTHh2aSUguyx3soulWgsgaoWE7LKCIbusZMouK4VnlzYCnPY1J7tYaoOA3uV1CdnldYbs8gZTdnlDeHZpKyC7rHKyi6XaCSBqtYTsspohu6xhyi5rhGeXDgKc9k0nu1gqUQBRb0nILm8xZJe3mbLL28Hsgl/Uuq8l091lSQ2utSXM1/EdBh1ZHGodnUMpqQ61ToBDvSshW7/LkK3XM2Xr9WHI1u/RBZdLanC9JyC43peSrTfQOZRb7L6gAIfaKCFbb2TI1h8wZesPwpCtP6QLLo/U4PpQQHB9JCVbb6JzqFipDrVJgEN9LCFbf8yQrTczZevNYcjWn9AFV5zU4PpEQHB9KiVbf0bnUF6pDvWZAIfaIiFbb2HI1luZsvXWMGTrz+mCyyc1uD4XEFxfSMnW2+gcKl6qQ20T4FDbJWTr7QzZ+kumbP1lGLL1V3TBlSA1uL4SEFxfS8nWO+gcKlGqQ+0Q4FA7JWTrnQzZ+humbP1NCdk3zlZEmq/jLilZcDddFvRLdajdArLgtxKy4LcMWfA7piz4XRh61j10wZUsNbj2CAiu76Vk6710DhWQ6lB7BTjUDxKy9Q8M2XofU7beF4ZsvZ9Md7fYe8z7BQTXj1Ky9U90DiX2HvNPAhzqgIRsfYAhWx9kytYHw5Ctf6YLLrH3mH8WEFyHpGTrw3QOJfYe82EBDnVEQrY+wpCtf2HK1r8I3w/eep35Ov4qJQv+RpcFxd4P/k1AFjwqIQseZciCx5iy4LEw9Ky/0wWX2PvBvwsIruOUOkolKlnA90WckJAFTzBkwT+YsuAfYciCf9JlQbH3bv8sYb6OJ6X0rKfoHErsvdtTAhzqLwnZ+i+GbP03U7b+OwzZ+jRdcIm9d3taQHCdkZKt/6FzKLH3bv8R4FD/SsjW/zJk67NM2fpsGLL1f3TBlSQ1uP4TEFwRUUKydRYyRd1i7wdniTJfx8goAdlaK0ntoFmjeLK1nrdYxMUvat2vowsusfeDrxMQXNmkZOvr6RxK7P3g6wU4VHYJ2To7Q7bOwZStc6BsTb0WS/T30unqxbDGVOt6A9O63sC8rksL0vtYTqa1yGnTEWQlXhNCHhVeh1DXNBfTmuYKrmk2kNwRF2IsIoI+3rSvPViCNn71fBG0el7cIdDMrVIAXt/cUeff80QFyUghRf8Pe1KN5WFMBCnEkH8YpQEtKRxFlsPu/Q14nPE6Gj1dQT1VbsIElYcwcRL6jeLigjo5UnJxo81ciVaSP1Ylxvm9Kjkh1peUFO9WypUQlxCX6PIFkhNjlS/WB3MmJbh88J9zJSSpZCshLlkXhlwo9vCLOh5vJC5yKa+8UYwK542in/cmQmfgsvumqAsLTDSvra4UiUnrShWwKfNScnQzU3en5y3O5Psj8pxvSogTYayel2pdb2Fa11uu0DWnvKgLxMASZhXrwPlXoo3pLN1yvmC+yZ+6W84XTMB4LL/No+J1NMr9T0kuQkLt6vIRJqb8xI7CkYSeYujgb2XacI4k1pOS6wKEHTwH15qTAgxbogWjeBsYK7TXuTxTkMHu2wy3W/N9G4PdtzM1BbdfYYeGIh8VoG+21K2E+eOOMOVMK7SXykNocyE6m2M5YkhzUoghhgoLyB2FGey+kyl33Mm4u8uVRw8YvrvL5QMHmXYUsxLrWYSwnyPkWlGuH46hIoz1N+U5g7oWUW52FDU8J+s6VJQhHosZbrfmuBiD3cWZalHxdByzh6p7iWsgN3H5UgkGX4pi8qUoxr6GK64OX6M+cERIX1OSMHcQcq2OMPU1JYMxdO46WMSFHkT/+xD842wQl444j/UrOiriohd13xJN+Axdio7PJL0OBSMu7PXrfx9Ba/QLwvq/m4K3BMdT/v9i4H8rDVIGpGzU+fFswb+NjLj0RR3jeaJ4YpFazxhCPa9HepYL+m/54HuF4HvF4HulqAs+f+6/Df9WIC4QN4gHJBYkDsQL4gOJB6kMUgWkKshdINVAqmsbQGqC1AKpDXI3SB2QuiD1QOqDNABpCNIIpDFIE5CmIM1AmoPcA9ICpCXIvSCtQO4DaY1yNUsxoCIAJ51K6IQzXNc/yhM3ISmv+6MYFb4/in7eNoTZlcvuNqjCEM1rhdPZKjA52wNRjAo/wOBsDxrubNruB4U7W0UmZ2sbxahwWwZne8hwZ9N2P8TgbBy6tgkGBvVzYLsomUFWiSnI2kcxKtyeIcg6GB5k2u4OQoJMJ4N2DEGWYPimteYngcHuROIgTf2wXx491FdAuBLCG1M97CfB/+YHSQYJRF0YT3llJV5bwm5AJRHGekdmbjoiDvwIJyMciLqYm4fh34+AdALpHHXxfJR+qZ+jtW9GEnNNecDXhZCfyMusoxXaS+mNG21zBO28VspGT1eYvxtId5AeID1BeoH0BnkU5DGQPiB9QR4HeQKkH0h/kCdBngIZADIQZBDIYJAhIENBngYZBjJc2wAyEmQUyGiQMSBjQcaBjAeZAPIMyLMgE0EmgUwO+g/eR+kadenl5G42Y91txnrYjPW0GetlM9bbZuxRm7HHbMb62Iz1tRl73GbsCZuxfjZj/W3GnrQZe8pmbIDN2ECbsUE2Y4NtxobYjA21GXvaZmyYzdhwm7ERNmMjbcZG2YyNthkbYzM21mZsnM3YeJuxCTZjz9iMPWszNtFmbJLN2OSoC/mGOu/onFMuir4u/Gb2Rzn/p2fXqNDnSg7e1O9GN5e/exSdjUcN5yJoc3wPuvVTPcnmSla9CLk4JoKLJNWbbP186lGyuSz1GCEXv0vgItlSfajWL8lSfanm8lnqcUIujkvgAurlE0Trlwxz9SOaKwnm6k/IxQkBXPjA5ieJ1g/UVE/RzJWs5xpAyMUf5nORpG0eSLN+Pj3XIJq5tMlqMCEXfxrPRfI5m4eQrF/SubmGkszlOzfX04RcnDSei3NTq2EU65d8fq7hFHMlnZ9rBCEXp0znwnfe5pEU63deTTWKYC5/cK7RhFz8ZTgXiUGbxxDY7A3ONTb0uf73JQDjCLn422wuVIrN40O22RdImWtC6HMlpsz1DCEXp43mwpeip3o2ZJu9/5trYshzxf5vrkmEXJwxmgv1P5snR9HtsxLuhyq8nxfyj5qEiQsrtJci3DdThPs+6jghF/8K4YJwf0ARPt+qPwm5OCuEC8LnIEXYx6u/CLn4TwgXhP2eIuxX1BlCLiIayuCCsK4pwryszhJykYWJi6zEXBDGryL0P0W9fhxn810ZzuanRPHaTXGnrGuU2XfKpkaZ7Tv6/l8XBt+ZZrjd+gONUxjsLmB4rtD+OI3B7oJhqjGh6vkc4bM6IdeqoOF+o+NlKoPf3GG43VOY4qWQkHh5njBeCLlWlOunuU19l17niZQ7888j3D7rBdwh68V36afD380AeQHkxajL36W3Qnud60+6MfjkTAH9XjfD+71Zhvc9+kscZjL4ThHD87iOzVkMdhcVksdnE+ZxQq5VUcP9RjH5TQkB8cKRJ6KExMtLhPFCyLWKYu57ZqNe56V09j1z4O/mgrwM8gpz39OdwSfnCeh7uhve98w3vO/RX1w1j8F3Shmex3VszmewO0ZIHl9AmMcJuVYxhvuNi8lvygqIF448UU5IvCwkjBdCrlU55r5nAep1Fqaz71kEf7cYZAnIq8x9Tw8Gn1wqoO/pYXjfs8zwvkd/WedSBt+paHge17G5jMHuSkLy+HLCPE7ItapkuN+4mfzGJSBeOPKEW0i8rCCMF0KulZu571mOep0V6ex7VsLfvQbyOsgbzH1PTwafXCWg7+lpeN+z2vC+R39B+SoG34kzPI/r2FzNYLdXSB5fQ5jHCblWXsP9xsPkN5UFxAtHnqgiJF7eJIwXQq5VFea+Zw3qdd5MZ9/zFvzd2yBrQd5h7nt6MfjkOgF9Ty/D+553De979I+yrGPwnWqG53Edm+8y2F1dSB5fT5jHCblW1Q33m1gmv6klIF448kRtIfHyHmG8EHKtajP3PetRr/NeOvue9+HvNoBsBPmAue/pzeCTHwroe3ob3vd8ZHjfo3+I7kMG36lreB7XsfkRg931hOTxTYR5nJBrVc9wv4lj8puGAuKFI080EhIvHxPGCyHXqhFz37MJ9Tofp7Pv2Qx/9wnIpyCfMfc9jzL45BYBfc+jhvc9Ww3ve/SP725h8J2mhudxHZtbGexuJiSPf06Yxwm5Vs0M9xsvk9+0EBAvHHmipZB4+YIwXgi5Vi2Z+57PUa/zRTr7nm3wd9tBvgT5irnveYzBJ78W0Pc8Znjfs8PwvscH+n3N4Dv3GZ7HdWzuYLC7tZA8vpMwjxNyrVob7jc+Jr95QEC8cOSJB4XEyzeE8ULItXqQue/ZiXqdb9LZ9+yCv9sN8i3Id8x9Tx8Gn9wjoO/pY3jf873hfU886LeHwXfaGZ7HdWx+z2B3eyF5fC9hHifkWrU33G/imfwmUUC8cOSJJCHx8gNhvBByrZKY+569qNf5IZ19zz74u/0gP4L8xNz39GXwyQMC+p6+hvc9Bw3veyqDfgcYfCdgeB7XsXmQwe6OQvL4z4R5nJBr1dFwv6nM5DedBMQLR57oLCReDhHGCyHXqjNz3/Mz6nUOpbPvOQx/dwTkF5Bfmfuexxl88jcBfc/jhvc9Rw3ve6qAfr8x+E43w/O4js2jDHZ3F5LHjxHmcUKuVXfD/aYKk9/0EhAvHHmit5B4+Z0wXgi5Vr2Z+55jqNf5PZ19z3H4uxMgf4D8ydz3PMHgkycF9D1PGN73nDK876kK+p1k8J0+hudxHZunGOzuKySP/0WYxwm5Vn0N95uqTH7TT0C8cOSJ/kLi5W/CeCHkWvVn7nv+Qr3O3+nse07D350B+QfkX+a+px+DT54V0Pf0M7zv+c/wvucu7csMvjPA8DyuY/M/BrsHCsnjESXp1pKQazXQcL+5i8lvhgiIF448MVRIvGQhjBdCrtVQ5r5H54mU/iZLyfT1PZHwd1lBrgPJVpK37+nP4JPXlzS/7+lveN+TvaTZ+awarJ/mmZqb4YbncR2b2RnsHiEkj+cgzOOEXKsRhvuNjhcOvxktIF448sQYIfFyA2G8EHKtxjD3PTlQr3NDOvuenPB3uUByg+Rh7nueZOh7bhTQ9zxpeN+T1/C+pzqs340M+Wy84Xlcx2ZeBrsnCMnjNxHmcUKu1QTD/UbHC4ffTBQQLxx5YpKQeLmZMF4IuVaTmPuem1Cvc3M6+55b4O/ygeQHuZW573mKoe8pIKDvecrwvqeg4X1PDVi/Agz5bKrheVzHZkEGu6cJyeO3EeZxQq7VNMP9RscLh99MFxAvHHlihpB4uZ0wXgi5VjOY+57bUK9zezr7njvg7wqBFAa5k7nvGcDQ9xQR0PcMMLzvKWp431MT1q8IQz6baXge17FZlMHuWULyeDHCPE7ItZpluN/oeOHwmzkC4oUjT8wVEi/FCeOFkGs1l7nvKYZ6neLp7HtKwN9FgZQEiWbuewYy9D2lBPQ9Aw3ve2IM73tqwfqVYshn8wzP4zo2Yxjsni8kj5cmzOOEXKv5hvuNjhcOv1kkIF448sRiIfFShjBeCLlWi5n7ntKo1ymTzr6nLPxdOZDyIBWY+55BDH1PRQF9zyDD+55Khvc9tWH9KjLks6WG53Edm5UY7F4mJI9bhHmckGu1zHC/0fHC4TcrBcQLR554TUi8KMJ4IeRavcbc91io11Hp7Htc8HduEA9ILHPfM5ih74kT0PcMNrzv8Rre99wN6xfHkM9WGZ7HdWx6GexeLSSP+wjzOCHXarXhfqPjhcNv3hIQLxx54m0h8RJPGC+EXKu3mfseH+p14tPZ91SGv6sCUhXkLua+ZwhD31NNQN8zxPC+p7rhfU8dWL9qDPlsnem/NwA2V2ew+10hebwGYR4n5Fq9a7jf6Hjh8Jv3BcQLR57YICReahLGCyHXagNz31MD9To109n31IK/qw1yN0gd5r5nKEPfU1dA3zPU8L6nnuF9T11Yv7oM+exD0+9pgM31GOz+SEger0+Yxwm5Vh8Z7jc6Xjj8ZrOAeOHIE58IiZcGhPFCyLX6hLnvqY96nQbp7Hsawt81AmkM0oS573maoe9pKqDvedrwvqeZ4X1PPVi/pgz5bIvheVzHZjMGu7cKyePNCfM4Iddqq+F+o+OFw2+2CYgXjjyxXUi83EMYL4Rcq+3MfU9z1Ovck86+pwX8XUuQe0FaMfc9wxj6nvsE9D3DDO97Whve99SH9buPIZ99bXge17HZmsHuHULy+P2EeZyQa7XDcL/R8cLhN7sExAtHntgtJF7aEMYLIddqN3Pfcz/qddqks+95AP7uQZC2IA8x9z3DGfqedgL6nuGG9z3tDe97GsD6tWPIZ3sMz+M6Ntsz2P29kDzegTCPE3Ktvjfcb3S8cPjNPgHxwpEn9guJlwTCeCHkWu1n7ns6oF4nIZ19TyL8XRKIHySZue8ZwdD3BAT0PSMM73s6Gt73NIT1CzDkswOG53Edmx0Z7D4oJI8/TJjHCblWB00/74ni8ZvDAuKFI08cERIvjxDGCyHX6ghz3/Mw6nUeSWff0wn+rjNIF5CuzH3PSIa+p5uAvmek4X1Pd8P7nkawft0Y8tlvhudxHZvdGew+KiSP9yDM44Rcq6OG+42OFw6/OS4gXjjyxAkh8dKTMF4IuVYnmPueHqjX6ZnOvqcX/F1vkEdBHmPue0Yx9D19BPQ9owzve/oa3vc0hvXrw5DPThqex3Vs9mWw+5SQPP44YR4n5FqdMtxvdLxw+M1pAfHCkSfOCImXJwjjhZBrdYa573kc9TpPpLPv6Qd/1x/kSZCnmPue0Qx9zwABfc9ow/uegYb3PU1g/QYw5LOzhudxHZsDGez+T0geH0SYxwm5Vv8Z7jc6Xjj8JrKR+fHCkSeyNpIRL4MJ44WQa0W5fnZ9zyDU6wxOZ98zBP5uKMjTIMOY+54xDH3PcAF9zxjD+54Rhvc9TWH9hjPks+sNz+M6Nkcw2J1dSB4fSZjHCblW2Q33Gx0vHH6TU0C8cOSJXELiZRRhvBByrXIx9z0jUa8zKp19z2j4uzEgY0HGMfc9Yxn6nvEC+p6xhvc9Ewzve5rB+o1nyGc3Gp7HdWxOYLA7r5A8/gxhHifkWuU13G90vHD4zS0C4oUjT+QTEi/PEsYLIdcqH3Pf8wzqdZ5NZ98zEf5uEshkkCnMfc84hr5nqoC+Z5zhfc80w/ue5rB+UxnyWQHD87iOzWkMdhcUksefI8zjhFyrgob7jY4XDr+5Q0C8cOSJQkLi5XnCeCHkWhVi7nueQ73O8+nse6bD380AeQHkRea+ZzxD3zNTQN8z3vC+Z5bhfc89sH4zGfJZEcPzuI7NWQx2FxWSx2cT5nFCrlVRw/1GxwuH35QQEC8ceSJKSLy8RBgvhFyrKOa+ZzbqdV5KZ98zB/5uLsjLIK8w9z0TGPqeeQL6ngmG9z3zDe97WsD6zWPIZ6UMz+M6Nucz2B0jJI8vIMzjhFyrGMP9RscLh9+UFRAvHHminJB4WUgYL4Rcq3LMfc8C1OssTGffswj+bjHIEpBXmfueZxj6nqUC+p5nDO97lhne97SE9VvKkM8qGp7HdWwuY7C7kpA8vpwwjxNyrSoZ7jc6Xjj8xiUgXjjyhFtIvKwgjBdCrpWbue9ZjnqdFense1bC370G8jrIG8x9z7MMfc8qAX3Ps4b3PasN73vuhfVbxZDP4gzP4zo2VzPY7RWSx9cQ5nFCrpXXcL/R8cLhN5UFxAtHnqgiJF7eJIwXQq5VFea+Zw3qdd5MZ9/zFvzd2yBrQd5h7nsmMvQ96wT0PRMN73veNbzvaQXrt44hn1UzPI/r2HyXwe7qQvL4esI8Tsi1qm643+h44fCbWgLihSNP1BYSL+8Rxgsh16o2c9+zHvU676Wz73kf/m4DyEaQD5j7nkkMfc+HAvqeSYb3PR8Z3vfcB+v3IUM+q2t4Htex+RGD3fWE5PFNhHmckGtVz3C/0fHC4TcNBcQLR55oJCRePiaMF0KuVSPmvmcT6nU+Tmffsxn+7hOQT0E+Y+57JjP0PVsE9D2TDe97thre97SG9dvCkM+aGp7HdWxuZbC7mZA8/jlhHifkWjUz3G90vHD4TQsB8cKRJ1oKiZcvCOOFkGvVkrnv+Rz1Ol+ks+/ZBn+3HeRLkK8Y+56loGy/2+l98j4hPvk1oU9G1yF8Nmxkft+4jSGX3W94Dtd2f81gdxumeKHu6wn5UW2E5IiYKDqby0fR6bWD8LkoG8yRC8ULflHHEKXeWN+dJRkV3lmSft5vStI5A5fd35S8sMBE855ztsiIC8mJ09kIg9fi1LN8FE9Q7NJ+S12ttFPoSshRXSkXIWuQqF0oeDk6Ib0eJu+g7SauFFkjwlMpKIMCJ5tvg0ntO7vgsEJ7Kb3YuxiyJscCaz13M7SzewzfstUOsIfB7u9L8iQwPe+gCJ4g+45pLfYyrcVexrXQCYdjLdoa/jjPFQ8PXV27k9LQj83324Xp0dYK7aUI/VIRcq0o1083LHr71O5pIyKD65mWP+E5OWoW1Zrg5u0H5P/kSu9hKgI/XKGjT2MaldZ/R+v8A0NSSGRKCtdlkLOMNG+h2ryvpJkJJrERj1/uQ81JZvlJa80p+dmP5lJuN8SG36sC/oA71hvvSlRx7ri4gCfgjfN5/IFYT4Lfm6w8CW5XfLLXCihfcrI31p3kjQvE+5PiAjhpK7/b7fHHJyapWFdcQqLl87sTrIDH63ZZCX631+93++LiEtxuf5wv4Iv3uVwJAbfPivV64604lxv+00z87A/yE86n2Bimp9gfgw+ZP0lJ4Fz6/ciQrA8wFa4DjE8vei1+YliLg0xrcZBxLWKYnuT8hj/JccVDsuFPcly+HxDyJEfol4qQaxVwnuRSv9SPTE9yP0t8kvuZ+UnuZ4ak0OkafJI7VNLMBNOJ6UnhkLAnucOET3IBwic5Ln4Ooye5yxUFk7fgOPXkKjBHJBaYI8wF5ghDgekSpgJDec5r0FnRRQUmVL26Crmm+AthgSb0P9WVqQD8ko4CHeqa/lqSrhBetD1qUIHuwsTPr/+Ptlp/C261HuW4TXe5SzhWaC+1m7hb4bI7ktHuUHU8Zvj2t3bMYwwNyO9MzdjvjFu+R5nW4jjTWhxn3v7mWIsehm9/c8VDT8O3v7l8v5eQ7W9Cv1SEXKtezvZ36te5mkW1JripPMG5O3GMqQicYNyd0DqfYEgKfYRsfx8jbAT/KGlmgunD9PT2Rxi2vyn5+ZNw+7sX4dM1Fz9/XoWna66P45wMPl2fkpLAufQ7yZCs/2IqXH8xPr3otTjFsBZ/M63F38wfSeHo7B83/EmOKx6eMPxJjsv3+wl5kiP0S0XIternPMmlfqmTTE9ypyU+yZ1mfpI7zZAUBlyDT3JnSpqZYAYwPSmcEfYk9w/hk1w/wic5Ln7+uQoXmSi34Dj15Cow/0osMP8yF5h/GQrMICEXmSgTWE+mDjZUvQYLuch0lrBAE/qfGsxUAM6G4SLTf4QXmXo1MrNAD2Li5z8bfqifemMIvxewIuFcEdG0T725IsKzVU2pN9Y3SzSjwnpy6nkjowmdgcnuyOgLC0w0b1i/Y7CikO8YpLwdiYMiazTDrUjtFJK+YzBr9OW7c4rvGNTrEcm4FqHqeB1xpZB+ZThbMKldbxccVmgvpRc7K0PW5Fhgred10fRBkT3abLu1A2RnsDtHNE8C0/MOiuAJsuuZ1uIGprW4IZr3ai7HWjxt+IEuVzwMM/xAl8v3hws50CX0S0XItRruHOimfp2rWVRrgpu3nNGM++3ZmYpAzmi+/Xatc06GpDBayIFudsJtiVzRZiaY0Uz7kbmi+Q90KfnJHU23XzyccL+Yi5/c0eG/mluR6Sk2T/Ah80YpCZxLvzwMyTovU+HKy/j0otfiRoa1uIlpLW5iXIuKTE9yYw1/kuOKh3GGP8lx+f54IU9yhH6pCLlW450nudQvlYfpSe5miU9yNzM/yd3MkBQmXoNPcrdEm5lgJjI9Kdwi7EkuH+GT3HjCJzkufvJFh/9qbrZonriXUmDySyww+ZkLTH6GAjNZyNVcygQ2jKmDDVWvKUKu5t5KWKAJ/U9NYSoAt0bzX80tEE1XCIc3MrNAT2bip8D/o63WgsGt1ts4btNd7hKOFdpLXUfcrXDZHclod6g63m749rd2zNsZGpA7mJqxOxi3fG9jWotCTGtRiHn7m2MtnjN8+5srHp43fPuby/enC9n+JvRLRci1mu5sf6d+natZVGuCm8rCnLsTtzMVgcKMuxNa58IMSWGmkO3v2wkbwTujzUwwM5me3u4Mw/Y3JT9FCLe/pxM+XXPxU+QqPF1zfRynaPDpupiUBM6lX1GGZF2cqXAVZ3x60WtRjGEtSjCtRQnmj6RwdPazDX+S44qHlwx/kuPy/TlCnuQI/VIRcq3mOE9yqV+qKNOTXJTEJ7ko5ie5KIakMO8afJIrGW1mgpnH9KRQUtiTXDThk9wcwic5Ln6ir8JFpoLRPHEvpcCUklhgSjEXmFIMBWaBkItMlAnseaYONlS9Fgq5yBRDWKAJ/U8tZCoAMWG4yFSa8CLT9EZmFugFTPyUZtzduY7p3LaM4budD8GuVocoervLGm73bqbfAixn+F0v7Y+aG+rdIkI/V2UJe4Dyhvuh9pfyDHmnguF+qL9Vr0K02d/WV9HwNdQnEhUZfGdJI7NjpjyT3a8y9eXUPk7Ij3rV8NOnCkxcVyKMbb1hlCsiPEf/lZg2YqxoRoUthkv1irBJ4LJbRV9YYKJ5zzmblsgIfmcrHcGTEMk/Zkl4HyY30tMV5M8dfPcE32OD73HBd2/w3Rd8jw++Vw6+Vwm+Vw2+38Xx6RXtbJK+C9oTTAp4zGszVtlm7K7gWDgzr4sp81aLZlS4GkPmrW545tV2V2fKvOFyNjeTs9WI5lSYwdlqGu5s2u6aDM5mp2uo9nuCgUH9PEKZEGoJ7ctjmQK2djSjwrUZAvZuwwNW23238OoQx+RsdaIZFa7D4Gx1DXc2bXddIdXBGwwM6upAmRDqGb6brzuBWgy7VfUNt1v7eD0GuxsI7QZ8TAm6YTSjwg0ZEnQjwxO0truR8G4gnsnZGkczKtyYwdmaGO5s2u4mQrqBysHAoO4GKBNCU8Oroq7aDRiqYjPD7dY+3pTB7uZCu4EqTAn6nmhGhe9hSNAtDE/Q2u4WwruBqkzO1jKaUeGWDM52r+HOpu2+V0g3cFcwMKi7AcqE0MrwqqirdnOGqnif4XZrH2/FYHfraLNjRp+bq2izbzjeb7jvaN9uzeA7bYiLZMGIC58U0f/eCv84G8T6ODoFuxH+PPg3Kf9/D8D/9iBIW5CHoi+Mp7yob2x76NZAPUCYx9sR+yTX+hGe+KkHCdevvZD1IzzEUm0J168Dc25oh3JAe4Q7IPxQ9MW5IQH+nQiSBOIPQ27wEnKTQMhNshDfJtz/V4mE6xcQsn6EW9oqiXD9OjLnhmSUAwIId0TYnyo3PAz/fgSkE0jnMOSGyoTcPEzITRchvk24G6geIVy/rkLWj3CDS3UiXL9uzLmhC8oBXRHuhnDnVLmhO/y7B0hPkF5hyA13EXLTnZCb3szc9EYc9EC4J8K9UnHzKPz7MZA+IH2jL54Pc0LxjN+GYR/ifkJ+Hjd8H0Jz9TjDPsQThtvN9em7fobbrX37CQa7lxv+aUttdz8Gu1cI+WQtIT9qBfH3VF4fEZ4DRMoP/eVBevYPnnU9GXx/Kvg+IPg+MPg+KPg+OPg+JPg+NPj+dPB9WPB9ePB9RLTNh+qs0F4qZRM/gnbeiz4I91T0pR9wG2QzNtRmbHh0+D8I15+4mUp5jYxmVHhkNP28owg7IC67RzE4bzid7UkmZxsdzajwaAZnG2O4s2m7xzA4m52uodr/VDAwqNsHyoQwNlpmwA5gCthx0YwKj2MI2PGGB6y2e7zw6jCQydkmRDMqPIHB2Z4x3Nm03c8IqQ6DgoFBXR0oE8Kzhm+g6E5gLMNGwkTD7dY+/iyD3ZOEdgODmRL05GhGhSczJOgphidobfcU4d3AECZnmxrNqPBUBmebZrizabunCekGhgYDg7oboEwIzxleFXXVnsRQFZ833G7t488x2D1daDfwNFOCnhHNqPAMhgT9guEJWtv9gvBuYBiTs70YzajwiwzONtNwZ9N2zxTSDQwPBgZ1N0CZEGYZXhV11Z7OUBVnG2639vFZDHa/ZLjdKWfo1HbPMdxu7Y8vMdg9l7iwXenDa/oIOQU/GX35D6+9DP/bKyDzQOZH8180fYpuDdTLhLl3AbFPcq0f4SmdeoVw/RYKWT/Cgyc1j3D9FjHnhgUoByxEeBHC86Mvzg2L4d9LQF4FWRqG3DCIkJvFhNwsE+LbhHv2agnh+i0Xsn6E29DqVcL1W8GcG5ahHLAc4RUIL02VG1bCv18DeR3kjTDkhqGE3Kwk5GaVEN8m3MFTrxGu32oh60e4KaVeJ1y/Ncy5YRXKAasRXoPwG6lyw5vw77dA3gZZG4bcMJyQmzcJuXmHmZt3EAdvIfw2wmtTcbMO/v0uyHqQ96L5Prymn/HnMuy3zSHk533D9yE0V+8z7ENsYPbL7ZEX/G8D8sURCG+JvNgvN8L/9gHIhyAfXcEvrdBe5z4kM4dhTV83/ANi2uaNDHa/IeQDYoT8qDcM/5lN/QVR9zNwvcZwu/XeIkdsv9koPD1qqHpuIuyDCLlWbxruN/qcYxOD33xMXGdTPjv4MdKVei28TLljreE+MIgpd7wjJHdsJswdhFyrdwTkjs0MfvMJU+74hDF3uJhyx3rDfaA/U+54T0ju+JQwdxByrd4z3G/cTPGy0XC7n2SKlw+ExMtnhPFCyLWiXD+7faFP0f7PZwhvusK+0Bb437aCfA7yRXBfSP/dDREX9gj0v8vnuDCH3uM5G/zftkWH9zs2thHX7ZTX9mhGhbdH08/7JeFGLZfdX0ZfWGCiedmaTA5d7YLUgwJpGwrM9lnRNx5nvThIv4K/+xpkB8hOxs1bvQ79S5j9zfzfMDXuet5iEeeTWe6IC2uAX9TrPbRE6HMFzr8sG3VDnVulALwWu4Jxsjs6uCApC7grmOTw2O7gouIX+c2FEiE7lyvoXGoXYVLdHU1LLnU3p4Nyl4wE7da6ap6p1+BbpmTyLfJ7KWvxHeFa6HX4KuLSF9X8ETxrqyjXgEvHPdQ6cnQRXzE8fm4y/AhY272H45iD6bH7OkbHDNXm7wkf4Qn9RlFywZwkVcp812KS/N7wJPm/Km7yo9Zepu5obxi6I5PX9Qen01I/CEgi+yR0Wv0ZHgU+FdBp7WPotD4T0mntI+y09hN2WoR+oz5zOi0RSXL/NdppuSg7gh+ZOq0f5XVapOv6k9NpqZ8EJJED3EmEouM4wPBxmwOElfygHGdnq5gSnP2ghMcK05+hf2aqmD+jY+CsEfLutEQiPQ8FT/cOo0clFmehUp5Lv20Mz4qfC3hGPsRg9xdX1+6kNPQ7x/dhBru3henyoxXaSxH6pSLkWm0jvvyYA60dvpSocVmEtwTvWMWBHAH8S5gvLB5hurD4azSjwr8yXFj8zfALi9ru3xjuw4TT2X5hcraj0YwKH2VwtmOGO5u2+5iQ27G/BXWlrqi/R5vfQf0ebfZj0HHigNc3X7NG2PilR7lcbuXxgmoW6OhP8rmSfQmxsQnxsS6/xx9wWa7YuECyBbr54z3xMOxRSQmWFbASEgMq9mzq+RJ8SWB1nOW34P8EYv0+MNsT7/f4Am7L4/FbccpjJcb7kv1e5U2IT4x1uxICcW4rScW6LW+8Sqnuw/Kcf0/hSOND6Fb14SA+Ae9/gPwZHd4bvn8y7EdE2PET2suF1+JkMC+dSn3DV/8P/6YaOxV9aWWjbmn/JEjmycGrtCcJC8MpJnKpEw6lzX+huZTP7XJ53frvfH5LefzwcOZy+RM9VpKVkORKjveo+IDH5XEn+ZMSYc4EFbACCUnxAd95vcLZGf3F1Bn9Hc2o8N8MndFpwzsjbffpMHVGFAngNENndIZpc/NM9MWVkpK3lG6Jei3+Ye4SrdBe5+z+h6FLHEbYJf4rYA3/ZfCds0xxdDaa70se9FqcMtyf/hPgT/8x+FNEKR5/0vNy+ZPe1jrOsBZZSpntA78w2R1J7AN5grbr9Ux5ao1E+F/0scoT6Mn2D4RTfD0r/P9dB5Kt1Pmn3OwR599Tv0w+wLRRN+S5A0lxgbhYvycl5jjXonQE/VpQ61hWgI5bmHyKWs+spWToqe+JU82FH4CvL3WNXy7QCxBBOy+brgxf7kB6XzM7U4Ol5y3G46Murs9j52BaixwC1+IGwrXQ6/BNxKUvqvkjeNZW3VDKfB1zUuvIkQSzlqJ30K8F3AbLyWD3DiGfmMKOGarNueicXBH6jdrRSEySZLv/LSFJ5jI8Sbok3P/OzdQd5Q5Dd2TyuuZxOi2VR0ASuZE7iVB0HFpJ6ssghFsCFy1iqPbuEvBF6naP/6HanZewG9rldDAikk9eSh21cqm/JPWxmy4cbvRBeEL2y3+T8U2g1M0gt4DkK8X7Jam/FqJPmPkNP1B7646IiDgGu78V8q3itxImurV16Ob61vDC8zaT3+wR4jcFCP1mPaHf7DHcb9Yy+c1eIX5TkNBvNhH6zV7D/UbX0VsZtjpvM7w+a7sLMNh9u+F2H4UckZ/B7juId5hS97i3oUs+tyN8R6nL97iF4H8rDHInSJFS/L/8fBPhA3IhwrmKEnITzk8hFCX2qZRXsVKMChcrRT9vcUJn4LK7eKkLC0w07zln059cj4zgd7abmG4mEa+JCyexEsE1jwq+lwy+R2sfpM7wmuARecy+tYTPJkqWunAVNHU1KYGqRhTCJa9QTUrB/xYDUhqkTCm+36rX66HX2uRzj7LMXU6o+ulgLsvQ5ewzvJsvxWT3fiG/q07Ij6K0OZwfoh5cIvS5wv0zSeWChat8qYiLPzBdDiXxlLHy6NA55UXdyuNFDPVnksoRdm/lS9GSS50odPIpJ+OKb6zmmCNZVmC6bFGB77KF2grbhz6G7cMDhhfM7UzbpgeFbJtWJNw2JeRaHTTcb3S8xDP4zWHD7f6SKV6OCImXSoTxQsi1OiIgXu5i8JvfDLf7K6Z4OSokXizCeCHkWh0VEC/VGPzmuOF2f80ULyeExIsijBdCrtUJAfFSncFvThpu9w6meDklJF5chPFCyLU6JSBeajD4zWnD7d7JFC9nhMSLmzBeCLlWZwTEy90MfnPWcLt3McXLf0LixUMYL4Rcq/8ExEsdBr+JbGy23buZ4iVrYxnxEksYL4Rcq6yG+42Ol7oMfnO94XZ/yxQv2YXESxxhvBByrbILiJd6DH6T03C7v2OKl1xC4sVLGC+EXKtcAuKlEYPf3Gi43d8zxUteIfHiI4wXQq5VXgHx0pjBb24x3O69TPGST0i8xBPGCyHXKp+AeGnC4DcFDLf7B6Z4KSgkXioTxgsh16qggHhpxuA3dxhu9z6meCkkJF6qEMYLIdeqkIB4acXgN0UMt/tHpngpKiReqhLGCyHXqqiAeGnN4DclDLf7J6Z4iRISL3cRxgsh1ypKQLy0YfCbUobbfYApXmKExEs1wngh5FrFCIiXBxn8pqzhdh9kipdyQuKlOmG8EHKtygmIlwQGv6louN2HmOKlkpB4qUEYL4Rcq0oC4iWJwW9chtt9mCle3ELipSZhvBByrdwC4iWZwW/iDLf7CFO8eIXESy3CeCHkWnkFxEtHBr+pbLjdvzDFSxUh8VKbMF4IuVZVBMRLVwa/qWa43b8xxUt1IfFyN2G8EHKtqguIl+4MflPLcLuPMsVLbSHxUocwXgi5VrUFxEtPBr+pa7jdx5jipZ6QeKlLGC+EXKt6AuKlN4PfNDTc7t+Z4qWRkHipRxgvhFyrRgLi5QkGv2lquN0nmOKlmZB4qU8YL4Rcq2YC4qU/g9+0MNzuP5jipaWQeGlAGC+EXKuWAuLlKQa/uc9wu/9kipfWQuKlIWG8EHKtWguIl4EMfvOA4XafZIqXB4XESyPCeCHkWj0oIF6GMfhNO8Pt/ospXtoLiZfGhPFCyLVqLyBeRjD4TaLhdv/NFC9JQuKlCWG8EHKtkgTEyygGvwkYbvdppnjpKCRemhLGCyHXqqOAeBnD4DedDLf7DFO8dBYSL80I44WQa9VZQLw8y+A33Qy3+1+meOkuJF6aE8YLIdequ4B4mcTgN70Mt/ssU7z0FhIv9xDGCyHXqreAeJnC4Dd9DLf7P6Z46SskXloQxgsh16qvgHiZxuA3/Qy3O6IQT7z0FxIvLQnjhZBr1V9AvLzI4DcDDLc7kileBgqJl3sJ44WQazVQQLzMYvCbIYbbnZUpXoYKiZdWhPFCyLUaKiBeXmLwm+GG230dU7yMEBIv9xHGCyHXaoSAeJnL4DejDbc7G1O8jBESL60J44WQazVGQLwsZPCb8YbbnZ0pXiYIiZf7CeOFkGs1QUC8LGbwm4mG252DKV4mCYmXNoTxQsi1miQgXl5l8Juphtt9A1O8TBMSLw8Qxgsh12qagHhZxuA30w23OydTvMwQEi8PEsYLIddqhoB4eYPBb2YabndupniZJSRe2hLGCyHXapaAeFnN4DdzDLc7D1O8zBUSLw8Rxgsh12qugHh5k8Fv5hlu941M8TJfSLy0I4wXQq7VfAHx8jaD3ywy3O68TPGyWEi8tCeMF0Ku1WIB8fIeg98sNdzum5niZZmQeOlAGC+EXKtlAuJlA4PfrDTc7luY4uU1IfGSQBgvhFyr1wTEywcMfrPKcLvzMcXLaiHxkkgYL4Rcq9UC4uUjBr95y3C78zPFy9tC4iWJMF4IuVZvC4iXzxj8Zp3hdhdgipd3hcSLnzBeCLlW7wqIl60MfvO+4XYXZIqXDULiJZkwXgi5VhsExMsXDH7zoeF238YULx8JiZcAYbwQcq0+EhAv2xn8ZrPhdt/OFC+fCImXjoTxQsi1+kRAvHzD4DdbDLe7EFO8bBUSLw8Txgsh12qrgHjZzeA32wy3uzBTvGwXEi+PEMYLIddqu4B4+Y7Bb7423O47meJlh5B46UQYL4Rcqx0C4uV7Br/ZZbjdRZjiZbeQeOlMGC+EXKvdAuLlJwa/2WO43cWY4uV7IfHShTBeCLlW3wuIl4MMfrPPcLuLM8XLfiHx0pUwXgi5VpTrdx3MMR0Ibh6cryLYXAmkCvBuwbsCcYG4QWrBmAfeY0HiQLwgDWDMB+/xIJX1/x9ICxirCu93gVQDqQ7SDsZqwHtNPQ9IbZBOMHY3vNcB0b/drn+Pug+M6d/Z1b8dqn8PUf/G2xAY079dpX+PR//GiP7dhPEwpr8PXn/Htf7eXv1dpNNhTH/Hov7eOP1dWPr7febBmP7eEv1dDPrz5fozsythTH8WUH++SX9mQ99DXwdj+n6tvjOo70Hpux2bYUyfWetzOH22oPdLv4YxvQ+kn211v657kH0wpnOr9peUF3Esxg4uERFRthTDbx7Q+biVNehLqV9U8zOtraJcAy4du1PrSK1giVI8DnqAuUiGqp+2uTuD3QeZiuR1jI4Zqs09CAsuod8oSi6Yk6RKme9aTJI9DE+S/6vikcSGlyUMwp6Ei6jXL2twHfW8xXiIF7GuvZxOS/USkER6m95pRTF1WocFdFq9Gew+IqTT6k2YjB4l7LQI/UYdcTotEUny0Wu003JRdgSPMXVaj8nrtEjXtY/Taak+ApJIX9M7rZJMndZvAjqtvgx2HxXSafUlTEaPE3ZahH6jjjqdlogk+fg12mm5KTuCJ5g6rSfkdVqk69rP6bRUPwFJpL/pnVY0U6d1XECn1Z/B7hNCOq3+hMnoScJOi9Bv1Amn0xKRJJ+8RjstD2VH8BRTp/WUvE6LdF0HOJ2WGiAgiQzkTiIUHYdWMiup4e6LNnCt0F4XLWKo9g6SEzhs1VdC4Awy/RFFwh2TwUzVdzBf9VUj8kREFGd4BBpC7FDk354I+hVksHuo0ymo9lnN1/FpSv+UStShSPN1HOYQZanyOczXcbjpLYT+UNUQhpR/0vAPEuoWZziD3aeEfJBwBOGzESHX6pThfqNbwxEMfjOSqU0eGdRVapKvKCDJj3KqsaUsAUSNdoiylEsAUWMcoizlEUDUWIcoS8UJIGqc6Q8itZgeRE4LeBAZx2D3GSEPIuMJH0QIuVZnBDyIjGfwmwlMDyIThD+I+AQk+WecamypygKIetYhylJVBRA10SHKUtUEEDXJIcpSNQQQNdn0B5EGTA8iZwU8iExmsPs/IQ8iUwgfRAi5Vv8JeBCZwuA3U5keRKYKfxDZKeB+wjSnGluqtoBq/JxDlKW2C4io5xnuy557RZIqqixdDlLmCrUETHfuDarppczXcYYM57QClM75Ap3RLqnO+YIA53zR9AfOFkwPnJFNzH/gfJHB7qxNeLIR9QPnTMIHTkKuVVbD/UYn8ZkMfjOL6YFzFtI15UXcdbkoC9tsp+tSswUUtpeEPBK4KZ1zjuOcao4A55wrxDk9lM75suOc6mUBzvmKEOeMpXTOeY5zqnkCnHP+tZg5FzibKWqBAOdcaPpmSjumzZTrBWymLGSwO7uQzZRFhJsphFyr7AI2UxYx+M1ips2UxfybKV7KwrbE6brUEgGF7VUhXZeP0jmXOs6plgpwzmVCnDOe0jmXO86plgtwzhVCnDOB0jlXOs6pVgpwzteuxcz5urOZol4X4JxvmL6Z0olpMyWngM2UNxjsziVkM2UV4WYKIdcql4DNlFUMfrOaaTNlNf9mShJlYVvjdF1qjYDC9qaQrstP6ZxvOc6p3hLgnG8Lcc5kSudc6zinWivAOd8R4pykn6RY5zinWifAOd+9FjPnemczRa0X4Jzvmb6Z0odpM+VGAZsp7zHYnVfIZsr7hJsphFyrvAI2U95n8JsNTJspG9g3U1yKsrBtdLoutVFAYftARtflIv0M2oeOc6oPBTjnR0Kck/QzaJsc51SbBDjnx0Kck/STFJsd51SbBTjnJ9di5vzU2UxRnwpwzs9M30wZwrSZcouAzZTPGOzOJ2QzZQvhZgoh1yqfgM2ULQx+s5VpM2Ur/2ZKHGVh+9zputTnAgrbF0K6LtLPoG1znFNtE+Cc24U4J+ln0L50nFN9KcA5vxLinKSfpPjacU71tQDn3HEtZs6dzmaK2inAOb8xfTNlPNNmSgEBmynfMNhdUMhmyi7CzRRCrlVBAZspuxj8ZjfTZspu/s2URMrC9q3TdalvBRS274R0XaSfQdvjOKfaI8A5vxfinKSfQdvrOKfaK8A5fxDinKSfpNjnOKfaJ8A591+LmfNHZzNF/SjAOX8yfTNlOtNmyh0CNlN+YrC7kJDNlAOEmymEXKtCAjZTDjD4zUGmzZSD7JspbtLfUPzZ6brUzwIK2yEZXZeb9DNohx3nVIcFOOcRIc5J+hm0XxznVL8IcM5fhTgn6ScpfnOcU/0mwDmPXouZ85izmaKOCXDO303fTJnHtJlSRMBmyu8MdhcVsplynHAzhZBrVVTAZspxBr85wbSZcoJ/M4X0NxT/cLou9YeAwvankK6L9DNoJx3nVCcFOOcpIc5J+hm0vxznVH8JcM6/hTgn6ScpTjvOqU4LcM4z12Lm/MfZTFH/CHDOf03fTFnJtJlSQsBmyr8MdkcJ2Uw5S7iZQsi1ihKwmXKWwW/+Y9pM+Y9/M4X0NxQjYpyui3INuHTMEhMhousi/QxapOOcKlKAc2YV4pykn0G7znFOdZ0A58wmxDlJP0lxveOc6noBzpn9WsycOeiMFruZkkOAc95ArSO1guuYNlNKCdhM0eRQ2x0jZDMlJ51jKkKuVYyAzZScDH6TizBR4M2UXDHsmymkv6GY2+m6VG4BhS2PjK7LQ/oZtBsd51Q3CnDOvEKck/QzaDc5zqluEuCcNwtxTtJPUtziOKe6RYBz5rsWM2d+ZzNF5RfgnLeavpmymWkzpayAzZRbGR6KywnZTClAuJlCyLUqJ2AzpQCD3xRk2kwpyL6Z4iH9DcXbnK5L3SagsN0upOsi/QzaHY5zqjsEOGchIc5J+hm0wo5zqsICnPNOIc5J+kmKIo5zqiICnLPotZg5izmbKaqYAOcsbvpmytdMmykVBWymFGd4KK4kZDOlBOFmCiHXqpKAzZQSDH4TxbSZEsW/mUL6G4olna5LlRRQ2KKFdF2kn0Er5TinKiXAOWOEOCfpZ9BKO86pSgtwzjJCnJP0kxRlHedUZQU4Z7lrMXOWdzZTVHkBzlnB9M2UfUybKS4BmykVGB6K3UI2UyoSbqYQcq3cAjZTKnJswjFtplTi30wh/Q1Fy+m6lCWgsCkhXRfpZ9BcjnMqlwDndJvedQ0uwdN1eWLMr54ehuoZy1Q99bzFmJxU+4DuQiOJ5y1bim5d4wT4UxyDP3mZ/MnL6E9csRUnoCNn8QEhT3I+wic5Qq4V5frhGPIxxtCvwd0Qk3NyvICcHM8Qj5WZcnJlpCv1Whxl2l2rLCQ3VSHMTb81ppursoCaVoUhhqoyxVDVoK76399EXPqiXGuO9T4Uab6Od3HtuGQlVrR/CTqHxUaHOlc1wmSUDebIFXHp1ioH8dWIgzblVT2GUeHqMfTz1iB0BjaiYi4sMNG8ltSsWjGH+TrWvBazak3CQKolNKvWYsqqtWMYFa7NkFXvNjyrarvvdrJqyku5BGTVOtdiVq1DGEh1hWbVukxZtV4Mo8L1GLJqfcOzqra7PkNWtdM1VPtrBCsAdfDXiDGzijaIcapcnIAq1/BarHINCR29kdAq14ipyjWOYVS4MUOVa2J4ldN2NxFS5XQ1bsBQ5eoTBlkDQr6bOlVOVRZQ5Zpdi1WuGaGjNxda5ZozVbl7YhgVvoehyrUwvMppu1sIqXK6GjdlqHJNCIOsKSHfLZ0qp6oJqHL3XotV7l5CR28ltMq1Yqpy98UwKnwfQ5VrbXiV03a3FlLldDVuyVDlWhAGWUtCvu93qpzaGWm+jm2uxSrXhtDRHxBa5R5gqnIPxjAq/CBDlWtreJXTdrcVUuV0Nb6focq1Jgyy+wn5fsipcmq7gCrX7lqscu0IHb290CrXnqnKdYhhVLgDQ5VLMLzKabsThFQ5XY0fYqhybQmD7CFCvhOZsmck6fop0t/vTSLkQmplT4oxX0f/tVjZ/YTBnSy0siczVfZADKPCAYbK3tHwyq7t7iiksusOJJGhsicQBlkiId8Py6jspL8v/YhT2dUjAip7p2uxsnciDO7OQit7Z6bK3iWGUeEuDJW9q+GVXdvdVUhl1x3IwwyVvSNhkD1MyHc3GZWd9DeMuzuVXXUXUNl7XIuVvQdhcPcUWtl7MlX2XjGMCvdiqOy9Da/s2u7eQiq77kC6MVT2roRB1o2Q70dlVHbSX4p9zKns6jEBlb3PtVjZ+xAGd1+hlb0vU2V/PIZR4ccZKvsThld2bfcTQiq77kAeZajsvQmD7FFCvvvJqOw+ysre36nsqr+Ayv7ktVjZnyQM7qeEVvanmCr7gBhGhQcwVPaBhld2bfdAIZVddyD9GCr7E4RB1o+Q70EyKjvp74wPdiq7Giygsg+5Fiv7EMLgHiq0sg9lquxPxzAq/DRDZR9meGXXdg8TUtl1BzKIobIPJAyyQYR8D5dR2ZMoK/sIp7KrEQIq+8hrsbKPJAzuUUIr+yimyj46hlHh0QyVfYzhlV3bPUZIZdcdyHCGyj6MMMiGE/I9VkZlJ/2t9XFOZVfjBFT28ddiZR9PGNwThFb2CUyV/ZkYRoWfYajszxpe2bXdzwqp7LoDGctQ2ccQBtlYQr4nxpjNh/abiQx8PEvIx0RCPiYx82GF9jr326uTYuh5xp2bFeJLF6EbIi68cHKfjHRnWRxKI7JGhKeSTiZ0ukik55Rg0p8qZdG59JvMEDFVm5idubXdUxjsvuvq2p2Uhn7n+J7KYHe1MP2quRXaSxH6pSLkWlGun+Y2N1o7yvU7e+X5XEkB5Y5N9sZacQmeWH+c2+V3eS2/JzagwJFc8R5wo0CSx+f3udwBl9eVdDbo48PynH9PSdAa6/hM+d+nBvE0eH8O5HmQbEE7cVKPQP//lHY/z/UcT6unC6/F9GCBmxETXJCUiq3/h39Tjc2IubSaUwff8wStaHLg/Gs6YVs7Q8QGoqUobX4BzaV8bpfL69Z/5/NbyuOHMuJy+RM9VpKVkORKjveo+IDH5XEn+ZMSYc4EFbACCUnxAd95vcK5r/IC077KizGMCr/IsK8y0/B9FW33TCH7KjOCulLPO4vYWVOStZ4XV0pK3nSHuDmaPnkNIzz9mC1gH2I2gz+9xORPLyFdqdciFnzp/mj6tajVxGwfGAA2z2Gwu3aYnrRC1XMO4R4mIdeqtuF+E8cUL3UNt3sgU7zUExIvcwnjhZBrVY9xZ0L/ew56yp+LcEr9TGtH4GV4fwVkXph3BOYJ3BGYH+zHF6TeEZhvsyOwIAw7AvMIdwTmEz4QLRCyI0Bp80KhOwILmXYEFsUwKryIYUdgseE7AtruxUJ2BBYEdaWedwnTE9wS5h2BBQy8cemrOwKtM7W+xYLzvArzLwVZBrIcZAXISpDXQF4HeQNkFchqkDUgb4K8BfI2yFqQd0DWgbwLsh7kPZD3QTaAbAT5AORDkI9ANoF8DLIZ5BOQT4OVG3Ov9ckRcfHYUpuxZTZjy23GVtiMrbQZe81m7HWbsTdsxlbZjK22GVtjM/amzdhbNmNv24yttRl7x2Zsnc3YuzZj623G3rMZe99mbIPN2EabsQ9sxj60GfvIZmyTzdjHNmObbcY+sRn7NDgWEcGTZ15myLkNmZ4AryPW81WyZthSS4nm0rwsI+wrGhnORfJ5RdXy0G12pdy5WBHqXJ4L9zdWEnLR2FwuLHxn5bVQbHZdfP/l9czPZaW+S/MGIRdNDOQiLnDp/aFVmbPZZ3cXaXVm5vLZ32taQ8hFU7O48F7uLtebGbXZe/l7YW9lbC7Xle6YvU3IRTNTuPBe+V7d2vTbnOYdvXfSO5c3zfVT6wi5aH71ubDSoad6Nz02W+myWa1Pe67YdK6feo+Qi3uuJheedOup3r+izZ5ABmxWG640lzdD66c2EnLR4upw4cugnuqDy9gcH3Bl1Gb1of1cVibWT31EyEXLcHNhZUpPtelSm1UmbVYfp57Ln+n1U5sJubg3fFy4Q9BTfYJsdgVCsll9Sre/q/C+RahctAoTF1ZoL0W4P6AIn29VE0Iu7hPCBeFzkCLs41VzQi5aC+GCsN9ThP2KaknIxf1CuCCsa4owL6v7CLloI+TzXITxqwj9T1Gun/bfF+FQpFhwvk+DZ4Gbg2eDm4JnhR8Gzw43Bs8S3w+eLa4PnjWuC549rg2eRb4VPJtcEzyrXBU8u3w9eJa5Mni2uTx41qnPFPQZRepX6kstofreK4Q96GcxZJdarHBeavmMro+86FLLlhhGhbfE0M+7ldAZuOzeioKCaN5zzhYZEZ6rjK/E8CT71GsSagBiR/5c+xr1SbEmckQenpNtqgXGp/Gfo4CjXguts14P6iuLlN+C9gWx42aU97QcVvPzBcONhm0xPP6k5x10GX9Ka560gptrLbYzrcX2ENbiavnFl0xr8aVAv/iKaS2+Cq5FOL8Ch7JA44bi62DjssOumFqhvZQm9XOGzohjgbmccGeM2XZrB9jJYPc3TMH3TQiJKI2X2sG0FruY1mIX41q8wrQWnQz/WiiueOhs+NdCcfl+FyHbiIR+qQi5VpTrpxsWvZVot6MQkcH1TMuf8JwcNYtqTXDzthv5P7nSO5mKwO4r7ACkMY1K67+jdd7NkBR6GHLOk5HmLVSbv40xM8FQcoH98lvUnGSWn7TWnJKf7/A5gdsNseH3qoA/4I71xrsSVZw7Li7gCXjjfB5/INaT4PcmK0+C2xWf7LUCypec7I11J3njAvH+pLgATtrK73Z7/PGJSSrWFZeQaPn87gQr4PG6XVaC3+31+92+uLgEt9sf5wv44uHBOCHg9lmxXm+8Fedyx7u4+PkOPcVSFYW0dj3wnFKKwh6JRWEPc1HYw1AUehlSFC7rxN7z3zJAmXS+N7Qo9GJKOt8TFIW0thMp+dlraFHg4mfv/6OtzR+CO4/7OM4JL7ddaIX2UtznWVR2RzLaHaqO+w3fctWOuZ+hgP7I1Ez8yLjNuI9pLX5iWoufmLdcOdbiUcO3XLni4THDt1y5fL+PkC1XQr9UhFyrPs6Wa+rXuZpFtSa4qTzA+XS9n6kIHGB8utY6H2BICv2EbLnuJ2wED8aYmWD6MT29HQzDlislPz8TPl33IXy65uLnZxt+MvogldYWKyU/h5jy5yGCdUhrF4hyHQ4zrcNhYf5whGkdjgjzh1+Y1uGXdBzJmNzY2ahL5se4afxVYtP4K3PT+CtD0/ikGd+9kxTOJPcb4VyUTeOTTE3Jb+loGtNaB3BQlaSsgBUPHZblTYrzJsb7XYk+6KsCsW6/m5KfozF0jR5l08jFz9Er7DhSfHqGYwfqGOGDF/ZL6lOHTwn98ncym31sv0h0jIHr44aftmhejjPYfYKpT9Dz5gj++0Wb81fKteZY7/ZZzdfxD+qmV4rTDjD8KEjb/AeD3QOFfLHIH4QF6U/CIkzoN4qSC+Yk+b/m41pMkn+aniS5uteT12hHc8pwu7XNpxjs/oupk/srhveXEk4yrMXfhvuAfmL7m8Hu0wJ8/zSD3WeYfP8Mo+9z5YEhhv8+JpcPDBXy+5j/EDa0hFyroUw7f/84OwHsOv7L3eRSPBH/yxD0w4U8Ef8rIOhD/qItIQn4LCEXhP6nRjg7CiKS7VnKZCu1Kh6KNF/H/xyiLFU+h/k6RpR2iFIVBRCVxSHKUpYAoiIdoizlEkBUVocoS3kEEHWdQ5Sl4gQQlc0hylI+AURd7xBlqcoCiMruEGWpqgKIyuEQZalqAoi6wSHKUjUEEJXTIcpSOwXs9eVyiLJUbQERldshylLbBURUHocoS9UVEFE3OkRZqr4AovI6RFmqoQCibnKIslRjAUTd7BBlqaYCiLrFIcpSzQUQlc8hylItBBCV3yHKUkcEPEfd6hBlqVYCIqqAQ5SlWgsgqqBDlKXaCCDqNocoS20QUKNud4iyVFsBEXWHQ5Sl2gkgqpBDlKU6CCCqsEOUpRIFEHVnaXodz72ofxCA8Aso1GnCb9IpQriAmlz9GcniiGw9f44g/i/mAo5A41kQjkQ4K8LXIZwN4esRzo5wDoRvQDgnwrkQzo1wHoRvRDgvwjchfDPCtyCcD+H8CN+KcAGECyJ8G8K3I3wHwoUQLozwnQgn5ziPi8JYMZDiICVAokBKgkSDlAKJASkNUgakLEg5kPIgFUAqglQCsUAUiAvEDeIBiQWJA/GC+EDiQSqDVAGpCnIXSLXSF77ekPzDJzCH/sKQCNp5rWLBearr+ACpCVILpDbI3SB1QOqC1AOpD9IApCFII5DGIE1AmoI0A2kOcg9IC5CWIPeCtAK5D6Q1yP0gbUAeAHkQpC3IQyDtSp9fsHOxEFy76jg+gu81bMZq2ozVshmrbTN2t81YHZuxujZj9WzG6tuMNbAZa2gz1shmrLHNWBObsaY2Y81sxprbjN1jM9bCZqylzdi9NmOtbMbusxlrbTN2v81YG5uxB2zGHrQZa2sz9pDNWLvSF77oJOWV0a/PTav+nIuvEOdKPvfblZaqQTSXzis1S9PZONqMr5q+gs3npla1QrfZlfKDPbVDnctz4cd/7ibkYoy5XFj4B4/qhGKz6+IfT6qb+bms1D/EVI+Qi7EGchEXuPTHp+pnzmaf3Q9ZNcjMXD77H8VqSMjFOLO48F7uh8AaZdRm7+V/VKxxxuZyXekHypoQcjHeFC68V/5RtqbptznNHwxslt65vGmun2pOyMWEq8+FlQ491T3psdlKl82qRdpzxaZz/VRLQi6euZpceNKtp7r3ijZ7AhmwWbW60lzeDK2fuo+Qi2evDhe+DOqpWl/G5vhAhm1W99vPZWVi/VQbQi4mhpsLK1N6qgcutVll0mb1YOq5/JleP9WWkItJ4ePCHYKe6iFksysQks2qXWm6/Tx/TTouJgv5HkDC/QFF+HyrxhJ+D+AUIVwQPgcpwj5eTSDkYqoQLgj7PUXYr6iJhFxME8IFYV1ThHlZTSHk4jkhPy5PGL+K0P8U5fqlnBMWC77j84jU5xX4PAOfd+DzEHxegs9T8HkLPo/B5zX4PAef9+DzIHxehM+T8HkTPo/C51X4PAufd+HzMHxehs/T8HkbPo/D53X4PA+f9+HzQHxeiM8T8XljJYQthBXCLoTdCHsQjkU4DmEvwj6E4xGujHAVhKsifBfC1RAuinAxhIsjXALhKIRLIhyNcCmEYxAujXAZhMsiXA7h8ghXQLhiEKcklPbw7w4gCSCJIEkgfpBkkABIR5CHQR4B6QTSGaQLSFeQbiDdQXqA9ATpBdIb5FGQx0D6gPQFeRzkCZB+IP1BngR5CmQAyECQQSCDQYaADAV5GmQYyHCQESAjQUaBjAYZAzIWZBzI+NLnbUiJ7RrBdyukl9vS5/9aUs8b8t5fadp8lnKuquctFsS5Iy7UB/3vx26KiDgbxH0Qfu6W8+/4HsWUmAv/+9QgfgbmfhZkYunzv7WcOyI8v7U8sTRP7Yyg1dOF12JS0B8nl464+OBb/w//phrTf5QllVLUhR0vYmiH4YHApNJ0gTCZidxI4vWjtHkKmiutH2BP4zeclQ7EXBGX+k9EBH0gTilN34Tp19TSjApPLU0/7zRCZ+Cye1rpCwtMNC/Lb1dODupKPe9zTBVWz8t141B3GpMZeOPSV3cEnDckn4f5p4PMAHkB5EWQmSCzQGaDvAQyB2QuyMsgr4DMA5kPsgBkIcgikMUgS0BeBVkKsgxkOcgKkJUgr4G8DvIGyCqQ1SBrgpUbc/986Utvsk23GZthM/aCzdiLNmMzbcZm2YzNthl7yWZsjs3YXJuxl23GXrEZm2czNt9mbIHN2EKbsUU2Y4ttxpbYjL1qM7bUZmyZzdhym7EVNmMrbcZesxl73WbsDZuxVTZjq23G1pS+cEOSI888w5BzFxh+GzFFz+fJmmFLTSeaS/Myg7CvWCjkZugLodv8v5uhL4Y6F7oZOpOQi0VCbobOCsXmVDdDZ2d+rktuhr5EyMViITdD52TOZtuboXMzM9dlboa+TMjFEiE3Q1/JqM1XuBk6L2NzXfFm6HxCLl4VcjN0QfptTvNm6ML0zpWOm6GLCLlYKuRm6OL02JzOm6FL0p4r3TdDXyXkYpmQm6FLS9PdDF1Wmu5m6HJCLpYLuRm6ojTdzdCVpeluhr5GyMUKITdDXy9NdzP0jdJ0N0NXEXKxUsjN0NWl6W6GrilNtx+ygPCmz2tCbl0R7g8owudbtZiQi9eFcEH4HKQI+3i1lJCLN4RwQdjvKcJ+Ra0g5GKVEC4I65oizMvqdUIuVgu5GUoYv4rQ/xTl+mn/nZPl/A0q/VoTPAtcFTwbfD14VrgyeHa4PHiWuDR4trgkeNa4KHj2qPcq9B6N3vPRe0h670zvxem9Pb2nqfdI9Z6r3mvWe9d6L1yfAegzBX1GkfqV+lJLyJ+0I+xB3yxNdqnFCuelljfp+siLLrW8VZpR4bdK08/7NqEzcNn9NgoKonnPOVtkRHiuMj5bmifZp16TUAMQO/Ja7WvUJ8WaSLt7tVZor3Mn21QLjE/j16KAo14LrbNeD+ori3gtQtXxHWLHzSjvaTms5ucdhhsN60rz+JOed9Bl/CmtedIKbq61eJdpLd4NYS2ull+sZ1qL9QL94j2mtXgvuBbZ0Fjql8kFGjcU7wcblw12xdQK7aU0qWsZOiOOBeZywo2lzbZbO8BGBrs/YAq+D0JIRGm81AamtfiQaS0+ZFyLZ5nWYlMT3ngIVT+uePj46tqd5pUTLt/fLGQbkdAvFSHXinL9dMOitxLtdhQiMrieafkTnpOjZlGtCW7ePkL+T670RqYi8NEVdgDSmEal9d/ROn/EkBS2GHLOk5HmLeTCV9rMBEPJBfbLTag5ySw/aa05JT8f43MCtxtiw+9VAX/AHeuNdyWqOHdcXMAT8Mb5PP5ArCfB701WngS3Kz7ZawWULznZG+tO8sYF4v1JcQGctJXf7fb44xOTVKwrLiHR8vndCVbA43W7rAS/2+v3u31xcQlutz/OF/DFw4NxQsDts2K93ngrzuWOd3Hx8zF6iqUqCmnteuA5pRSFzRKLwmbmorCZoSh8bkhRuKwTe89/ywBl0vnE0KLwOVPS+YSgKKS1nUjJz6eGFgUufj79f7S1+Vlw53ELxznh5bYLrdBeivs8i8ruSEa7Q9Vxq+Fbrtoxt3IUUKZm4nPGbcYtTGvxBdNafMG85cqxFtsM33Lliofthm+5cvn+l0K2XAn9UhFyrb50tlxTv87VLKo1wU3lNs6n661MRWAb49O11nkbQ1LYKWTLdSthI7i9tJkJZifT09v2MGy5UvLzJeHT9ZeET9dc/Hxpw09GH6TS2mKl5Ocrpvz5FcE6pLULRLkOXzOtw9fC/GEH0zrsEOYPO5nWYWc6jmRMbuxs1CXzY9w0fiOxafyGuWn8hqFp3GXGd+8khTPJ7aJsQAmbxl1MTcmudDSNaa0DOKhKUlbAiocOy/ImxXkT4/2uRB/0VYFYt99Nyc/u0nSNHmXTyMXP7ivsOFJ8eoZjB+pbwgcv7JfUpw5rCP3yOzKbfSynDvpTV98ycL3H8NMWzcseBru/Z+oT9Lw5gv+eY3P+SrnWHOvdPqv5Ou6lbnqlOO23hh8FaZv3Mtj9nZAvFtlLWJB+ICzChH6jKLlgTpL/az6uxST5g+lJkqt73XeNdjT7Dbdb27yfwe4fmTq5H0vz/lLCPoa1+MlwH9BPbD8x2H1AgO8fYLD7IJPvH2T0fa48sLfJtekDP4TpvlCoev5M2NAScq1+YNr5+9nZCWDX8RB3k0vxRHyIo+kR8kR8SEDQh9x0CUnAhwm5IPQ/9ZOzoyAi2R6mTLZSq+KhSPN1POIQZanyOczX8ReHKEtVFEDUrw5RlrIEEPWbQ5SlXAKIOuoQZSmPAKKOOURZKk4AUb87RFnKJ4Co4w5RlqosgKgTDlGWqiqAqD8coixVTQBRfzpEWaqGAKJOOkRZaqeAvb5TDlGWqi0gov5yiLLUdgER9bdDlKXqCoio0w5RlqovgKgzDlGWaiiAqH8coizVWABR/zpEWaqpAKLOOkRZqrkAov5ziLJUCwFERZRxiFJHBDxHZXGIslQrAREV6RBlqdYCiMrqEGWpNgKIus4hylIbBNSobA5RlmorIKKud4iyVDsBRGV3iLJUBwFE5XCIslSiAKJuKEOv47kX9Q8CEH4BhTpA+E06OQkXUJOrPyNZHJGt588RxEdKX8C/IPwrwr8hfBThYwj/jvBxhE8g/AfCfyJ8EuFTCP+F8N8In0b4DML/IPwvwmcR/g/hCLQOWRCORDgrwtchnA3h6xHOjnAOhG9AODnHeZwLxnKD5AG5ESQvyE0gN4PcApIPJD/IrSAFQAqC3AZyO8gdIIVACoPcCVIEpChIMZDiICVAokBKgkSDlAKJASkNUgakbJkLX29IvpECc+gvDImgndcqFpynHOheHqQCSEWQSiAWiAJxgbhBPCCxIHEgXhAfSDxIZZAqIFVB7gKpBlJdxxtITZBaILVB7gapA1IXpB5IfZAGIA3LnF+wc74RXLty2F+C7+VtxirYjFW0GatkM2bZjCmbMZfNmNtmzGMzFmszFmcz5rUZ89mMxduMVbYZq2IzVtVm7C6bsWo2Y9VtxmrYjNW0GatlM1bbZuxum7E6NmN1bcbq2YzVtxlrYDPWsMyFLzpJeWX063PTqj/lyoQ+V/K53660VHmiuXReqVCGzsafzfiq6SvYfG5qVTF0m10pP9hTKdS5PBd+/Mci5OKQuVxY+AePVCg2uy7+8SRX5ueyUv8Qk5uQi8MGchEXuPTHpzyZs9ln90NWsZmZy2f/o1hxhFwcMYsL7+V+CMybUZu9l/9RMV/G5nJd6QfK4gm5+MUULrxX/lG2yum3Oc0fDKyS3rm8aa6fqkrIxa9XnwsrHXqqu9Jjs5Uum1W1tOeKTef6qeqEXPx2NbnwpFtPVeOKNnsCGbBZ1bzSXN4MrZ+qRcjF0avDhS+Deqral7E5PpBhm9Xd9nNZmVg/VYeQi2Ph5sLKlJ6q7qU2q0zarOqlnsuf6fVT9Qm5+D18XLhD0FM1QDa7AiHZrBqWodvP89ek4+K4kO8BJNwfUITPt+ow4fcAnhDCBeFzkCLs49WvhFz8IYQLwn5PEfYr6hghF38K4YKwrinCvKxOEHJxUsiPyxPGryL0P0W5finnhMWC7/g8IvV5BT7PwOcd+DwEn5fg8xR83oLPY/B5DT7Pwec9+DwInxfh8yR83oTPo/B5FT7Pwudd+DwMn5fh8zR83obP4/B5HT7Pw+d9+DwQnxfi80R83lgI4cII34lwEYSLIlwM4eIIl0A4CuGSCEcjXArhGIRLI1wG4bII50I4N8J5EL4R4bwI34TwzQjfgnA+hPMjfCvCBRAuiPBtCN+O8B1BnJJQGsG/G4M0AWkK0gykOcg9IC1AWoLcC9IK5D6Q1iD3g7QBeQDkQZC2IA+BtANpD9IBJAEkESQJxA+SDBIA6QjyMMgjIJ1AOoN0AekK0g2kO0gPkJ4gvUB6gzwK8hhIH5C+II+DPAHSr8x5G1Jiu0bw3Qrp5bb0+b+W1POGWg/6l6HNZynnqnreYhF8dyK2RfPeiXgS9H8KZADIQJBBIINBhoAMBXkaZBjIcJARICNBRoGMBhkDMhZkHMh4kAkgz4A8CzIRZBLIZJApIFNBpoE8B/I8yHSQGWXOLxhezyfLXHp2/ZTN2ACbsYE2Y4NsxgbbjA2xGRtqM/a0zdgwm7HhNmMjbMZG2oyNshkbbTM2xmZsrM3YOJux8TZjE2zGnrEZe9ZmbKLN2CSbsck2Y1NsxqbajE2zGXvOZux5m7HpNmMzyvDfiXiyDN2diKeI5tJ5ZUAZOhuvbyrjTsTA0G3+352IQaHOhe5EDCbkIru5XFx0J2JIKDanuhMxNPNzXXIn4mlCLnIYyIXdnYhhmbPZ9k7E8MzMdZk7ESMIubjBLC4ueydiZEZtvsKdiFEZm+uKdyJGE3KR0xQu0rgTMSb9Nqd5J2JseudKx52IcYRc5Lr6XKTrTsT49NiczjsRE9KeK913Ip4h5CL31eQiA3cini1DdydiYhm6OxGTCLnIc3W4yPCdiMll6O5ETClDdydiKiEXN4abi0zeiZhWhu5OxHNl6O5EPE/IRd7wcRHSnYjpZejuRMyg2ztUnzei4+KmMHFhhfZShPsDivD5VuHns1C5uFkIF4TPQYqwj1e5CLm4RQgXhP2eIuxX1I2EXOQTwgVhXVOEeVndTMhFfiYuqO9EEMavIvQ/Rbl+XOeFpSN4zwtfgF7oRZCZILNAZoO8BDIHZC7IyyCvgMwDmQ+yAGQhyCKQxSBLQF4FWQqyDGQ5yAqQlSCvgbwO8gbIKpDVIGtA3gR5C+Rtm/PCF2zOdV60GZtpMzbLZmy2zdhLNmNzbMbm2oy9bDP2is3YPJux+TZjC2zGFtqMLbIZW2wztsRm7FWbsaU2Y8tsxpbbjK2wGVtpM/aazdjrNmNv2IytshlbbTO2xmbsTZuxt2zG3i7Df174AuF54YuE54UzCZ8hSwo5L5xFeF44m/C88CVCLqKFnBfOITwvnEt4XvgyIRelhJwXvkJ4XjiP8LxwPiEXMULOCxcQnhcuJDwvXETIRWkh54WLCc8LlxCeF75KyEUZIeeFSwnPC5cRnhcuJ+SirJDzwhWE54UrCc8LXyPkopyQ88LXCc8L3yA8L1xFyEV5IeeFqwnPC9cQnhe+SchFBSHnhW8Rnhe+TXheeKAWHRcVhezFE+4PKMLnW1WKcC++khAuCJ+DFGEfr8oQcmEJ4YKw31OE/YoqT8iFEsIFYV1ThHlZVSLkwiXkvJAwfhWh/ymXgPPCshG854VroRd6B2QdyLsg60HeA3kfZAPIRpAPQD4E+QhkE8jHIJtBPgH5FOQzkC0gW0E+B/kCZBvIdpAvQb4C+RpkB8hOkG9AdoHstjkvXGtzrvOOzdg6m7F3bcbW24y9ZzP2vs3YBpuxjTZjH9iMfWgz9pHN2CabsY9txjbbjH1iM/apzdhnNmNbbMa22ox9bjP2hc3YNpux7TZjX9qMfWUz9rXN2A6bsZ02Y9/YjO2yGdtdhv+8cC3heeE7hOeF6wifIWsJOS98l/C8cD3heeF7hFzUFnJe+D7heeEGwvPCjYRc3C3kvPADwvPCDwnPCz8i5KKOkPPCTYTnhR8TnhduJuSirpDzwk8Izws/JTwv/IyQi3pCzgu3EJ4XbiU8L/yckIv6Qs4LvyA8L9xGeF64nZCLBkLOC78kPC/8ivC88GtCLhoKOS/cQXheuJPwvPAbQi4aCTkv3EV4Xrib8LwwgvC8sLGQvXjC/QFF+Hyr7ibci28ihAvC5yBF2MereoRcNBXCBWG/pwj7FdWQkItmQrggrGuKMC+rJoRcNBdyXkgYv4rQ/1RzAeeFW5i/j/Rb6IW+A9kD8j3IXpAfQPaB7Af5EeQnkAMgB0F+BjkEchjkCMgvIL+C/AZyFOQYyO8gx0FOgPwB8ifISZBTIH+B/A1yGuSMzXnhtzbnOt/ZjO2xGfveZmyvzdgPNmP7bMb224z9aDP2k83YAZuxgzZjP9uMHbIZO2wzdsRm7BebsV9txn6zGTtqM3bMZux3m7HjNmMnbMb+sBn702bspM3YKZuxv2zG/rYZO20zdqbMhfNC6rjVMatjN/W8oeb8DoafzaXo+S3hOel3hOekewifnROEnJN+T3hOupfwnPQHQi4ShZyT7iM8J91PeE76IyEXSULOSX8iPCc9QHhOepCQC7+Qc9KfCc9JDxGekx4m5CJZyDnpEcJz0l8Iz0l/JeQiIOSc9DfCc9KjhOekxwi56CjknPR3wnPS44TnpCcIuXhYyDnpH4TnpH8SnpOeJOTiESHnpKcIz0n/Ijwn/ZuQi05CzklPE56TniE8J+1AuO/dWcgZBOH+gCJ8vlVJhFx0EcIF4XOQIuzjVYCQi65CuCDs9xRhv6IeIeSimxAuCOuaIszLqgshF92FnJMSxq8i9D9FuX76PCQ3Wjv97zkxERFng3guwrNjzr/js9Up6H+fGsT/QJ/yL8hZkGzB+SMjLn1Rn/GcLcPjVxG0errwWvxXJgjKRlx8GKb/h39Tjek/ypJKKWqnP0t2UBQI/EfY8GvbiWy8iNxI4vWjtDkLslnBxihsFOq/8/kt5fHDVp/L5U/0WElWQpIrOd4Dz9oel8ed5E+CzQ9fggpYgYSk+IDvvF46EHNFXOo/ERH0gZilLG2C+h9XZRkVjixLP2/WsoQBwGR31rIXFphoXltdKRJA1rL0815H7KwpyVrPy3UL6dwNJAbeuPTVHQHnralssBbXg2QHyQFyA0hOkFwguUHygNwIkhfkJpCbQW4ByQeSH+RWkAIgBUFuA7kd5A6QQiCFQe4EKQJSFKQYSHGQEiBRICWDlRtzr/VJfbvlepux7DZjOWzGbrAZy2kzlstmLLfNWB6bsRttxvLajN1kM3azzdgtNmP5bMby24zdajNWwGasoM3YbTZjt9uM3WEzVshmrLDN2J02Y0VsxorajBWzGStuM1bCZizKZqxkWd5bUzp2qXPuICG3prKVpWqGLXU90Vyal+yEfcVgIbemcoRu8/9uTd0Q6lzo1lROQi6GCLk1lSsUm1Pdmsqd+bkuuTWVh5CLoUJuTd2YOZttb03lzcxcl7k1dRMhF08LuTV1c0ZtvsKtqVsyNtcVb03lI+RimJBbU/nTb3Oat6ZuTe9c6bg1VYCQi+FCbk0VTI/N6bw1dVvac6X71tTthFyMEHJr6o6ydLemCpWluzVVmJCLkUJuTd1Zlu7WVJGydLemihJyMUrIraliZeluTRUvS3drqgQhF6OF3JqKKkt3a6ok3f6uGkR4Cj5GyI0Ewv0BRfh8q4YScjFWCBeEz0GKsI9Xwwm5GCeEC8J+TxH2K2oUIRfjhXBBWNcUYV5WYwm5mCDk1hRh/CpC/1OU66f9dzEcihQLzlcyeBZYIng2WCx4VlgkeHZYOHiWeEfwbPG24FljgeDZY/7gWeQtwbPJm4JnlTcGzy5zB88ycwbPNnMEzzr1mUK2shGXvFJfagnV9/4lvNQSXZbsUosVzkst0XR95EWXWkqVZVRYT049bwzhAwmX3TEoKIjmPedskRHhucr4b5iuMoYagNiRS2tfoz4p1kTqU2iOk22qBcan8aVRwFGvhdZZrwf1lUW8FqHqWKYsreNmlPe0HFbzU6YsPTdly/L4k5530GX8Ka150gpurrUox7QW5UJYi6vlF+WZ1qK8QL+owLQWFYJrkQ2NpX6ZXKBxQ1Ex2LhUsiumVmgvpUktzdAZcSwwlxNaZc22WzuAxWC3Ygo+FUIiSuOlKjGthYtpLVyMa6ETDsdazG7KGw+h6scVDy9dXbvTvHLC5ftzhGwjEvqlIuRaUa6fblj0VqLdjkJEBtczLX/Cc3LULKo1wc2bG/k/udIWUxFwX2EHwEpLp7ReZS+eP2XeUJPCPEPOeTLSvIVqs6esmQmGkgvslx7UnGSWn7TWnJKfWHxO4HZDbPi9KuAPuGO98a5EFeeOiwt4At44n8cfiPUk+L3JypPgdsUne62A8iUne2PdSd64QLw/KS6Ak7byu90ef3xikop1xSUkWj6/O8EKeLxul5Xgd3v9frcvLi7B7fbH+QK+eHgwTgi4fVas1xtvxbnc8S4ufmLRUyxVUUhr1wPPKaUoxEksCnHMRSGOoSgsMKQoXNaJvee/ZYAy6XgNLQoLmJKOl6AopLWdSMmPz9CiwMWP7//R1mZ8cOexMsc54eW2C63QXor7PIvK7khGu0PVsYrhW67aMaswFNCqTM1EVcZtxspMa3EX01rcxbzlyrEWiwzfcuWKh8WGb7ly+f4SIVuuhH6pCLlWS5wt19SvczWLak1wU1mN8+m6ClMRqMb4dK11rsaQFJYL2XKtQtgIVi9rZoJZzvT0Vj0MW66U/NQgfLpeQvh0zcVPDRt+MvogldYWKyU/NZnyZ02CdUhrF4hyHWoxrUMtYf5Qm2kdagvzh7uZ1uHudBzJmNzY2ahL5se4aawjsWmsw9w01mFoGlea8d07SeFMcnUJ56JsGlcyNSV109E0prUOSv+qiLICVjx0WJY3Kc6bGO93JfqgrwrEuv1uSn7qlaVr9CibRi5+6l1hx5Hi0zMcO1D1CR+8sF9SnzqUJPTLBmQ2+1hOHfSnruozcN3Q8NMWzUtDBrsbMfUJet4cwX8vtjl/pVxrjvVun9V8HRtTN71SnPZ1w4+CtM2NGex+Q8gXizQmLEhNCIswod8oSi6Yk+T/mo9rMUk2MT1JcnWvTa/RjqaZ4XZrm5sx2N2cqZNrXpb3lxKaMqzFPYb7gH5iu4fB7hYCfL8Fg90tmXy/JaPvc+WBNU2vTR94M0z3hULV817ChpaQa/Um087fvc5OALuOrbibXIon4lYMQb9WyBNxKwFBHyoX7whJwPcRckHof+odZ0dBRLK9jzLZSq2KhyLN17G1Q5SlyucwX8f7HaIsVVEAUW0coixlCSDqAYcoS7kEEPWgQ5SlPAKIausQZak4AUQ95BBlKZ8Aoto5RFmqsgCi2jtEWaqqAKI6OERZqpoAohIcoixVQwBRiQ5RltopYK8vySHKUrUFRJTfIcpS2wVEVLJDlKXqCoiogEOUpeoLIKqjQ5SlGgog6mGHKEs1FkDUIw5RlmoqgKhODlGWai6AqM4OUZZqIYCoLg5Rljoi4Dmqq0OUpVoJiKhuDlGWai2AqO4OUZZqI4CoHg5RltogoEb1dIiyVFsBEdXLIcpS7QQQ1dshylIdBBD1qEMUHHMLIOoxrq/4pP5BAMIvoFAtCL9Jpw/xh+T1ZySLI7L7BD/oq3FrhO9HuA3CDyD8IMJtEX4I4XYIt0e4A8IJCCcinISwH+FkhAMId0T4YYQfQbgTwp0R7oJwV4S7Idwd4R4I90S4F8K9EX4U4cewLTnO474w9jjIEyD9QPqDPAnyFMgAkIH6qxhBBoMMARkK8jTIMJDhICNARoKMAhkNMgZkLMg4kPEgE0CeAXkWZCLIJJDJIFNApqLP+M5GvjGjzAU9pyP8PMLPITwN4akIT0F4MsKTEJ6I8LMIP4PwBITHIzwO4bEIj0F4NMKjEB6J8AiEhyM8DOGnER6K8BCEByM8COGBCA9A+CmEnyxz4csragTfrRBfznzOfM58znzOfM58znzOfLLmCyTRzhcXIJ4vlnY+vyelF3wb9YVvIfwmwmsQXo3wKoTfQPh1hF9DeCXCKxBejvAyhJci/CrCSxBejPAihBcivADh+QjPQ/gVhF9GeC7CcxB+CeHZCM9CeCbCLyL8AsK7Ed6F8DcI70R4B8JfI/wVwl8ivB3hbQh/gfDnCG9FeAvCnyH8KcKfILwZ4Y8R3oTwRwh/iPAHCG9EeAPC7yP8HsLrEX4X4XUIv4PwWoTPIHwa4b8R/gvhUwifRPhPhP9A+ATCxxH+HeFjCB9F+DeEf0X4F4SPIHwY4UMI/4zwQYQPIPwTwj8ivB/hfQj/gPBehL9HeA/C3yH8LX4eRvsUIxEehfBohMcgPBbhcQiPR3gCws8g/CzCExGehPBkhKcgPBXhvgg/jvATCPdDuD/CTyL8FMIDEB6I8CCEByM8BOGhCD+N8DCEhwfx8ojzr2nw7+dAngeZDjID5AWQF0FmgswCmQ3yEsgckLkgL4O8AjIPZD7IApCFIItAFoMsAXkVZCnIMpDlICtAVoK8BvI6yBsgq0BWg6wBeRPkLZC3QdaCvAOyDuRdkPUg74G8D7IBZCPIByAfgnwEsgnkY5DNIJ+AfAryGcgWkK0gn4N8AbINZDvIlyBfgXwNsgNkJ8g3ILtAdoN8C/IdyB6Q70H2gvwAsg9kP8iPID+BHAA5CPIzyCGQwyBHQH4B+RXkN5CjIMdAfgc5DnIC5A+QP0FOgpwC+Qvkb5DTIGdA/gH5F+QsyH8gEeWAO5BIkKwg14FkA7keJDtIDpAbQHKC5ALJDZIH5EaQvCA3gdwMcgtIPpD8ILeCFAApCHIbyO0gd4AUAikMcidIEZCiIMVAioOUAIkCKQkSDVIKJAakNEgZkLIg5UDKg1QAqQhSCcQCUSAuEDeIByQWJA7EC+IDiQepDFIFpCrIXSDVQKqD1ACpCVILpDbI3SB1QOqWO/97YilfKpnyigy+1wi+W6G9VNlSYG8puvmGwFxDS13Ql2heKxKtQb1y59/rl0Nrk4V4YfQ3NVMpz6VfvXKXzhvy7+GUoz00SXFgPe8gRq7qM6xFQ6a1aMi4FikBSL0W64V82WUjOs7U8cZ0c603/CdcuPLJ+1fX7qS0fn2dK3dsMPxbybXdjRjs3himPGGF9lKEfqkIuVaU63elH6SNyOB6phVHeE5qX61HXIdTXo2lNJC4ecBKZ1DnNH+QVuvcmCEpbDLkW8vTUwSpbG5SzsxktYnpZw+alEv7B2nTmi+tNafkpyniR7ndEBt+rwr4A+5Yb7wrUcW54+ICnoA3zufxB2I9CX5vsvIkuF3xyV4roHzJyd5Yd5I3LhDvT4oLbCD8QVoufpoG+UkpBtT5bmoM7HrmucA9lQ3FgvM0A/2bg9wD0gKkJci9IK1A7gNpDXI/SBuQB0AeBGkL8hBIO5D2IB1AEkASQZJA/CDJIAGQjiAPgzwC0gmkM0gXkK4g3cqdXzC8nlqflJ3H//10lM3YPTZjLWzGWtqM3Wsz1spm7D6bsdY2Y/fbjLWxGXvAZuxBm7G2NmMP2Yy1sxlrbzPWwWYswWYs0WYsyWbMbzOWbDMWsBnraDP2sM3YIzZjnWzGOtuMdbEZ62oz1i04hl8Z/bHvNH9GrlzocyUH9MtSzYnm0nnlnnJ0Nm4OUx+SeZvPTa1ahG6zK6UxbxnqXJ4LTf69hFx8Yi4XFn6waRWKza6LH5Luy/xcVuoHrtaEXHxqIBfQWl3ykHl/5mz22T2wtsnMXD77h98HCLn4zCwuvJd74H8wozZ7L7950DZjc7mutBHxECEXW0zhwnvlzZd26bc5zQ3R9umdy5vm+qkOhFxsvfpcWOnQUyWkx2YrXTarxLTnik3n+qkkQi4+v5pceNKtp/Jf0WZPIAM2q+QrzeXN0PqpACEXX1wdLnwZ1FN1vIzN8YEM26wetp/LysT6qUcIudgWbi6sTOmpOl1qs8qkzapz6rn8mV4/1YWQi+3h48Idgp6qK7LZFQjJZtWtHN0+ZLUmdFx8KeRXSwn3BxTh8636lPBXS78SwgXhc5Ai7OPVVkIuvhbCBWG/pwj7FbWNkIsdQrggrGuKMC+rrwi52CnkEglh/CpC/1OU68d1XjiF+bywO/RCPUB6gvQC6Q3yKMhjIH1A+oI8DvIESD+Q/iBPgjwFMgBkoD4vBRkMMgRkKMjTIMNAhoOMABkJMgpkNMgYkLEg40DG25wXdrc51+lhM9bTZqyXzVhvm7FHbcYesxnrYzPW12bscZuxJ2zG+tmM9bcZe9Jm7CmbsQE2YwNtxgbZjA22GRtiMzbUZuxpm7FhNmPDbcZG2IyNtBkbZTM22mZsjM3YWJuxcTZj48vxnxd2Jzwv7EF4XtiT8BnyZyHnhb0Izwt7E54XPkrIxSEh54WPEZ4X9iE8L+xLyMVhIeeFjxOeFz5BeF7Yj5CLI0LOC/sTnhc+SXhe+BQhF78IOS8cQHheOJDwvHAQIRe/CjkvHEx4XjiE8LxwKCEXvwk5L3ya8LxwGOF54XBCLo4KOS8cQXheOJLwvHAUIRfHhJwXjiY8LxxDeF44lpCL34WcF44jPC8cT7h+dxGeFx4XshdPuD+gCJ9v1WHCvfgTQrggfA5ShH28+pWQiz+EcEHY7ynCfkUdI+TiTyFcENY1RZiX1QlCLk4KOS8kjF9F6H/qpIDzwtIRvOeFE6AXegbkWZCJIJNAJoNMAZkKMg3kOZDnQaaDzAB5AeRFkJkgs0Bmg7wEMgdkLsjLIK+AzAOZD7IAZCHIIpDFIEtAXgVZanNeOMHmXOcZm7FnbcYm2oxNshmbbDM2xWZsqs3YNJux52zGnrcZm24zNsNm7AWbsRdtxmbajM2yGZttM/aSzdgcm7G5NmMv24y9YjM2z2Zsvs3YApuxhTZji2zGFtuMLbEZe9VmbGk5/vPCCYTnhc8Qnhc+S/gMdH0zGeeFEwnPCycRnhdOJuQiu7lcXHReOIXwvHAq4XnhNEIuchjIhd154XOE54XPE54XTifk4gazuLjseeEMwvPCFwjPC18k5CKnKVykcV44k/C8cBbheeFsQi5yXX0u0nVe+BLheeEcwvPCuYRc5L6aXGTgvPBlwvPCVwjPC+cRcpHn6nCR4fPC+YTnhQsIzwsXEnJxY7i5yOR54SLC88LFhOeFSwi5yBs+LkI6L3yV8LxwaTm6/bwDtei4uClMXFihvRTh/oAifL5V+PksVC5uFsIF4XOQIuzjVS5CLm4RwgVhv6cI+xV1IyEX+YRwQVjXFGFeVjcTcpGfiQvq80LC+FWE/qeo14/6rFCfE26OvsALla5cZ5tzmD8LuQz6tuUgK0BWgrwG8jrIGyCrQFaDrAF5E+QtkLdB1oK8A7IO5F2Q9SDvgbwPsgFkI8gHIB+CfASyCeRjkM0gn4B8CvIZyBabs81lNmdQy23GVtiMrbQZe81m7HWbsTdsxlbZjK22GVtjM/amzdhbNmNv24yttRl7x2Zsnc3YuzZj623G3rMZe99mbIPN2EabsQ9sxj60GfvIZmyTzdjHNmObbcY+sRn71GbsM5uxLeUunG1y5Bkdu6nnDbU+lTT8HDFFz2WEZ7rLCc90VxA+50cLOdNdSXim+xrhme7rhFyUEnKm+wbhme4qwjPd1YRcxAg5011DeKb7JuGZ7luEXJQWcqb7NuGZ7lrCM913CLkoI+RMdx3hme67hGe66wm5KCvkTPc9wjPd9wnPdDcQclFOyJnuRsIz3Q8Iz3Q/JOSivJAz3Y8Iz3Q3EZ7pfkzIRQUhZ7qbCc90PyE80/2UkIuKQs50PyM8091CeKZbknCPvpKQ8xLC/QFF+HyrYgi5sIRwQfgcpAj7eFWWkAslhAvCfk8R9iuqAiEXLiFcENY1RZiXlUXIhVvImS5h/CpC/1OU66f9dwUcihQLzrcleBb4afBscHPwrHBT8Ozww+BZ4sbg2eL7wbPG9cGzx3XBs8i1wbPJt4JnlWuCZ5ergmeZrwfPNlcGzzr1mYI+o0j9ikzFaai+NzeGbq6tqB9TsG8F+zj673x+S3n8sBPjcvkTPVaSlZDkSo73wKOQx+VxJ/mT4NnUl6ACViAhKT7gOz+X/gHoXBEXzqfwi/osbCtdH3nRjzR/Xo5RYT059bxfED6QcNn9BQoKonnPOVtkhP2vjVPbgAPOCvFloy5ZAGJH3qZ9jfqkWBOpT6E5TrapFhifxm9DAUe9FlpnvR6RjGsRqo7by9E6bkZ5T8thNT/by9Fz82U5Hn/S8w66jD+lNU9awc21Fl8xrcVXIazF1fKLr5nW4muBfrGDaS12BNciGxpL/TK5QOOGYmewcfnGrphaob2UJnUbQ2fEscBcTrirnNl2awfYxWD3bqbg2x1CIkrjpb5hWotvmdbiW8a10AmHYy3uZr7qHqp+XPFQ5+raneaVEy7frytkG5HQLxUh14py/XTDorcS7XYUIjK4nmn5E56To2ZRrQlu3r5D/k+u9C6mIvDdFXYA0phGpfXf0Tp/x5AUGhpyzpOR5i1Um/eUMzPBUHKB/XIPak4yy09aa07Jz/f4nMDthtjwe1XAH3DHeuNdiSrOHRcX8AS8cT6PPxDrSfB7k5Unwe2KT/ZaAeVLTvbGupO8cYF4f1JcACftUH83mIuf79FTLFVRSGvXA88ppSjslVgU9jIXhb0MRaGxIUXhsk7sPffJqgBl0vnB0KLQmCnp/EBQFNLaTqTkZ5+hRYGLn33/j7Y29wd3Hn/kOCe83HahFdpLcZ9nUdkdyWh3qDr+ZPiWq3bMnxgK6AGmZuIA4zbjj0xrcZBpLQ4yb7lyrEVTw7dcueKhmeFbrly+31zIliuhXypCrlVzZ8s19etczaJaE9xU/sz5dP0TUxH4mfHpWuv8M0NSuFfIlutPhI3goXJmJph7mZ7eDoVhy5WSn8OET9fNCZ+uufg5bMNPRh+k0tpipeTnCFP+PEKwDmntAlGuwy9M6/CLMH/4lWkdfhXmD78xrcNv6TiSMbmxs1GXzI9x03hUYtN4lLlpPMrQNN5nxnfvJIUzyR0jnIuyabyPqSk5lo6mMa11AAdVScoKWPHQYVnepDhvYrzfleiDvioQ6/a7Kfn5vRxdo0fZNHLx8/sVdhwpPj3DsQN1nPDBC/sl9anDFkK/PEFms4/tO5yPM3D9h+GnLZqXPxjs/pOpT9Dz5gj+e4XN+SvlWnOsd/us5ut4krrpleK09xt+FKRtPslgdxshXyxykrAgnSIswoR+oyi5YE6S/2s+rsUkecr0JMnVvf51jXY0fxtut7b5bwa7TzN1cqfL8f5Swl8Ma3HGcB/QT2xnGOz+R4Dv/8Ng979Mvv8vo+9z5YG2hv8KE5cPPBSm+0Kh6nmWsKEl5Fo9xLTzd9bZCWDX8T/uJpfiifg/hqDvIOSJ+D8BQR8qFwlCEnBEebr1I/Q/leDsKIhItoT+Y4mtiocizdcxi0OUpcrnMF/HSIcoS1UUQFRWhyhLWQKIus4hylIuAURlc4iylEcAUdc7RFkqTgBR2R2iLOUTQFQOhyhLVRZA1A0OUZaqKoConA5RlqomgKhcDlGWqiGAqNwOUZbaKWCvL49DlKVqC4ioGx2iLLVdQETldYiyVF0BEXWTQ5Sl6gsg6maHKEs1FEDULQ5RlmosgKh8DlGWaiqAqPwOUZZqLoCoWx2iLNVCAFEFHKIsdUTAc1RBhyhLtRIQUbc5RFmqtQCibneIslQbAUTd4RBlqQ0CalQhhyhLtRUQUYUdoizVTgBRdzpEWaqDAKKKOERZKlEAUUUpidLKFYy48Dk//e9kWISzQVy/3AVcD+GVkedxyv9fMVCqOEgJkKjyF8ZTXtQ/NjCN7leGVDG0oKF+pq5keXoH4li/5wjXrzjh+kUTrp+db2t+Unw4GuESCEeVv9i3S8G/Y0BKg5Qpf/F3+VIHt/5v6S8DiaCd1yoWnKcszF8OpDxIBZCKIJVALBAF4gJxg3hAYkHiQLwgPpB4kMogVUCqgtwFUg2kuuYMpCZILZDaIHeD1AGpC1IPpD5Ig/LnFwx/KF7rkyPi4rFyNmPlbcYq2IxVtBmrZDNm2YwpmzGXzZjbZsxjMxZrMxZnM+a1GfPZjMXbjFW2GatiM1bVZuwum7FqNmPVbcZq2IzVtBmrZTNW22bsbpuxOjZjdW3G6tmM1bcZa1Ce9wt8dOymnjfUfOg34yub09SzLEENSD73e5yWKkc0l+alPGFtSjaci+TziqoKodvsSvkRooqhzuW58INGlQi5CJjLhYV/xMkKxWbXxT8IpTI/l5X6x6VchFx0NJCLuMClP6jlzpzNPrsf5/JkZi6f/Q99xRJy8bBZXHgv9+NmcRm12Xv5H0rzZmwu15V+dM1HyMUjpnDhvfIPzcWn3+Y0fwSxcnrn8qa5fqoKIRedrj4XVjr0VFXTY7OVLpvVXWnPFZvO9VPVCLnofDW58KRbT1X9ijZ7AhmwWdW40lzeDK2fqknIRZerw4Uvg3qqWpexOT6QYZtVbfu5rEysn7qbkIuu4ebCypSeqs6lNqtM2qzqpp7Ln+n1U/UIuegWPi7cIeip6iObXYGQbFYN6PZelZ/w+/S6C/luQ8L9AUX4fKs6EnLRQwgXhM9BirCPV50IuegphAvCfk8R9iuqKyEXvYRwQVjXFGFeVj0Iuegdpu9ftUJ7KcL4VYT+p6SsH+EPXKh/CH+ppyHxGbZ+DQq+6393K3fhbKsrwl0Q7oxwJ4QfQfhhhDsiHEA4GWE/wkkIJyKcgHAHhNsj3A7hhxBui/CDCD+AcBuE70e4NcL3IdwK4XsRbolwC4TvQbg5ws0QHo/wOITHIjwG4dEIj0J4JMIjEB6O8DCEn0Z4KMJDEB6M8CCEByI8AOGnEH4S4f4I90P4CYQfR7gvwn0QfgzhRxHujXAvhHsi3APh7ggvRfhVhJcgvBjhRQgvRHgBwvMRnofwKwi/jPBchOcg/BLCsxGehfBMhF9E+AWEZyA8HeHnEX4O4WkIT0V4CsKTEZ6E8ESEn0X4GYQnINwQna1nQTgSn7kjfB3C2RC+HuHsCOdA+AaEcyKcC+HcCOdB+EaE8yJ8E8I3I3wLwvkQzo/wrQgXQLggwrchfDvCdyBcCOHCCN+JcBGEiyKM74HgeyL4Hgm+Z4LvoeB7KvgeC77ngu/B4Hsy+B4NvmeD7+Hgezr4Hg++59MAYXxPA9/jwPc88D0QfE8E3yPB90zwPRR8TwXfY8H3XPA9GHxPBt+jSbln80zE+Vcj+HdjkCYgTUGagTQHuQekBUhLkHtBWoHcB9Ia5H6QNiAPgDwI0hbkIZB2IO1BOoAkgCSCJIH4QZJBAiAdQR4GeQSkE0hnkC4gXUG6gXQH6QHSE6QXSG+QR0EeA+kD0hfkcZAnQPqB9Ad5EuQpkAEgA0EGgQwGGQIyFORpkGEgw0FGgIwEGQUyGmQMyFiQcSDjQSaAPAPyLMhEkEkgk0GmgEwFmQbyHMjzINNBZoC8APIiyEyQWSCzQV4CmQMyF+RlkFdA5oHMB1kAshBkEchikCUgr4IsBVkGshxkBchKkNdAXgd5A2QVyGqQNSBvgrwF8jbIWpB3QNaBvAuyHuQ9kPdBNoBsBPkA5EOQj0A2gXwMshnkE5BPQT4D2QKyFeRzkC9AtoFsB/kS5CuQr0F2gOwE+QZkV/nzPpQl6Es1gu9WSK94S99B0pJ63lD72d3lafvZlPtYet5iERxrcf4+1oyYiP+9qPTnuvep7zNz3vv8Ftb6O5A9IN+D7AX5AWQfyH6QH0F+AjkAchDkZ5BDIIdBjoD8AvIryG8gR0GOgfwOchzkBMgfIH+CnAQ5BfIXyN8gp0HOlD+/YJh7rc//eoXg+3c2Y3tsxr63GdtrM/aDzdg+m7H9NmM/2oz9ZDN2wGbsoM3YzzZjh2zGDtuMHbEZ+8Vm7Febsd9sxo7ajB2zGfvdZuy4zdgJm7E/bMb+tBk7aTN2ymbsL5uxv23GTtuMnQmORUTw5Bkdu9Q592kh9z6/LU937/M7ork0L3vK09k4TMi9z+9Dt/l/9z73hjoXuvf5AyEXw4Xc+9wXis2p7n3uz/xcl9z7/JGQixFC7n3+lDmbbe99HsjMXJe593mQkIuRQu59/pxRm69w7/NQxua64r3Pw4RcjBJy7/NI+m1O897nL+mdKx33Pn8l5GK0kHufv6XH5nTe+zya9lzpvvd5jJCLMULuff5enu7e5/HydPc+TxByMVbIvc8/ytPd+/yzPN29z5OEXIwTcu/zVHm6e59/lae79/k3IRfjhdz7PF2e7t7nGbr9XfU04T2eCULuVBHuDyjC51s1gpCLZ4RwQfgcpAj7eDWakItnhXBB2O8pwn5FjSPkYqIQLgjrmiLMy+oZQi4mCbm3SBi/itD/FOX6af9dleXC+e6Z4Fng38GzwVPBs8I/g2eHJ4Jnib8HzxaPBs8afw2ePR4JnkUeCp5NHgyeVf4UPLvcHzzL/CF4tvl98KxTnynoM4rUr8hUnIbqe/j7lEKd6x/UjynYt4J9HP13Pr+lPH7YiXG5/IkeK8lKSHIlx3vgUcjj8riT/EnwbOpLUAErkJAUH/CdnysbzJEr4sL5FH5Rn4X9Q9dHWljff8szKqwnp573LOEDCZfdZ1FQEM17ztkiIy4EF6ezEX6BmWWjLlkAYkf+T/sa9UmxJtLu1o8V2uvcyTbVAuPT+P9QwFGvhdZZr0ck41qEHNAVaB03o7yn5bCaH60jNTdZKvD4k5530GX8Ka150gpurrWIZFqLyBDW4mr5RVamtcgq0C+uY1qL64JrkQ2NpX6ZXKBxQ5Gtwvn36yvYFFMrtJfSpP7H0BlxLDCXE2avYLbd2gGyM9idgyn4coSQiNJ4qeuZ1uIGprW4gXEtdMLhWIuXm/HGQ6j6ccXDK1fX7jSvnHD5/jwh24iEfqkIuVaU66cbFvx123av9P630vInPCdHzaJaE9y85UT+T650dqYigJXOoM4qrf+O1jknQ1JYZMg5T0aat1BtzlXBzARDyQX2y1yoOcksP2mtOSU/udFcyu2G2PB7VcAfcMd6412JKs4dFxfwBLxxPo8/EOtJ8HuTlSfB7YpP9loB5UtO9sa6k7xxgXh/UlwAJ23ld7s9/vjEJBXriktItHx+d4IV8HjdLivB7/b6/W5fXFyC2+2P8wV88fBgnBBw+6xYrzfeinO5411c/ORGT7FURSGtXQ88p5SikEdiUcjDXBTyMBSFJYYUhcs6sffcJ6sClEnnRkOLwhKmpHMjQVFIazuRkp+8hhYFLn7y/j/a2rwpuLV5cwWGc8LLbRdaob0U93kWld2RjHaHquMthm+5ase8haGA5mNqJvIxbjPezLQW+ZnWIj/zlivHWiw1fMuVKx6WGb7lyuX7y4VsuRL6pSLkWi13tlxTv87VLKo1wU3lrZxP17cwFYFbGZ+utc63MiSF14Vsud5C2AgWqGBmgnmd6emtQBi2XCn5KUj4dL2c8Omai5+CNvxk9EEqrS1WSn5uY8qftxGsQ1q7QJTrcDvTOtwuzB/uYFqHO4T5QyGmdSiUjiMZkxs7G3XJ/Bg3jYUlNo2FmZvGwgxN4yozvnsnKZxJ7k7CuSibxlVMTcmd6Wga01oHcFCVpKyAFQ8dluVNivMmxvtdiT7oqwKxbr+bkp8iFegaPcqmkYufIlfYcaT49AzHDlRRwgcv7JfUpw5nCD9aWIzMZh/LqYP+1FVRBq6LG37aonkpzmB3CaY+Qc+bI/jvVTbnr5RrzbHe7bOar2MUddMrxWnXGH4UpG2OYrD7TSFfLBJF2CiVJCzChH6jKLlgTpL/az6uxSRZ0vQkydW9Rl+jHU0pw+3WNpdisDuGqZOLqcD7SwnRDGtR2nAf0E9spRnsLiPA98sw2F2WyffLMvo+Vx5Y2+za9IF3wnRfKFQ9yxE2tIRcq3eYdv7KOTsB7DqW525yKZ6IyzME/XohT8TlBQR9qFy8JyQBVyDkgtD/1HvOjoKIZFuBMtlKrYqHIs3XsaJDFFSeHObrWMkhCrxVAFGWQxQsggCilEOUpVwCiHI5RFnKI4Aot0OUpeIEEOVxiLKUTwBRsQ5RlqosgKg4hyhLVRVAlNchylLVBBDlc4iyVA0BRMU7RFlqp4C9vsoOUZaqLSCiqjhEWWq7gIiq6hBlqboCIuouhyhL1RdAVDWHKEs1FEBUdYcoSzUWQFQNhyhLNRVAVE2HKEs1F0BULYcoS7UQQFRthyhLHRHwHHW3Q5SlWgmIqDoOUZZqLYCoug5RlmojgKh6DlGW2iCgRtV3iLJUWwER1cAhylLtBBDV0CHKUh0EENXIIcpSiQKIamz2F3kkWvrLDLRQf8axCdOH2/W8xSIuflH/OALhl3GoMoTfKtSUeE3PfV408oLj68+x5XCwg69R3LTCBVwR4UoIWwgrhF0IuxH2IByLcBzCXoR9CMcjXBnhKghXRfguhKshXB3hGgjXRLgWwrURvhvhOgjXRbgewvURboBwQ4QbIdwY4falL+AOCCcgnIhwEsJ+hJMRDiDcEeGHEX4E4U4Id0a4C8JdEe6GcHeEeyDcE+FeCPdG+FGEH0O4D8J9EX4c4ScQ7odwf4SfRPgphAcgPBDhQQgPRngIwkMRfhrhYQgPR3gEwiMRHoXwaITHIDwW4XEIj0e4URnkVwg3Qbgpws0Qbo7wPQi3QLglwvci3Arh+xBujfD9CLdB+AGEH0S4LcIPIdwO4fYId0A4AeFEhJMQ9iOcjHAA4Y4IP4zwIwh3Qrgzwl0Q7opwN4S7I9wD4Z4I90K4N8KPIvwYwn0Q7ovw4wg/gXA/hBuVR/6DcBOEmyLcDOHmCN+DcAuEWyJ8L8KtEL4P4dYI349wG4QfQPhBhNsi/BDC7RBuj3AHhBMQTkQ4CWE/wskIBxDuiPDDCD+CcCeEOyPcBeGuCHdDuDvCPRDuiXAvhHsj/CjCjyHcB+G+CD+O8BMI90O4P8JPIvwUwgMQHojwIIQHIzwE4aEIP43wMISHIzwC4ZEIj0J4NMJjEB6L8DiExyM8AeFnEH4W4YkIT0J4MsJTEJ6K8DSEn0P4eYSnIzwD4RcQfhHhmQjPQng2wi8hPAfhuQi/jPArCM9DeD7CCxBeiPAihBcjvAThVxFeivAyhJcjvALhlQi/hvDrCL+B8CqEVyO8BuE3EX4L4bcRXovwOwivQ/hdhNcj/B7C7yO8AeGNCH+A8IcIf4TwJoQ/Rngzwp8g/CnCnyG8BeGtCH+O8BcIb0N4O8JfIvwVwl8jvAPhnQh/g/AuHC9lUbwg/DzC0xGegfALCL+I8EyEZyE8G+GXEJ6D8FyEX0b4FYTnITwf4QUIL0R4EcKLEV6C8KsIL0V4GcLLEV6B8EqEX0P4dYTfQHgVwqsRXoPwmwi/hfDbCK9F+B2E1yH8LsLrEX4P4fcR3oDwRoQ/QPhDhD9CeBPCHyO8GeFPEP4U4c8Q3oLwVoQ/R/gLhLchvB3hLxH+CuGvEd6B8E6Ev0F4F8K7Ef4W4e8Q3oPw9wjvRfgHhPchvB/hHxH+CeEDCB9E+GeEDyF8GOEjCP+C8K8I/4bwUYSPIfw7wscRPoHwHwj/ifBJhE8h/BfCfyN8GuEzCP+D8L8In0X4P4Qjyl3AWRCORDgrwtchnA3h6xHOjnAOhG9AOCfCuRDOjXAehG9EOC/CNyF8M8K3IJwP4fwI34pwAYQLInwbwrcjfAfChRAujPCdCBdBuCjCxRAujnAJhKMQLolwNMKlEI5BuDTCZRAui3A5hMsjXAHhighXQthCWCHsQtiNsAfhWITjEPYi7EM4HuHKCFdBuCrCdyFcDeHqCNdAuCbCtRCujfDdCNdBuG4QN4N9uOYg94C0AGkJci9IK5D7QFqD3A/SBuQBkAdB2oI8BNIOpD1IB5AEkESQJBA/SDJIAKQjyMMgj4B0AukM0gWkK0g3kIigPvpVI/huhfY690Xd/UuQ/3SRW8+bMleoZzrdmc7JugfPyfTvGeaOCM/vGeaKCn2uwPlXSL9neDn9UgBeix5B3+tZIbggKQvYI/jFr3isZxgOH/EiZtK5XCm/St6D8PCxZwVaclM7X6j66aBMIZOQD45vE/doXTXP1GvQiymZ9EJ+T500lhaEAl+Cfi02Gv6N8hvB7qcZ7P5AyBca9ya8ZEHItfpAgN+Mom5qXJZHxyEVt49WMHsNta3lGGJvkwDfGc9g98dCcs5jhDmHkGv1seF+o+OlPIPffCogXiYx2P2ZkHjpQxgvhFyrzwT4zXMMftPX8Lqq7Z7BYPfjAuyeyWD3EwLsfonB7n4C7H6Zwe7+Auyez2D3kwLsXsRg91MC7H6Vwe4BAuxezmD3QAF2v8Zg9yABdq9isHuwALvfZLB7iAC732Gwe6gAu99nsPtpAXZ/xGD3MAF2f8pg93ABdn/BYPcIAXZ/zWD3SAF272Kwe5QAu79nsHu0ALt/ZLB7jAC7DzHYPVaA3b8y2D1OgN3HGeweL8Dukwx2TxBg9xkGu58RYHcEw32oZwXYnY3B7omEdusvCVmT5cJ8+t7OSPBRfcdjHLzrM/WJ8K7PCqfBuz6jmg7v+szmRXjXZxiz4V3v6c+Fd73HPQ/e9Z7vQnjXe6BL4F3vCS6Dd71HthLe9Z7RG/Cu91DWwLveU3gb3vUz9np418+cH8C7fgbbDO/6mWQrvOse/Ut41z3rN/Cue7jv4F33NPvgXdf4g/Cua94v8K5rwDF41znxD3jXOeJveNcxcxbetQ9lBY70muaIivjfS8qdwEmEvpA16AupX1TzM62tolwDLh0nU+too6CyQnhpB21Wgd5BPw/HYX4Ilmu7mzPY/UV4LjFk2nJt9z0Mdm8L1+WNTFqu7W7BYPf28F1ayZTl2u6WDHZ/Gc7LOpmwXNt9L4PdX4X3klKGLdd2t2Kw++twX87KoOXa7vsY7N4R/ktpGbJc292awe6dV+MyXgYs13bfz2D3N1fnEmK6Ldd2t2Gwe9fVunyZTsu13Q8w2L376l06TZfl2u4HGez+9mpetk2H5drutgx2f3d1Lxmnabm2+yEGu/dc7cvVKm272zHY/f3Vv1Su0rK7PYPde024TK+ubHcHBrt/MONDBOpKdicw2L3PlA9PqMvbnchg935zPjSiLmd3EoPdP5r0YRllb7efwe6fzPqQkLKzO5nB7gOmfThKXWp3gMHug+Z9KEyltrsjg90/m/hhOHWx3Q8z2H3IzA8BKmz3Iwx2Hzb1w4/qgt2dGOw+Yu6HPlWK3Z0Z7P7F5A+7qvN2d2Gw+1fDP+Sr7e7KYPdvzHZTfNHSZAa7jzJ9KP46Yt4JD+oV4dm3wufJoXJxTAgXhGfJivB8Vn1JyMXvQrggPO9UhGeIagchF8eFcEF4JqcIz7nULkIuTgjhgvDcSBGexajvCLn4QwgXhGcbivC8QO0l5OJPIVwQ7r8rwj1ttZ+Qi5NCuCDcI1aE+67qACEXp4RwQbiPqQj3BtUhQi7+EsIF4V6bIty/Ur8QcvG3EC4I94MU4R6LOkrIxWkhXBDuDyjC51t1nJCLM0K4IHwOUoR9vPqTkIt/hHBB2O8pwn5F/UXIxb9CuCCsa4owL6szhFycDRMXoeo5hXDPnDAXKEJfVpRcMH/QUqXMdy1+0HIKtY5cnwSOJDac8meLphIuol6/lF8a0fMW4yFexLpOcz6traYJSCLPcScRilN6rSTxz1O5sLNbob0uWsRQ7a3Y3PzbIna/RReq3c8TdlaUayi1g5GQfJ6/RjsYF2Wlnc7UwUyX18GQrusMp4NRMwQkkRckdDAvUHcwrvNBxLGIodr7opzAYau+EgLnxWu0+pL+7PFMpuo7U171JV3XWU71VbMEJJHZEqrvbPr9A0VZfWcTVl/rGt0/eIlw/8By9g9EJJ+XDO9glISd+jlMHcycYAeTDSRnxIUEjF/U660TC9Vc53SLjLB9Ef03LGdeZ15nXmdeZ15nXmdeZ15nXmdeZ15nXmdeZ15nXmdeZ15nXmdeZ15nXjPmpd6vbirgkKWiAB0rCdDREqCjEqCjS4CObgE6egToGCtAxzgBOnoF6OgToGO8AB0rC9CxigAdqwrQ8S4BOlYToGN1ATrWEKBjTQE61hKgY20BOt4tQMc6AnSsK0DHegJ0rC9AxwYCdGwoQMdGAnRsLEDH9qXN17GDAB0TBOiYKEDHJAE6+gXomCxAx4AAHTsK0PFhATo+IkDHTgJ07CxAxy4CdOwqQMduAnTsLkDHHgJ07ClAx14CdOwtQMdHBej4mAAd+wjQsa8AHR8XoOMTAnTsJ0DH/gJ0fFKAjk8J0HGAAB0HCtBxkAAdBwvQcYgAHYcK0PFpAToOE6DjcAE6jhCg40gBOo4SoONoATqOEaDjWAE6jhOg43gBOjYqI+AegAAdmwjQsakAHZsJ0LG5AB3vEaBjCwE6thSg470CdGwlQMf7BOjYWoCO9wvQsY0AHR8QoOODAnRsK0DHhwTo2E6Aju0F6NhBgI4JAnRMFKBjkgAd/QJ0TBagY0CAjh0F6PiwAB0fEaBjJwE6dhagYxcBOnYVoGM3ATp2F6BjDwE69hSgYy8BOvYWoOOjAnR8TICOfQTo2FeAjo8L0PEJATr2E6Bjo/ICzq8F6NhEgI5NBejYTICOzQXoeI8AHVsI0LGlAB3vFaBjKwE63idAx9YCdLxfgI5tBOj4gAAdHxSgY1sBOj4kQMd2AnRsL0DHDgJ0TBCgY6IAHZME6OgXoGOyAB0DAnTsKEDHhwXo+IgAHTsJ0LGzAB27CNCxqwAduwnQsbsAHXsI0LGnAB17CdCxtwAdHxWg42MCdOwjQMe+AnR8XICOTwjQsZ8AHfsL0PFJATo+JUDHAQJ0HChAx0ECdBwsQMchAnQcKkDHpwXoOEyAjsMF6DhCgI4jBeg4SoCOowXoOEaAjmMF6DhOgI7jBeg4QYCOzwjQ8VkBOk4UoOMkATpOFqDjFAE6ThWg4zQBOj4nQMfnBeg4XYCOMwTo+IIAHV8UoONMATrOEqDjbAE6viRAxzkCdJwrQMeXBej4igAd5wnQcb4AHRcI0HGhAB0XCdBxsQAdlwjQ8VUBOi4VoOMyATouF6DjCgE6rhSg42sCdHxdgI5vCNBxlQAdVwvQcY0AHd8UoONbAnR8W4COawXo+I4AHdcJ0PFdATquF6DjewJ0fF+AjhsE6LhRgI4fCNDxQwE6fiRAx00CdPxYgI6bBej4iQAdPxWg42cCdNwiQMetAnT8XICOXwjQcZsAHbcL0PFLATp+JUDHrwXouEOAjjsF6PiNAB13SbiPW9Z8HZ8ToOPzAnScLkDHGQJ0fEGAji8K0HGmAB1nCdBxtgAdXxKg4xwBOs4VoOPLAnR8RYCO8wToOF+AjgsE6LhQgI6LBOi4WICOSwTo+KoAHZcK0HGZAB2XC9BxhQAdVwrQ8TUBOr4uQMc3BOi4SoCOqwXouEaAjm8K0PEtATq+LUDHtQJ0fEeAjusE6PiuAB3XC9DxPQE6vi9Axw0CdNwoQMcPBOj4oQAdPxKg4yYBOn4sQMfNAnT8RICOnwrQ8TMBOm4RoONWATp+LkDHLwTouE2AjtsF6PilAB2/EqDj1wJ03CFAx50CdPxGgI67BOi4W4CO3wrQ8TsBOu4RoOP3AnTcK0DHHwTouE+AjvsF6PijAB1/EqDjAQE6HhSg488CdDwkQMfDAnQ8IkDHXwTo+KsAHX8ToONRAToeE6Dj7wJ0PC5AxxMCdPxDgI5/CtDxpAAdTwnQ8S8BOv4tQMfTAnQ8I0DHfwTo+K8AHc8K0PE/ATpGlDNfxywCdIwUoGNWATpeJ0DHbAJ0vF6AjtkF6JhDgI43CNAxpwAdcwnQMbcAHfMI0PFGATrmFaDjTQJ0vFmAjrcI0DGfAB3zC9DxVgE6FhCgY0EBOt4mQMfbBeh4hwAdCwnQsbAAHe8UoGMRAToWFaBjMQE6FhegYwkBOkYJ0LGkAB2jBehYSoCOMQJ0LC1AxzICdCwrQMdyAnQsL0DHCgJ0rChAx0oCdLQE6KgE6OgSoKNbgI4eATrGCtAxToCOXgE6+gToGC9Ax8oCdKwiQMeqAnS8S4CO1QToWF2AjjUE6FhTgI61BOhYW4COdwvQsY4AHesy6MihZ/8SZHO5UutIruyIPDyLmjWVnm4rzuNJ9rqSlVslWK74RF+s5YlNjPMpn4r1xfpdPrc72efxeeMT471WvPK4k1UgNt4dCM49twKdzYcb0M11hG4uK0tw3fS7trdYxMUv6jV9mXBN45oQPoQ14VnTl9GacsTRUAj8SIZ5qfh+pQLPur7CuK7DtP0lLp031LVwNafNeyx5mcFud3MZ+X4eYW4i5FpRrh+OIW1vFsYYqsngS3ECYojDbq+QGJpPWd8JY8jLFEPzGWNoacGIiFoMvlTZ8BjayGR3FSExtIAwhgi5VlUE5N46DH6zkKmHXcjcw3KsxSKmtViUjmdPK7SXIuRR4XUIdU0XM63pYkb/0rWpLoN/VRNQmzjsri6kNi0hjCFCrlV1w/1Gx0s9Br+pJSBeOOyuLSReXiWMF0KuVW0B8VKfwW/qCogXDrvrCYmXpYTxQsi1qicgXhow+E1DAfHCYXcjIfGyjDBeCLlWjQTES0MGv2kqIF447G4mJF6WE8YLIdeqmeF+o/fWmjD4zQqmvY8VzHtrHGuxkmktVoZhb42QR7WScG/tNaY1fY15b60pg3+1EFCbOOxuKaQ2vU4YQ4Rcq5YCatM9DH7zBlPueIO5NnGsxSqmtVgVhtpEyKNaRVibVjOt6Wrm2tSCwb/uE1CbOOxuLaQ2rSGMIUKuVWsBtakVg9+8yZQ73mSuTRxr8RbTWrwVhtpEyKN6i7A2vc20pm8z34e/n8G/1jKtxVrmWONYi3eY1uKdMMQaIY/qHcJYW8e0puuY+8A2DP71gIA+kMPuB4X0ge8SxhAh1+pBAedNDzD4TTsB8cJhd3sh8bKeMF4IuVZS1u89wvXbR/gZ3P0NzM83bRniLlFAvuGwO0lIvLxPGC+EXKskAfs07Rn8ZgNTb4/n5Xh25FiLjUxrgee9XFxZob0UIY9qI+Gz4wdMa/oBo3/p2tSBwb8CAmoTh90dhdSmDwljiJBr1VHAs2MCg990EhAvHHZ3FhIvHxHGCyHXqrOAeElk8JtuAuKFw+7uQuJlE2G8EHKtuguIlyQGv+klIF447O4tJF4+JowXQq5VbwHx4mfwmz4C4oXD7r5C4mUzYbwQcq36CoiXZAa/6ScgXjjs7i8kXj4hjBdCrlV/AfESYPCbAQLihcPugULi5VPCeCHkWg003G/02c0jDH7zGdPe+mfM9/441mIL01psCcO9P0Ie1RbCs5utTGu6lfmObRcG//qcaS0+Z441jrX4gmktvghDrBHyqL4gjLVtTGu6jTnWujP413amtdjOHGsca/El01p8GYZYI+RRfUkYa18xrelXzLHWi8G/vmZai6+ZY41jLXYwrcWOMMQaIY9qB2Gs7WRa053Mnx3pzeBfQwTsb3DYPVTI/sY3hDFEyLUaKmA/8FEGvxkuIF447B4hJF52EcYLIddqhIB4eYzBb0YLiBcOu8cIiZfdhPFCyLUaI2D//HEGv/mWqTf9lvnZh2MtvmNai+/C8OxDyKP6jvDZZw/Tmu5h3mfQP9YaSTuvm/I3G79nWtfvmeOWYV1dwwjXdS/Tuu4NQw4g9Am1lzAH/MC0pj8w7388yVBjxgvoTznsniCkP91HGEOEXKsJhvuNzsHFouj9ZqIAu0sw2D1JSLzsJ4wXQq4V5frhmrM/DHWc8jft9xPW8R+Z6viPzD2nJ4Y+PqcKyEtxDHZPE5KXfiKMIUKu1TSmvPRTGPLSy4Rr+hNhXjrAlJcOMOelofTPworyWfgg07oeDIOvvkLoqwcJffVnpjX9Obim+t9rskRc8qL6b0YwxUP7rObreIiQO7FEHYo0X8fDFYh15Nhh1kpSd2dHmLLLEeZKOJJhx+kXprX4JQzVi5BH9Qth9fqVaU1/FV69yucwX8ffnOplqYoCiDoqoXodZahex5iyyzHm6jWOoXr9zrQWv4ehehHyqH4nrF7Hmdb0uPDqZQlIiiec6mUplwCi/pBQvf5gqF5/MmWXP5mr10SG6nWSaS1OhqF6EfKoThJWr1NMa3pKePXyCEiKfznVy1JxAoj6W0L1+puhep1myi6nmavXNIbqdYZpLc6EoXoR8qjOEFavf5jW9B/h1csnICn+61QvS1UWQNRZCdXrLEP1+o8pu/zHXL2mM1SviIo8a6HnTVmLlBd19SLkUeF1CHVNszCtaZaKsqtXVQFJMbKiU71UNQFEZa0ooHppJakz9nVM2eW6irzV60WG6pWNaS2yhaF6EfKoshFWr+uZ1vR64dWrhoCkmN2pXpbaKeDOYQ4J1SsHQ/W6gSm73MBcvWYzVK+cTGuRMwzVi5BHlZOweuViWtNcwqtXbQHVK7dTvSy1XUD1yiOheuVhqF43MmWXG5mr11yG6pWXaS3yhqF6EfKo8hJWr5uY1vQm4dWrroDqdbNTvSxVXwBRt0ioXrcwVK98TNklH3P1msdQvfIzrUX+MFQvQh5VfsLqdSvTmt4qvHo1FJAUCzjVy1KNBRBVUEL1KshQvW5jyi63MVevhQzV63amtbg9DNWLkEd1O2H1uoNpTe8QXr2aCkiKhZzqZanmAogqLKF6FWaoXncyZZc7mavXEobqVYRpLYqEoXoR8qiKEFavokxrWlR49WohICkWc6qXpY4IOPcqLqF6FWeoXiWYsksJ5uq1jKF6RTGtRVQYqhchjyqKsHqVZFrTksKrVysB1SvaqV6Wai2AqFISqlcphuoVw5RdYpir10qG6lWaaS1Kh6F6EfKoShNWrzJMa1pGePVqIyAplnWql6U2CHj2KiehepVjqF7lmbJLeebq9QZD9arAtBYVwlC9CHlUFQirV0WmNa0ovHq1FVC9KjnVy1LtBBBlSaheFkP1UkzZRTFXrzUM1cvFtBauMFQvQh6Vi7B6uZnW1C28enUQkBQ9TvWyVKIAomIlVK9YhuoVx5Rd4pir19sM1cvLtBbeMFQvQh6Vl7B6+ZjW1Ce8eq0tYb6O8U71stQ6AURVllC9KjNUrypM2aUKc/Vaz1C9qjKtRdUwVC9CHlVVwup1F9Oa3iW8er0nIClWc6oXnHsJIKq6hOpVnaF61WDKLjWYq9cHDNWrJtNa1AxD9SLkUdUkrF61mNa0lvDq9aGApFjbqV6W2iSAqLslVK+7GapXHabsUoe5em1mqF51mdaibhiqFyGPqi5h9arHtKb1hFevTwQkxfpO9bLUZwKIaiChejVgqF4NmbJLQ+bqtZWhejViWotGYahehDyqRoTVqzHTmjYWXr0+F5AUmzjVy1LbBBDVVEL1aspQvZoxZZdmzNXrS4bq1ZxpLZqHoXoR8qiaE1ave5jW9B7h1esrAUmxhVO9LLVDAFEtJVSvlgzV616m7HIvc/X6hqF6tWJai1ZhqF6EPKpW/8fedYBHVS3hEHoHkd679Du7m+yGXqSIoPTekmyWXqQp2FBAFEUU7AUEVAQURFQUVKSIBQUV6QICCgIiAtLbmwMbOcYLyWZnwpnH3e/73w7H3PNmzj/tnnN3l7B6dWBa0w7Cq9fCSPN17OhULwu2CahenSRUr04M1aszU3bpzFy9tjNUry5Ma9ElDaoXIY/QhbB6dWVa067Cq9cOAUmxm1O9LPhFAFHdJVSv7gzVqwdTdunBXL12M1Svnkxr0TMNqhchj9CTsHr1YlrTXsKr1x4BSTHWqV4W/CaAqDgJ1SuOoXrFM2WXeObqtY+hevmZ1sKfBtWLkEfwE1avBKY1TRBevX4XkBQDTvWy4IAAonpLqF69GapXH6bs0oe5ev3BUL36Mq1F3zSoXoQ8Ql/C6tWPaU37Ca9e6zKYr2N/p3pZ8KeA6jVAQvUawFC9BjJll4HM1esvhuo1iGktBqVB9SLkEQYRVq/BTGs6WHj1OiIgKQ5xqpcFCQK+5/AuCdXrLobqNZQpuwxlrl5/M1SvYUxrMSwNqhchjzCMsHoNZ1rT4cKr13EB1WuEU70sOCmAqJESqtdIhup1N1N2uZu5ep1mqF73MK3FPWlQvQh5hHsIq9copjUdJbx6nRGQFEc71cuCcwKIuldC9bqXoXrdx5Rd7mOuXhcYqtf9TGtxfxpUL0Ie4X7C6vUA05o+ILx6XRSQFB90qpcF6cqar+MYCdVrDEP1eogpuzzEXL3Sl6Vfi4eZ1uLhNKhehDzCw4TVayzTmo4VXr0yCEiK45zqZUEmAUSNl1C9xjNUr0eYsssjzNUrC0P1msC0FhPSoHoR8ggTCKvXo0xr+iijf6lYy47+FckwL9W6Psa0ro8xx212hridyLQWE9Mgbgl5hImEcfs405o+HlzTjIgcEVdiLCKCPt6Uvy2vRhu/ar4IWj2tCJtXmHNDoqCv7xPVL79Pqh4kI5EU9R92JBmbxJwI1EJSJ4KXWtGSwlFYOOx+uRWPM2ag0dMV1BOeIExQkwgTJ6HfABcX1MmRkosnbeaKs+L9URAX7fdCQmyULz4+xg3gio2OjY5z+QIJcVHgi/LhnPGxLh/+37li4yHBio1OUIUhuxZ7+os6Hp8kLnKJr8nVGRWeXJ1+3qcInYHL7qeqX1lgonltdaVITEpXqoBNnJeSo6eZujs1b2km319V8HJTQpwIo9S8VOs6hWldp1yja058UReIX6uZVawDl19xNqazdMtTg/nmmaTd8tRgAtbHnrG5VcxAo9w/SnIREm5XN5UwMT1D7CjUyf2jgpf5pw62jwiT0LPVeQukFd7rkh8/y7CV/ZzhdiuOn2Ow+3mmovM84w5AYhxRr8UL1Oc4wRd1vE8izJkv0tkcxcG14uRFBq5fEhDvLzHY/TJTvL/MHO8cuW+a4Tt+XD4wnWmXKT2xnq8Q7tIRcg2U66fH0CuMMbSiIE8efdXwPKpu0F/lyB1MeXRaCo4Nw47/GyCuuHxpOoMvvcbkS68x5hOuuJp5g/rALCE1eQZh7iDkGmYx1eQZwRhSctaIK/dy6t/78R8XgnKliMuyes2sHvGvF/X930zC+79ZdHzGq3XA8Phn71L9+6C2Rn9osvr/TZTXBscTr3sd/9sbiDcRs6tfHs8Y/NvIiP++qGN8UnWeWKTW83VCPTNper4V9N85wfe5wfd5wfe3g/nvluDfv4P/no9YgHgXsRDxHmIR4n3EB4gPEYsRHyE+RixBLEV8gvgU8RliGeJzxHLECsRKxCrEF4jViC8RXyG+RnyDWIP4FvEdYi1iHeJ7xA+IHxHrET9puZqlGFARoCedt7UTm7Q6zp7DdJy9oTqjwhsYjrM3Gn6crezeqFUYonmttHS2uUzOtqk6o8KbGJxts+HOpuzeLNzZ5jE525bqjApvYXC2rYY7m7J7K4Ozcei6MRgY1PeB26rLDLK3mYLs5+qMCv/MEGTbDQ8yZfd2IUGmksE2hiDbYfimteJnB4PdO4mDNOnN/hztpn6uJr+tyauS3Oz/gv9tF2I3Yk/1K+OJL+rPzBB2A/ALYaz/yszNrxoHuzR5tybvqf5vbn7Df+9F7EP8Xv3f81H6pbqPVr4ZScw15dOZ+wn5ibzKOlrhvUBt3CibI2jntRI3eg7g/AcRfyAOIf5EHEb8hTiCOIo4hvgbcRxxAnEScQpxGnEGcRZxDnFe+RrioqpFNXAtEJGI9IgMiIyITIjMiCyIrIhsiOyIHIiciFyI3Ig8iLw1LvuPvo9yoPp/H7Y8aDP2h83YIZuxP23GDtuM/WUzdsRm7KjN2DGbsb9txo7bjJ2wGTtpM3bKZuy0zdgZm7GzNmPnbMbO24xdsBm7aDN2yR+SjKWzGYu0GUtvM5bBZiyjzVgmm7HMNmNZbMay2oxlsxnLbjOWw2Ysp81YLpux3DZjeWzG8ta4km+o847KOW8x9Ctvmv3RtH/0PEDQByQEnzw+SDeX/w/C/mS24VwEbY45RLd+8CfZXAlwmJCLt0RwEQ9/ka2fD46QzWXBUUIu5kjgIsGCY1TrF2/B31Rz+Sw4TsjFXAlcYL08QbR+Ceqr1Ynmise5ThFyMU8AFz60+TTR+lnqG51p5kpQc50l5OJt87mIVzafo1k/n5rrPM1cymS4QMjFO8ZzkXDJ5osk6xd/aS51Pxf+XL5Lc6WrQcfFfOO5uDQ1RFKsX8LludJTzBV/ea4MhFwsMJ0L32WbM1Ks32U1IRPBXP7gXJkJuXjXcC7igjZnIbDZG5wra/hz/fOh5myEXCw0mwtItDl72Db7Aolz5Qh/rrjEuXIScvGe0Vz4EvWEXGHb7P1nrtxhzxX1z1x5CLlYZDQX8I/NeWvQ7bMS7oeCvp8XLhfvpxEXVngvINw3A8J9H5hLyMUHQrgg3B8AwvtbeIeQiw+FcEF4HwSEfTy8S8jFYiFcEPZ7QNivwCJCLj4SwgVhXQPCvAwfEnLxcRp98NAK7wWE8QuE/gfU68dxNn+A4Wz+phq8dlM8U3bA8GfK8tUw23fU83/7GXznZsPtVh9ovKkGvd1rDc8Vyh9vZrB7nZAPt+cnvFcn5BrWGe43Kl7yMfjNj4bbfRNTvKwXEi8FCOOFkGugXD/FbdJn6VWeSHxmvoAm90x/Re6V/t/P0hfEvyuEKIwoUuPqz9Jb4b0u9ScHGWp2UQH93kHD+71ihvc96kscijLks42G53EVm8UY7N4kJI8XJ8zjhFzDJsP9RsULh99sFRAvHHlim5B4KUEYL4Rcwzbmvqe41uuUSGHfUxL/rhSiNKIMc9/zB0PfU1ZA3/OH4X1POcP7HvXFVWUZ8tkOw/O4is1yDHbvFJLHyxPmcUKuYafhfqPihcNvdguIF448sUdIvFQgjBdCrmEPc99TXut1KqSw76mIf3cLohKiMnPfc4ih76kioO85ZHjfU9Xwvkd9WWcVhny21/A8rmKzKoPd+4Tk8WqEeZyQa9hnuN+oeOHwmwMC4oUjTxwUEi/VCeOFkGs4yNz3VNN6neop7Htq4N9ZCEC4mPuePxn6HreAvudPw/sej+F9j/qCcjdDPvvT8DyuYtPDYPdhIXk8ijCPE3INhw33GxUvHH5zVEC8cOSJY0LiJZowXgi5hmPMfU+U1utEp7Dv8eLf+RAxiJrMfc9hhr6nloC+57DhfU9tw/se9aMstRjy2QnD87iKzdoMdp8UksfrEOZxQq7hpOF+o+KFw2/OCIgXjjxxVki81CWMF0Ku4Sxz31NH63XqprDvqafWCtEA0ZC57/mLoe9pJKDv+cvwvudWw/se9UN0jRjy2QXD87iKzVsZ7L4oJI83JszjhFzDRcP9RsULh99EtjY/XjjyRPrWMuKlCWG8EHINlOtn1/c01nqdJinse5ri3zVD3IZoztz3HGHoe24X0PccMbzvaWF436N+fPd2hnyWyfA8rmKzBYPdmYXk8ZaEeZyQa8hsuN+oeOHwm2wC4oUjT2QXEi93EMYLIdeQnbnvaan1OneksO+5E/+uFaI1og1z33OUoe9pK6DvOWp439PO8L7nA1y/tgz5LJfheVzFZjsGu3MLyePtCfM4IdeQ23C/UfHC4Tc3CYgXjjyRT0i8dCCMF0KuIR9z39Ne63U6pLDv6Yh/1wnRGdGFue85xtD3dBXQ9xwzvO/pZnjf8yGuX1eGfFbA8DyuYrMbg90FheTx7oR5nJBrKGi436h44fCbIgLihSNPFBUSLz0I44WQayjK3Pd013qdHinse3ri3/VCxCLimPuevxn6nngBfc/fhvc9fsP7nsW4fvEM+ayE4Xlcxaafwe6SQvJ4AmEeJ+QaShruNypeOPymjIB44cgTZYXES4AwXgi5hrLMfU+C1usEUtj39Ma/64Poi+jH3PccZ+h7+gvoe44b3vcMMLzv+QjXrz9DPqtgeB5XsTmAwe6KQvL4QMI8Tsg1VDTcb1S8cPhNZQHxwpEnqgiJl0GE8ULINVRh7nsGar3OoBT2PYPx74Yg7kIMZe57TjD0PcME9D0nDO97hhve93yM6zeMIZ9VNzyPq9gczmB3DSF5fARhHifkGmoY7jcqXjj8xiUgXjjyhFtIvIwkjBdCrsHN3PeM0HqdkSnse+7Gv7sHMQoxmrnvOcnQ99wroO85aXjfc5/hfc8SXL97GfJZtOF5XMXmfQx2e4Xk8fsJ8zgh1+A13G9UvHD4TU0B8cKRJ2oJiZcHCOOFkGuoxdz33K/1Og+ksO95EP9uDOIhxMPMfc8phr5nrIC+55Thfc84w/uepbh+YxnyWV3D87iKzXEMdtcTksfHE+ZxQq6hnuF+o+KFw28aCogXjjzRSEi8PEIYL4RcQyPmvme81us8ksK+ZwL+3aOIxxATmfue0wx9z+MC+p7Thvc9Txje93yC6/c4Qz5rYngeV7H5BIPdTYXk8UmEeZyQa2hquN+oeOHwm+YC4oUjT9wuJF6eJIwXQq7hdua+Z5LW6zyZwr5nMv7dU4inEVOY+54zDH3PVAF9zxnD+55nDO97PsX1m8qQz+4wPI+r2HyGwe47heTxZwnzOCHXcKfhfqPihcNv2giIF4480VZIvDxHGC+EXENb5r7nWa3XeS6Ffc/z+HcvIF5EvMTc95xl6HteFtD3nDW873nF8L7nM1y/lxnyWQfD87iKzVcY7O4oJI+/SpjHCbmGjob7jYoXDr/pIiBeOPJEVyHxMo0wXgi5hq7Mfc+rWq8zLYV9z3T8u9cQMxAzmfuecwx9zywBfc85w/ue1w3ve5bh+s1iyGc9DM/jKjZfZ7C7p5A8/gZhHifkGnoa7jcqXjj8Jk5AvHDkiXgh8fImYbwQcg3xzH3PG1qv82YK+57Z+HdvIeYg5jL3PecZ+p55Avqe84b3PW8b3vd8jus3jyGfBQzP4yo232awu7eQPP4OYR4n5Bp6G+43Kl44/KafgHjhyBP9hcTLfMJ4IeQa+jP3Pe9ovc78FPY9C/Dv3kUsRLzH3PdcYOh7Fgnoey4Y3ve8b3jfsxzXbxFDPhtkeB5Xsfk+g92DheTxDwjzOCHXMNhwv1HxwuE3QwXEC0eeGCYkXj4kjBdCrmEYc9/zgdbrfJjCvmcx/t1HiI8RS5j7nosMfc9SAX3PRcP7nk8M73tW4PotZchnI03/vQG0+RMGu+8Wksc/JczjhFzD3Yb7jYoXDr8ZLSBeOPLEvULi5TPCeCHkGu5l7ns+1Xqdz1LY9yzDv/scsRyxgrnviWDwyZUC+h5lt8l9zyrD+56VmMdXMvjOA6Y/p4E2r2Kw+0EhefwLwjxOyDU8aLjfqHjh8JuHBcQLR54YKyReVhPGCyHXMJa57/lC63VWp7Dv+RL/7ivE14hvmPuedAw+uUZA35PO8L7nW8P7nlWYx9cw+M4jhudxFZvfMtg9QUge/44wjxNyDRMM9xsVLxx+M1FAvHDkiceFxMtawngh5BoeZ+57vtN6nbUp7HvW4d99j/gB8SNz3xPJ4JPrBfQ9kYb3PT8Z3vd8gXl8PYPvPGl4Hlex+ROD3ZOF5PENhHmckGuYbLjfqHjh8JspAuKFI09MFRIvGwnjhZBrmMrc92zQep2NKex7NuHfbUZsQWxl7nvSM/jkNgF9T3rD+56fDe97VmMe38bgO88ZnsdVbP7MYPfzQvL4dsI8Tsg1PG+436h44fCblwTEC0eeeFlIvOwgjBdCruFl5r5nu9br7Ehh37MT/+4XxC7Ebua+JwODT+4R0PdkMLzv+dXwvudLzON7GHxnmuF5XMXmrwx2TxeSx38jzOOEXMN00897qvP4zUwB8cKRJ2YJiZe9hPFCyDXMYu57ftN6nb0p7Hv24d/9jtiPOMDc92Rk8MmDAvqejIb3PX8Y3vd8hXn8IIPvvGl4Hlex+QeD3bOF5PFDhHmckGuYbbjfqHjh8Ju5AuKFI0/MExIvfxLGCyHXMI+57zmk9Tp/prDvOYx/9xfiCOIoc9+TicEnjwnoezIZ3vf8bXjf8zXm8WMMvjPf8DyuYvNvBrsXCMnjxwnzOCHXsMBwv1HxwuE37wmIF448sUhIvJwgjBdCrmERc99zXOt1TqSw7zmJf3cKcRpxhrnvyczgk2cF9D2ZDe97zhne93yDefwsg+98aHgeV7F5jsHuxULy+HnCPE7INSw23G9UvHD4zRIB8cKRJ5YKiZcLhPFCyDUsZe57zmu9zoUU9j0Xayhl8L8hIi3evicLg0+mt8zve7IY3vdksMzOZ2swjyueqbn5zPA8rmIzA4Pdy4Tk8Yx0fgmEXMMyw/1GxQuH36wQEC8ceWKlkHjJRBgvhFzDSua+R+WJxP4mk5Wyvicz/l0WRFZENua+JytD35NdQN+T1fC+J4fhfc+3mMezM+Sz1YbncRWbORjs/lJIHs9JmMcJuYYvDfcbFS8cfvONgHjhyBNrhMRLLsJ4IeQa1jD3PTm1XidXCvue3Ph3eRB5ETcx9z3ZGPqefAL6nmyG9z03G973fId5PB9DPltreB5XsXkzg93rhOTx/IR5nJBrWGe436h44fCbHwXEC0eeWC8kXgoQxgsh17Ceue/Jr/U6BVLY9xTEvyuEKIwowtz3ZGfoe4oK6HuyG973FDO871mLebwoQz7baHgeV7FZjMHuTULyeHHCPE7INWwy3G9UvHD4zVYB8cKRJ7YJiZcShPFCyDVsY+57imu9TokU9j0l8e9KIUojyjD3PTkY+p6yAvqeHIb3PeUM73vWYR4vy5DPdhiex1VslmOwe6eQPF6eMI8Tcg07DfcbFS8cfrNbQLxw5Ik9QuKlAmG8EHINe5j7nvJar1MhhX1PRfy7WxCVEJWZ+56cDH1PFQF9T07D+56qhvc932Mer8KQz/YansdVbFZlsHufkDxejTCPE3IN+wz3GxUvHH5zQEC8cOSJg0LipTphvBByDQeZ+55qWq9TPYV9Tw1L6RIRAQgXc9+Ti6HvcQvoe3IZ3vd4DO97fqiubKTn5k/D87iKTQ+D3YeF5PEowjxOyDUcNtxvVLxw+M1RAfHCkSeOCYmXaMJ4IeQajjH3PVFarxOdwr7Hi3/nQ8QgajL3PbkZ+p5aAvqe3Ib3PbUN73t+xDxeiyGfnTA8j6vYrM1g90khebwOYR4n5BpOGu43Kl44/OaMgHjhyBNnhcRLXcJ4IeQazjL3PXW0XqduCvueemqtEA0QDZn7njwMfU8jAX1PHsP7nlsN73vWYx5vxJDPLhiex1Vs3spg90UhebwxYR4n5BouGu43Kl44/CayjfnxwpEn0reRES9NCOOFkGugXD+7vqex1us0SWHf0xT/rhniNkRz5r4nL0Pfc7uAviev4X1PC8P7np8wj9/OkM8yGZ7HVWy2YLA7s5A83pIwjxNyDZkN9xsVLxx+k01AvHDkiexC4uUOwngh5BqyM/c9LbVe544U9j134t+1QrRGtGHse8bnjIjYWI7eJ3MJ8cm2hD7Z+Xa6uXK1Mb9vvJMhl+UxPIcru9sy2J2XKV6o+3pCfiCvkBzxenU6m+dUp9OrHeF9UUacI7sWL/qLOoYo9db1bW8xKtzeop+3g0XnDFx2d9BCi2jeS84WGXElOXE6G2HwWpx6zqnOExQdld9SVyvlFKoSclRXykVIHySqoxa8HJ2QWg+Td9A6EVeK9BFpUykog0JPNp2DodzFLjis8F6gFrsjQ9bkWGClZyeGdrar4Vu2ygG6MtjdzeJJYGreMRE8QdaFaS26M61Fd8a1UAmHYy1uNvx2nise8l9fu+OT0Y/N9wuk0a2tFd4LCP0SCLkGyvVTDYvaPrW724gIcT2T8yd9To6aRbUmevPWQ/N/cqW7MhWBHtfo6JOZBpL7/1E692BICkWYkkKGEDkLpXkL1+aelpkJpkgbHr/sqTUnqeUnuTWn5KeXNhe43Rgbfi8E/AF3lDfGFQfR7ujogCfgjfZ5/IEoT6zfmwCeWLcrJsFrBcCXkOCNcsd7owMx/vjogJ60we92e/wxcfEQ5YqOjbN8fnesFfB43S4r1u/2+v1uX3R0rNvtj/YFfDE+lys24PZZUV5vjBXtcse4uPjpFeQnLe9iX2e6i40NZoE4KQmcS79YhmQdz1S44hnvXtRaxDGshZ9pLfyMa/E6051cMcPv5Ljiobjhd3Jcvl9CyJ0coV8CIddQwrmTS/qCWKY7uQSJd3IJzHdyCQxJocwNeCcXsMxMMGWY7hQCwu7kehPeyZUgvJPj4qe3did3taJg8hYcp55cBaaPxALTh7nA9GEoMOXSqMBQnvMadFb0rwIT9tfXC3lMsS9hgSb0PyjPVAD6pqBAh7um/Sy6Qviv7VGDCnQ5Jn76/R9ttfYPRu4AjqfprvYQjhXeCzoRdytcdkcy2h2ujgMN3/5WjjmQoQEZxNSMDWLc8h3AtBaDmdZiMPP2N8da3GL49jdXPFQyfPuby/crC9n+JvRLIOQaKjvb30lfl2oW1ZroTeUQzt2JgUxFYAjj7oTSeQhDUqguZPt7IGEjeJdlZoKpznT3dlcabH9T8jOUcPu7MuHdNRc/Q6/D3TXXx3GGBbPAcCkJnEu/YQzJegRT4RrBePei1mI4w1qMZFqLkcwfSeHo7C3D7+S44gEMv5Pj8n2XkDs5Qr8EQq7B5dzJJX3BMKY7ubsl3sndzXwndzdDUoi+Ae/k7rHMTDDRTHcK9wi7kxtFeCfnIryT4+Jn1HV4kKm/xRP3UgrMaIkFZjRzgRnNUGB8Qh5kokxglZg62HD1ihHyINO9hAWa0P8ghqkA3JsGDzLdR/ggU+U2ZhZoHxM/99nwQ33X+zrh9wLOI5zrfsJalpbfMXg/U+PwgMWo8AMMD4E9SFjYuOx+UCsnRPOm6XcMzhPyHYOvM33H4BiOpyKVU0j6jsEx1+jOKb5j8EHL7O8YfIi4Ukh/ZPjhYCiPtQsOK7wXqMUew5A1ORZY6fkQw63lOMMPdJUDjGOwezzT9sJ4xkPMsUxr8QjTWjzC/Ggux1rUNvxAlyse6hh+oMvl+3WFHOgS+iUQcg11nQPdpK9LNYtqTfTmbQLnfvs4piIwgXG/Xek8gSEpNBRyoDuOcFviUcvMBNOQaT/y0TQ40KXk5zHCA926hPvFXPw8dh0ezZ3HdBc7MZgFHpeSwLn0m8iQrJ9gKlxPMN69qLV4nGEtJjGtxSTGtZjHdCd3q+F3clzx0NjwOzku328i5E6O0C+BkGto4tzJJX3BRKY7uScl3sk9yXwn9yRDUmh+A97JTbbMTDDNme4UJgu7k3uK8E6uCeGdHBc/T12HR3MftnjiXkqBeVpigXmaucA8zVBgWgh5NJcygdVh6mDD1aulkEdzpxAWaEL/g5ZMBWBKGjyaO5Xw0dy6bcws0C2Y+Jn6f7TV+kwwcp/leJruag/hWOG94CHiboXL7khGu8PV8TnDt7+VYz7H0IA8z9SMPc+45fss01q8wLQWLzBvf3OsRSvDt7+54qG14dvfXL7fRsj2N6FfAiHX0MbZ/k76ulSzqNZEbypf5NydeI6pCLzIuDuhdH6RISl0ELL9/RxhI/iSZWaC6cB09/ZSGmx/U/LzMuH2dxvCu2sufl6+DnfXXB/HeSWYBV6VksC59HuFIVlPYypc0xjvXtRavMqwFtOZ1mI680dSODr7TobfyXHFQ2fD7+S4fL+LkDs5Qr8EQq6hi3Mnl/QFrzDdyb0m8U7uNeY7udcYkkKPG/BOboZlZoLpwXSnMEPYndxMwju5LoR3clz8zLwODzI9Y/HEvZQCM0tigZnFXGBmMRSYXkIeZKJMYK2ZOthw9YoV8iDT64QFmtD/IJapALyeBg8yvUH4IFObNmYW6F5M/LzBuLvzENO57ZuG73ZuxV2t7dXp7Z5tuN3q9085fjHkLcOf9VL+qLih3i0i9HOYTdgDzDHcD5W/zGHww7mG+6H6Vr25ltnf1jfP8DVUJxLzGHzH38bsmJnDZHcCU19O7eOE/ECC4adPc5m4fpswttPyO5sp9db1fcdiVPgdhofq5xM2CVx2z9fSANG8l5wt8XubuZ2tUgRPQqTWcxLh8zA5ND0XBLV+N/i+MPj+XvB9UfD9/eD7B8H3D4Pvi4PvHwXfPw6+L7EYPr2inE3Sd0EvDCYFfex9m7HFNmNLgmNpmXkXMGXepRajwksZMu8nhmdeZfcnTJk3rZztXSZn+9RiVPhTBmf7zHBnU3Z/xuBsdrqGa//CYGBQ349QJoRlQvvy95gC9nOLUeHPGQJ2ueEBq+xeLrw6LGJythUWo8IrGJxtpeHOpuxeKaQ6vB8MDOrqQJkQVhm+m686gWUMu1VfGG638vFVDHavFtoNfMCUoL+0GBX+kiFBf2V4glZ2fyW8G/iQydm+thgV/prB2b4x3NmU3d8I6QYWBwODuhugTAhrDK+KqmqvZqiK3xput/LxNQx2fye0G/iIKUGvtRgVXsuQoNcZnqCV3euEdwMfMznb9xajwt8zONsPhjubsvsHId3AkmBgUHcDlAnhR8Oroqra3zFUxfWG2618/EcGu3+yzI4ZdW4+3zL7CccNhvuO8u2fGHxnI3GRREr++aSI+vc6/MeFoKyOoxPldzX5++DfJF63Cf/bZsQWxFbrynjii/qJ7YV0awCbCPP4NmKf5Fo/whM/2Ey4fj8LWT/CQyzYQrh+25lzwzYtB/ysyds1eav179ywA/+9E/ELYlca5Ib3CbnZQcjNbiG+Tbj/DzsJ12+PkPUj3NKGXwjX71fm3LBbywF7NPlXTd6VJDf8hv/ei9iH+D0NcsNiQm5+I+RmvxDfJtwNhL2E63dAyPoRbnDBPsL1O8icG/ZrOeCAJh/U5N+T5IY/8N+HEH8iDqdBblhCyM0fhNz8xczNXxoHhzT5T00+nISbI/jvo4hjiL+tf8+nc0Jxj7+RYR9iAyE/xw3fh1BcHWfYhzhhuN1cn747abjdyrdPMNjdx/BPWyq7TzLY3VfIJ2sJ+YG+xN9TmSkibQ4QKT/0l1PT81SQudPB9zPB97PB93PB9/PB9wvB94uJjAe/QTNd8D0y+J4++J4BbD5UZ4X3gsRN/Ajaef/1Qbgz1n8/4HbeZkwtQNKx9JD2H4Q7RdxMJb4yAqPCGYF+3kxg9gmzsjsT0DtvWjrbaSZnywyMCmdmcLYshjubsjsLg7PZ6Rqu/WeCgUHdPlAmhKwgM2DPMgVsNmBUOBtDwGY3PGCV3dmFV4dzTM6WAxgVzsHgbDkNdzZld04h1eF8MDCoqwNlQsgFvGtohfe61K1kBXpuchtut/LxXAx25xHaDVxgStB5gVHhvAwJ+ibDE7Sy+ybh3cBFJmfLB4wK52NwtpsNdzZl981CugG163YTQzdAmRDyG14VVdXOw1AVCxhut/Lx/Ax2FxTaDaQDngRdCBgVLsSQoAsbnqCV3YWFdwORTM5WBBgVLsLgbEUNdzZld1Eh3UD6YGBQdwOUCaGY4VVRVe2CDFWxuOF2Kx8vxmB3CcPtTjxDp7a7pOF2K38swcB3KeLCdq0Pr53SHmA8bV39w2ulUacyiLKIcsD/oOkZwgdNSxPm3vLEPsm1foSndFCGcP0qCFk/woMnKEu4fhWZc4Py78QcUEGTK2pyOfh3brgF/10JURlRJQ1yw3lCbm4h5KaqEN8m3LOHSoTrV03I+hFuQ0NlwvWrzpwbqmo5oJomV9fkKklyQw38t/ppdEC40iA3RNCtAdQg5MYtxLcJd/DAIlw/j5D1I9yUAiBcvyjm3ODWcoBHk6M02ZUkN0Tjv70IHyImDXJDekJuogm5qcnMTU2NA68m+zQ5Jgk3tfDftRF1EHWB78Nr6h6/FMN+W0lCfuoZvg+huKrHsA9Rn9kv10de8b/6mi9m0OS1kf/2ywb43xoiGiFuvYZfWuG9Ln1IpiTDmg4w/ANiyuYGDHYPFPIBMUJ+YKDhP7OpviBqA8O+7RDD7VZ7ixyxfVebtOlRw9WzMWEfRMg13GW436hzjsYMftOEuM4mfnawiaYr9Vq8z5Q7hhvuA+eZcscIIbmjKWHuIOQaRgjIHU0Z/KYZU+5oxpg7FjDljnsM94FTTLljlJDccRth7iDkGkYZ7jfvMsXLfYbbfZopXu4XEi/NCeOFkGugXD+7faHbtP2f5prc+Br7Qrfjf2uBaIm4I7gvpP4ua8SVPYJLZ1hZrsyh9nguBP/bnZC237FxJ3HdTny1AkaFWzE8vNra8IdXld2t4coCE83L1mRy6GoXpB4tkO7UArNn+ityr/T/DtI2+HdtEe0Q7Rk3b9U67Kpm9jfzd2Bq3NW8pSIuJ7McEVfWQH9Rr/fv1cKfK3D5ZdmoG+7ckCjoa9ExGCedILggiQvYMZjk9LFOwUXVX9Snk/oiptK5XEHngo6ESbUT0JJL3c2poOwoI0G7la6KZ+o16MyUTDprfi9lLboQroVahw0R/31RzR/Bs7ZAuQZcOnal1pGji2jDcPs5xvAjYGV3Vwa7H2K67c7A6Jjh2tyN8Bae0G+AkgvmJPlPab8Rk2Q3w5PkP1Xc5Fut7kzdUfc06I5MXtceTqcFPQQkkZ4SOq1dDLcC4wR0Wj0ZOq3xQjqtnoSdVi/CTovQb2C802mJSJK9btBOy0XZEcQydVqx8jot0nWNczotiBOQROK5kwhFxxHP8HGbeMJK7pfj7GwVU4Kz+yXcVph+D53AVDETtGPg9BHynmmJ1PQMBMOst3arxOIsVMpz6Xcnw73iowLukQMMdj92fe2OT0a/S3z3ZrB7Yho9/GiF9wJCvwRCrmEi8cOPWbS10x9KVHJlTb49+IxVNKIPyn3T+IHFPkwPLPYDRoX7MTyw2N/wBxaV3f0ZnodJS2fry+RsA4BR4QEMzjbQcGdTdg8U8nRs/6Cu1BV1EJjfQQ0Cs2+DBhMHvHryNX2EjV96wOVyg8eLqlmooz/e50rwxUZFxcZEufwef8BluaKiAwkW6uaP8cTgsAfiYy0rYMXGBSDqQtL5Yn3xaHW05bfwfwJRfh+a7Ynxe3wBt+Xx+K1o8FhxMb4Evxe8sTFxUW5XbCDabcVDlNvyxkBidZ9f8PJ7IkdKDmhPVfcOykPw/S7EUEjbJ3yHMuxHRNjxE97Lpa/FsGBeGp70CV/1H84nGRsO/61s1C3tUIJknhB8lHYYYWEYzkQudcKhtHmENhf43C6X163+zue3wOPHmzOXyx/nseKt2HhXQowHYgIel8cd74+PwzljIWAFYuNjAr7LeqVlZzSCqTMaCYwKj2TojO42vDNSdt+dRp0RRQK4m6Ezuodpc/Me+HelpOQtsVuiXotRzF2iFd7rkt2jGLrE+YRd4mgBaziawXfuZYqje4HvSx7UWgw33J/uE+BP9zH40/1M/nQ/oz+pba3BDGvxgOE+0JfJ7geJfSBn0PYHtLvWBzV5tPaxyiHa+F2anOjrY/D9IcTDwbvczBGX35O+TD7AtFE37LkD8dGB6Ci/JzHmONeiUgT9WlDrWFmAjrcz+RS1nmOE6LmrGt1c+g3w2Bv94YKxQrbxmb7cgfR5zXFMDdY4vudgXVyfxx7PtBbjBa7FI8SPNm6J+O+Lav4InrWFR8B8HSdIeLRxDMNdwZMCngabwGD3ZCGfmJpAuOv9KOEnpgj9Bia3EZMk2Z7/lpAkHzU8SbokPP/9GFN39FgadEcmr+tEp9OCiQKSyOMSPjGllKR+GIRwS+BfixiuvVMEfJG63e1/uHY/QdgNTXE6GBHJ5wlKHZVySb8kdUSeK4cbIzV5cuarf5PxJFTqScRkxFPA+yWpMRXpE+bThh+o5a+AB0sV6O1+Rsi3ik8hTHR7W9DN9YzhhacAk988J8RvphL6zQFCv3nOcL8pyOQ3Lwjxm2cI/eYood+8YLjfqDo6hWGr81nD67OyeyqD3c8Zbnct7MWeZrD7eeIdpqQ97rPaAzzPafLzcPUe9wX8by8iXkK8DPy//DyJ8Ab5BcK5XiHkJi0/hfAKsU8lvl4FRoVfZfgUwjTDP4Wg7J4GVxaYaN5LzqY+uR4Zwe9skwx/Ki/4culJbHpwzV8Lvs8Ivs9UPkid4RXBqwqa/dSSfjYxQ3sUNGk1ma5Vjdc0ecY1qsks/G+vI95AvAl8v1Wv1mMamH3uMZu5ywlXPxXMsxm6nJcM7+ZnMdn9spDfVSfkByhtTssPUe8V+DNJbwUL1xyI+PcHpt/Sknji2Bzt0DnxRd3K7yX8maS3CLu3OUBLLnWiUMnnLRmP+EYpjjmS5Vymhy3m8j1sAZVx63Acw/bhNMMLZnWmbdPpQrZN5xFumxJyDdMN9xsVL+MZ/Gam4XbXYIqXWULi5W3CeCHkGmYJiJfHGPzmTcPttpjiZbaQeHmHMF4IuYbZAuJlIoPfzDXcbmCKl3lC4mU+YbwQcg3zBMTL4wx+M99wu11M8bJASLwsIIwXQq5hgYB4eYLBb94z3G43U7wsEhIv7xLGCyHXsEhAvDzF4DcfGm63hyleFguJl4WE8ULINSwWEC9PM/jNEsPtjmKKl6VC4uU9wngh5BqWCoiXKQx+85nhdkczxcsyIfGyiDBeCLmGZQLiZSqD36ww3G4vU7ysFBIv7xPGCyHXsFJAvDzP4DerDbfbxxQvXwqJlw8I44WQa/hSQLy8wOA33xhudwxTvKwREi8fEsYLIdewRkC8vMjgN2sNt7smU7ysExIviwnjhZBrWCcgXl5m8JsfDbe7FlO8rBcSLx8Rxgsh17BeQLzMYPCbjYbbXZspXjYJiZePCeOFkGvYJCBeZjH4zVbD7a7DFC/bhMTLEsJ4IeQatgmIlzcY/GaH4XbXZYqXnULiZSlhvBByDTsFxMtsBr/Zbbjd9ZjiZY+QePmEMF4IuYY9AuLlHQa/2Wu43fWZ4mWfkHj5lPJrMAnjZZ+AeFnA4DcHDLe7AVO8HBQSL59Rfv0nYbwcFBAvCxn85k/D7W7IFC+HhcTLMsJ4IeQaDguIl0UMfnPUcLsbMcXLMSHx8jnl1wQTxssxAfHyMYPfnDDc7luZ4uWkkHhZThgvhFzDSQHxspTBb84Ybndjpng5KyReVhDGCyHXcFZAvHzK4DcXDLe7CVO8XBQSLysJ44WQa7goIF6WMfhNZFuz7W7KFC/p28qIl1WE8ULINaQ33G9UvHzB4DeZDLe7GVO8ZBYSL18Qxgsh15BZQLx8yeA32Qy3+zameMkuJF5WE8YLIdeQXUC8fM3gN7kMt7s5U7zkFhIvXxLGCyHXkFtAvKxh8JubDLf7dqZ4ySckXr4ijBdCriGfgHj5gcFvChhudwumeCkoJF6+JowXQq6hoIB4Wc/gN0UMt7slU7wUFRIv3xDGCyHXUFRAvGxg8JsShtt9B1O8lBQSL2sI44WQaygpIF42MfhNGcPtvpMpXsoKiZdvCeOFkGsoKyBetjP4TQXD7W7FFC8VhcTLd4TxQsg1VBQQLzsZ/Kay4Xa3ZoqXKkLiZS1hvBByDVUExMsuBr+pbrjdbZjipYaQeFlHGC+EXEMNAfGyh8FvXIbb3ZYpXtxC4uV7wngh5BrcAuJlP4PfRBtudzumePEKiZcfCOOFkGvwCoiXgwx+U9Nwu9szxUstIfHyI2G8EHINtQTEyyEGv6lruN0dmOKlnpB4WU8YL4RcQz0B8XKYwW8aGm53R6Z4aSQkXn4ijBdCrqGRgHg5zuA3TQy3uxNTvDQVEi8bCOOFkGtoKiBeTjL4TXPD7e7MFC+3C4mXjYTxQsg13C4gXk4z+M0dhtvdhSle7hQSL5sI44WQa7hTQLycZfCbNobb3ZUpXtoKiZfNhPFCyDW0FRAv6SrS+00Hw+3uxhQvHYXEyxbCeCHkGjoKiJf0DPHSxXC7uzPFS1ch8bKVMF4IuYauAuIlI0O89DDc7h5M8dJTSLxsI4wXQq6hp4B4ycwQL3GG292TKV7ihcTLz4TxQsg1xAuIl5wM8RIw3O5eTPHSW0i8bCeMF0KuobeAeMnNEC/9DLc7lile+guJlx2E8ULINfQXEC95GeJlkOF2xzHFy2Ah8bKTMF4IuYbBAuIlH0O8DDXc7nimeBkmJF5+IYwXQq5hmIB4KcwQLyMNt9vPFC93C4mXXYTxQsg13C0gXooyxMtow+1OYIqXe4XEy27CeCHkGu4VEC/FGeLlAcPtDjDFy4NC4mUPYbwQcg0PCoiXkgzx8rDhdvdmipexQuLlV8J4IeQaxgqIl/IM8fKI4Xb3YYqXCULi5TfCeCHkGiYIiJeKDPEy0XC7+zLFy+NC4mUvYbwQcg2PC4iXSgzx8qThdvdjipfJQuJlH2G8EHINkwXESxWGeJliuN39meJlqpB4+Z0wXgi5hqkC4gUY4uU5w+0ewBQvzwuJl/2E8ULINTwvIF7cDPHykuF2D2SKl5eFxMsBwngh5Boo1y8DznEaCW4VnG8e2vw2YgLy/g6+z0csQLyLeBLHFuL7e4hFiPcRz+LYB/j+IWIx4iPENBz7GN+XIJYiPkHMxbFP8f0zxDLE5+oaHFuO7ysQ6rfb1e9Rr8Ax9Tu76rdD1e8hqt94W4tj6rer1O/xqN8YUb+bsBXH1PfBq++4Vt/bq76LdK/6XTN8V98bp74LS32/z1H1WzT4rr6LQX2+XH1m9gKOqc8Cqs83qc9sqOfQs2F8q+dr1TOD6jko9WxHARxTZ9bqHE6dLaj90jI4pvaB1L2t6tdVD1Idx1RuVf6S+CKOxai91SIiZgN9LB6k83ErfdCXkr6o5mdaW6BcAy4d/6DWkVrB6cDjoNOYi2S4+imb/2CwezpTkczA6Jjh2nyIsOAS+g1QcsGcJP8pQTdikjxkeJL8p4pHEhs+mzAI/yRcRLV+6YPrqOYtxUO8iHU97HRacFhAEvnL9E7rNaZOa6aATusvBrtnCem0/iJMRkcIOy1Cv4FZTqclIkkeuUE7LRdlR3CUqdM6Kq/TIl3XY06nBccEJJG/Te+0ZjB1Wm8K6LT+ZrB7tpBO62/CZHScsNMi9BuY7XRaIpLk8Ru003JTdgQnmDqtE/I6LdJ1Pel0WnBSQBI5ZXqnNZOp05oroNM6xWD3PCGd1inCZHSasNMi9BuY53RaIpLk6Ru00/JQdgRnmDqtM/I6LdJ1Pet0WnBWQBI5x51EKDoOpWR6UsPd/9rAtcJ7/WsRw7X3vJzAYau+EgLnvOm3KKsKRkRMY2jVLxAbTm3306jfMwx2X3QqGvRMb76OES5CHaUStT/SfB3TOURZUDWL+TpGugwvderDPxcYUv58wz/wdukm0EVv9wIhH3hLT+eYQMg1LDDcb1RrmJ7BbzIQJgp9MyVDUFepSb66gCSf0anGFlgCiMrkEGWBSwBRmR2iLPAIICqLQ5QF0QKIymr6jciTTDci7wm4EcnK0FAuEnIjko3wRoSQa1gk4EYkG4PfZGe6Ecku/EbEJyDJ53CqsQU1BRCV0yHKgtoCiMrlEGVBXQFE5XaIsqC+AKLymH4j8izTjciHAm5E8jA0lIuF3IjkJbwRIeQaFgu4EcnL4Dc3Md2I3CT8RmSzgOcT8jnV2IJGAqrxzQ5RFqwXEFH5XfQ6XnpFkioKlioHiXOFWwIKEBot1TkLuMzXsaAM57QClM5ZiM5ol1TnLCTAOQubfsM5jemGc4mAG87CDDcOS4XccBYhvOEk5BqWCrjhLMLgN0WZbjiLaromvoi7LhdlYSvmdF1QTEBhKy7klsBN6ZwlHOeEEgKcs6QQ5/RQOmcpxzmhlADnLC3EOaMonbOM45xQRoBzlr0RM2c5ZzMFyglwzvKmb6bMZdpM+UzAZkp5hpviZUI2UyoQbqYQcg3LBGymVGDwm4pMmykV+TdTvJSF7Ran64JbBBS2SkK6Lh+lc1Z2nBMqC3DOKkKcM4bSOas6zglVBThnNSHOGUvpnNUd54TqApyzxo2YOS1nMwUsAc4Jpm+mfMi0mbJCwGYKMNwUrxSymeIi3Ewh5BpWCthMcTH4jZtpM8XNv5kST1nYPE7XBR4BhS1KSNflp3TOaMc5IVqAc3qFOGcCpXP6HOcEnwDnjBHinKSfpKjpOCfUFOCctW7EzFnb2UyB2gKcs47pmykrmDZTVgvYTKnDcFP8pZDNlLqEmymEXMOXAjZT6jL4TT2mzZR67JspLqAsbPWdrgvqCyhsDWR0XS7Sz6A1dJwTGgpwzkZCnJP0M2i3Os4JtwpwzsZCnJP0kxRNHOeEJgKcs+mNmDmbOZsp0EyAc95m+mbKWqbNlG8EbKbcxnBTvEbIZkpzws0UQq5hjYDNlOYMfnM702bK7fybKdGUha2F03VBCwGFraWQrov0M2h3OM4JdwhwzjuFOCfpZ9BaOc4JrQQ4Z2shzkn6SYo2jnNCGwHO2fZGzJztnM0UaCfAOdubvpmylWkzZa2AzZT2DDfF64RspnQg3Ewh5BrWCdhM6cDgNx2ZNlM68m+mxFEWtk5O1wWdBBS2zkK6LtLPoHVxnBO6CHDOrkKck/QzaN0c54RuApyzuxDnJP0kRQ/HOaGHAOfseSNmzl7OZgr0EuCcsaZvpuxl2kz5UcBmSizDTfF6IZspcYSbKYRcw3oBmylxDH4Tz7SZEs++meIm/Q1Fv9N1gV9AYUuQ0XW5ST+DFnCcEwICnLO3EOck/QxaH8c5oY8A5+wrxDlJP0nRz3FO6CfAOfvfiJlzgLOZAgMEOOdA0zdTjjJtpmwUsJkykOGmeJOQzZRBhJsphFzDJgGbKYMY/GYw02bKYP7NFNLfUBzidF0wREBhu0tI10X6GbShjnPCUAHOOUyIc5J+Bm2445wwXIBzjhDinKSfpBjpOCeMFOCcd9+ImfMeZzMF7hHgnKNM30y5wLSZslXAZsoohpvibUI2U0YTbqYQcg3bBGymjGbwm3uZNlPu5d9MIf0NxfucrgvuE1DY7hfSdZF+Bu0BxznhAQHO+aAQ5yT9DNoYxzlhjADnfEiIc5J+kuJhxznhYQHOOfZGzJzjnM0UGCfAOcebvpmSrSLPZsoOAZsp4xluincK2Ux5hHAzhZBr2ClgM+URBr+ZwLSZMoF/M4X0NxQfdboueFRAYXtMRtflIf0M2kTHOWGiAOd8XIhzkn4G7QnHOeEJAc45SYhzkn6S4knHOeFJAc45+UbMnE85mynwlADnfNr0zZQCTJspuwVspjzNcFO8R8hmyhTCzRRCrmGPgM2UKQx+M5VpM2Uq+2aKh/Q3FJ9xui54RkBhe1ZI10X6GbTnHOeE5wQ45/NCnJP0M2gvOM4JLwhwzheFOCfpJylecpwTXhLgnC/fiJnzFWczBV4R4Jyvmr6ZUoZpM2WvgM2UVxluivcJ2UyZRriZQsg17BOwmTKNwW+mM22mTOffTCH9DcXXnK4LXhNQ2GYI6bpIP4M203FOmCnAOWcJcU7Sz6C97jgnvC7AOd8Q4pykn6R403FOeFOAc86+ETPnW85mCrwlwDnnmL6ZUp1pM+WAgM2UOQw3xQeFbKbMJdxMIeQaDgrYTJnL4DfzmDZT5vFvppD+huLbTtcFbwsobO8I6bpIP4M233FOmC/AORdQ6qiI2hIhj6j9kebr+C5XFklPrOiuanRZRDc63LkWErZxGXGO7BH/bRc4iF9I3O4kvt5zMSr8not+3kWEzsBl9yLXlQUmmteSmlWrZzFfx/dvxKz6PmEgfSA0q37AlFU/dDEq/CFDVl1seFZVdi92smriC1wCsupHN2JW/YgwkD4WmlU/ZsqqS1yMCi9hyKpLDc+qyu6lDFnVTtdw7V8UrADUwb/IZWYV/cTlVLloAVXu0xuxyn1K6OifCa1ynzFVuWUuRoWXMVS5zw2vcsruz4VUOVWNP2GocksJg+wTQr6XO1UOagqocituxCq3gtDRVwqtciuZqtwqF6PCqxiq3BeGVzll9xdCqpyqxssZqtznhEG2nJDv1U6Vg7oCqtyXN2KV+5LQ0b8SWuW+YqpyX7sYFf6aocp9Y3iVU3Z/I6TKqWq8mqHKfUEYZKsJ+V7jVDnYLOAZsm9vxCr3LaGjfye0yn3HVOXWuhgVXstQ5dYZXuWU3euEVDlVjdcwVLlvCINsDSHf3ztVDtYLqHI/3IhV7gdCR/9RaJX7kanKrXcxKryeocr9ZHiVU3b/JKTKqWr8PUOVW0cYZN8T8r2BKXtGkq4fkP4m1UZCLqRW9o0u83XcdCNW9k2Ewb1ZaGXfzFTZt7gYFd7CUNm3Gl7Zld1bhVR21YFsYKjsPxEG2QZCvrfJqOykv5n2s1PZ4WcBlX37jVjZtxMG9w6hlX0HU2Xf6WJUeCdDZf/F8Mqu7P5FSGVXHcg2hsq+lTDIthHyvUtGZSf9Xa7dTmWH3QIq+54bsbLvIQzuX4VW9l+ZKvtvLkaFf2Oo7HsNr+zK7r1CKrvqQHYxVPZfCINsFyHf+2RUdtJfP/rdqezwu4DKvv9GrOz7CYP7gNDKfoCpsh90MSp8kKGy/2F4ZVd2/yGksqsOZB9DZd9LGGT7CPk+JKOy+ygr+59OZYc/BVT2wzdiZT9MGNx/Ca3sfzFV9iMuRoWPMFT2o4ZXdmX3USGVXXUghxgq+x+EQXaIkO9jMio76W/n/e1UdvhbQGU/fiNW9uOEwX1CaGU/wVTZT7oYFT7JUNlPGV7Zld2nhFR21YEcY6jsRwmD7Bgh36dlVHbS33Y841R2OCOgsp+9ESv7WcLgPie0sp9jquznXYwKn2eo7BcMr+zK7gtCKrvqQE4zVPZThEF2mpDvizIqO+nvB0a4ncpOuAZsOqZzR9x4lV03Oty5It0yKzuh3v+q7OndjAqryannzeA2u7IruzO4ryww0bwslV11IBcZKvsFwsp+kbCyZ3SbzYfyG6UjNR8ZKJMeYfxlYubDCu916VerM7npedY7NyvMlypCWSOuvPTknlnTnWVxKI1IH5E2lTQzodNFanpmCSb9rFIWnUu/zAwR82dbszO3sjsLg92Hr6/d8cnod4nvrAx2/0Vsd+KLurIS+iUQcg2U66e4zaGtHeX6Xbj2fK74ALijErxRVnSsJ8of7Xb5XV7L74kKADqSK8aDbhSI9/j8Ppc74PK64i8EfXx+wcvviQlaySo+E/971qCcDd+zI3Kozitop57UI7TrKe3OwXUfT6unS1+LnMECl8sdXJDEiq3+w/kkY7nc/63m1MGXg6AVTQhcfuUkbGtzMZFLu4FoAaXNubW5wOd2ubxu9Xc+vwUeP5YRl8sf57Hirdh4V0KMB2ICHpfHHe+Pj8M5YyFgBWLjYwK+y3ql5b5KbqZ9lTxuRoXzMOyr5DV8X0XZnVfIvkquoK7U895E7KyJyVrNq1dKSt5Uh9gU6JPXfMLTj3wC9iHyMfjTzUz+dLOmK/VavIcrvMGiX4u/25rtA2dx1pJAb/fxNLrTClfP/IR7mIRcw3HD/WYRU7ycMtzuc0zxclpIvBQgjBdCroFy/ZLuTKh/59fu8gtocmL9TG5HoCC+F0IUTuMdgcICdwSKBPvxokl3BIrY7AgUTYMdgcKEOwJFCG+IigrZEaC0uZjQHYFiTDsCxd2MChdn2BEoYfiOgLK7hJAdgaJBXannLcl0B1eSeUegKANvXPqqjkDpTK1vqeA8pXD+0ogyiLKIcojyiAqIiohbEJUQlRFVEFUR1RDVETUQFgIQLoQb4UFEIaIRXoQPEYOoiaiFqI2og6iLqBes3Dr3Sp8sEf8eK20zVsZmrKzNWDmbsfI2YxVsxirajN1iM1bJZqyyzVgVm7GqNmPVbMaq24zVsBmzbMbAZsxlM+a2GfPYjEXZjEXbjHltxnw2YzE2YzVtxmrZjNW2GatjM1bXZqxecCwigifPFGTIuefa8jRzGYj1LEXWDFtQmmguxUsZwr7ivOFcJFxWFMqGb7Mr8ZmLcuHO5bny/EZ5Qi4umMuFpT+zUiEcm13/fv6lYurnspI+S3MLIRcXDeQiOvDf54cqpc5mn92zSJVTM5fP/rmmKpT3Pu2M4sJ7tWe5qoZqs/fqz4VVC20u17WeMatOyEU6U7jwXvu5uhoptznZZ/SslM7lTXb9AAi5iLz+XFgp0BNcKbHZSpHN4E5+rqgUrh94CLlIfz258KRYT4i6ps2eQAg2Q/S15vKGtH7gJeQiw/XhwheinuC7is0xgZBthhj7uaxUrB/UJOQiY1pzYaVKT6j1X5shlTZD7aRz+VO9flCHkItMaceFOww9oa5msysQls1Qj25/F/R9i3C5yJxGXFjhvYBwfwAI72/hIiEXWYRwQXgfBIR9POh9aLhcZBXCBWG/B4T9CmQk5CKbEC4I6xoQ5mXIQshFdiYuqB8gIYxfIPQ/oFw/5b/n8FCkVHC+esGzwDrBs8FawbPCmODZoTd4lhgVPFt0B88aIXj2WCN4FlkteDZZJXhWWSl4dlkxeJZZPni2qfbC1RmAOlNQZxRJX0kfagnX9woR9qD13WQPtVhp+VBLfbo+8l8PtTRwMyrcwE0/b0PKjV0muxtqQUE07yVni4xIm0cZC7l5kn3SNQk3AHVHbqR8jfqkWBG5qiDPyTbVAuun8Y20gKNeC6WzWg/qRxYpvwXtVmLHDZX35BxW8XMrwxMNjd08/qTmHXMVf0punuSCm2stmjCtRZMw1uJ6+UVTprVoKtAvmjGtRbPgWqTlV+BQFmi9obgt2Lg0tyumVngvUKQ2YuiMOBaYywlvd5ttt3KA2xnsbsEUfC3CSETJvKA501q0ZFqLloxrUYhpLYq1442HcPXjiofi19fuZB854fL9EkK2EQn9Egi5Bsr1Uw2L2kq021GICHE9k/MnfU6OmkW1Jnrzdofm/+RK385UBO64xg5AMtNAcv8/Suc7GJJCGUPOeUJp3sK1+U63mQmGkgvdL+/UmpPU8pPcmlPy00o/J3C7MTb8Xgj4A+4ob4wrDqLd0dEBT8Ab7fP4A1GeWL83ATyxbldMgtcKgC8hwRvljvdGB2L88dEBPWmD3+32+GPi4iHKFR0bZ/n87lgr4PG6XVas3+31+92+6OhYt9sf7Qv4YvDGODbg9llRXm+MFe1yx7i4+Gml3cVSFYXkdj30OaUUhdYSi0Jr5qLQmqEolDOkKFzVib2Xv2WAMum0MbQolGNKOm0IikJy24mU/LQ1tChw8dP2/2hrs11w57E9xznh1bYLrfBewH2eRWV3JKPd4erYwfAtV+WYHRgKaEemZqIj4zZje6a16MS0Fp2Yt1w51qKC4VuuXPFQ0fAtVy7fv0XIliuhXwIh13CLs+Wa9HWpZlGtid5Udua8u+7AVAQ6M95dK507MySFqkK2XDsQNoJd3GYmmKpMd29d0mDLlZKfroR317cQ3l1z8dPVhp9Qb6SS22Kl5KcbU/7sRrAOye0CUa5Dd6Z16C7MH3owrUMPYf7Qk2kdeqbgSMbkxs5GXTI/1pvGXhKbxl7MTWMvhqaxuhnfvROflkkulnAuyqaxOlNTEpuCpjG5dUAHhXiwAlYMdliWNz7aGxfjd8X5sK8KRLn9bkp+4tx0jR5l08jFT9w1dhwpPj3DsQMVT3jjpfsl9alDPUK/9JPZ7GP7RaJ4Bq4TDD9tUbwkMNgdYOoT1LxZgv8+Z3P+SrnWHOvdM735OvambnqlOK1l+FGQsrk3g90g5ItFehMWpD6ERZjQb4CSC+Yk+U/zcSMmyT6mJ0mu7rXvDdrR9DPcbmVzPwa7+zN1cv3dvL+U0JdhLQYY7gPqjm0Ag90DBfj+QAa7BzH5/iBG3+fKA552N6YPRKXR80Lh6jmYsKEl5BqimHb+Bjs7Aew6DuFucinuiIcwBL1PyB3xEAFBHy4XMUIS8F2EXBD6H8Q4Owoiku1dlMlWalXcH2m+jkMdoiyomsV8HYc5RFlQXQBRwx2i8BRBAFEjHKIscAkgaqRDFN7RCCDqbocoC6IFEHWPQxTelwogapRDlAU1BRA12iHKgtoCiLrXIcqCugKIus8hyoL6Aoi63yHKgs0C9voecIiyoJGAiHrQIcqC9QIiaoxDlAVNBETUQw5RFjQTQNTDDlEWNBdA1FiHKAtaCCBqnEOUBXcIIGq8Q5QFrQQQ9YhDlAVtBBA1wSHKgoMC7qMedYiyoL2AiHrMIcqCjgKImugQZUFnAUQ97hBlwUoBNeoJhygLugmIqEkOURb0EEDUkw5RFvQSQNRkhygL4gQQ9RTXV3xS/yAA4RdQwEDCb9J5mvhD8uozkqU1sp8OftBXyUM1eZgmD9fkEZo8UpPv1uR7NHmUJo/W5Hs1+T5Nvl+TH9DkBzV5jCY/pMkPa/JYTR6nyeM1+RFNnqDJj2ryY5o8UZMf1+QnNHmSJj+pyZM1+SlNTshyWZ6CY1MRzyCeRTyHeB7xAuJFxEuIlxGvIF5FTENMR7yGmIGYiZiFeB3xBuJNxGzEW4g5iLmIeYi3Ee8g5iMWIN5FLHRf+XpD6gSg5lNfGBJBO69VKjjPe6j7IsT7iA8QHyIWIz5CfIxYgliK+ATxKeIzxDLE54jliBWIlYhViC8QqxFfIr5CfI34BrEG8S3iO8RaxDrE94gf3JcXTNmY+MH59zRuE8cW2Yy9bzP2gc3YhzZji23GPrIZ+9hmbInN2FKbsU9sxj61GfvMZmyZzdjnNmPLbcZW2IyttBlbZTP2hc3YapuxL23GvrIZ+9pm7BubsTU2Y9/ajH1nM7bWZmydzdj3NmM/uK980UniK9Svz02u/rznDn+uhEu/XWnBIqK5VF55301nY20zvmr6GjZfmho+CN9mV+IP9nwY7lyeKz/+s5iQizrmcmHpP3j0UTg2u/7940kfp34uK+kPMS0h5KKugVxEB/7741NLU2ezz+6HrD5JzVw++x/F+pSQi3pmceG92g+BfRaqzd6r/6jYstDmcl3rB8o+J+SivilceK/9o2zLU25zsj8YuCKlc3mTXT9YSchFg+vPhZUCPWFVSmy2UmQzfJH8XFEpXD9YTchFw+vJhSfFesKX17TZEwjBZvjqWnN5Q1o/+JqQi0bXhwtfiHrCN1exOSYQss2wxn4uKxXrB98ScnFrWnNhpUpP+O6/NkMqbYa1Sefyp3r9YB0hF43Tjgt3GHrC95rNrkBYNsMPbsLToSZ0XDQR8j2AhPsDQHh/C3UJvwewqRAuCO+DgLCPhwaEXDQTwgVhvweE/QrcSsjFbUK4IKxrQJiXoSkhF82F/Lg8YfwCof8B5folnhOWCr7r5xFJzyv08wz9vEM/D9HPS/TzFP28RT+P0c9r9PMc/bxHPw/Sz4v08yT9vEk/j9LPq/TzLP28Sz8P08/L9PM0/bxNP4/Tz+v08zz9vE8/D9TPC/XzRP28caYmz9Lk1zX5DU1+U5Nna/JbmjxHk+dq8jxNfluT39Hk+Zq8QJPf1eSFmjxFk6dq8jOa/KwmP6fJz2vyC5r8oia/pMkva/IrmvyqJk/T5Oma/JomzwjKiQnlR/z3esRPiA2IjYhNiM2ILYitiG2InxHbETsQOxG/IHYhdiP2IH5F/IbYi9iH+B2xH3EAcRDxB+IQ4k/EYcRfiCOIo4hjiL8RxxEnECcRpxCnEWcQZxHnEOcRFxAXEREetMdz2YbE2K4ffLfCerktdf6vkHTecOtBpIc2nyWeq6p5SwXlHBFX6oP694g8uGZBeaQm31o8eK32t1ncV/571qCcHufOgMjoufxbyzki0ua3ljN6eGpnBK2eLn0tMgX9MbMn4t8H3+o/nE8ypv4oXRKlqAu7vojhHYYHApk8dIGQmYncSOL1o7Q5izZXcj/AnsxvOIMKxOwR//WfiAj6QMzioW/C1Curh1HhrB76ebMROgOX3dk8VxaYaF6W367MHNSVet7sTBVWzcv1xKHqNDIz8Malr+oIOJ+QzIHz50TkQuRG5EHkRdyEyIe4GZEfUQBREFEIURhRBFEUUQxRHFECUVJ1RojSiDKIsohyiPKICoiKiFsQlRCVEVWClVvnXumT9Em2nDZjuWzGctuM5bEZy2szdpPNWD6bsZttxvLbjBWwGStoM1bIZqywzVgRm7GiNmPFbMaK24yVsBkraTNWymastM1YGZuxsjZj5WzGytuMVbAZq2gzdovNWCWbsco2Y1U8V56Q5Mgz6Rlybpd2Zj+NmKhnDrJm2IKcRHMpXnIR9hVdDeci8cnQ3OHb/M+ToXnCnUt7MjQvIRfdzOXiX0+G3hSOzUmeDM2X+rn+82TozYRcdDeQC7snQ/OnzmbbJ0MLpGauqzwZWpCQix5mcXHVJ0MLhWrzNZ4MLRzaXNd8MrQIIRc9TeEimSdDi6bc5mSfDC2W0rlS8GRocUIuel1/LlL0ZGiJlNicwidDSyY/V4qfDC1FyEXs9eQihCdDS3vongwt46F7MrQsIRdx14eLkJ8MLeehezK0vIfuydAKhFzEpzUXqXwytKKH7snQWzx0T4ZWIuTCn3ZchPVkaGUP3ZOhVTx0+yH6vkXYvzydRlxY4b2AcH8ACO9voTshFwEhXBDeBwFhHw+9CLnoLYQLwn4PCPsViCfkoo8QLgjrGhDmZQgQctGXiQvqB0gI4xcI/Q8o10/5b7rIy09QqVeV4FlgpeDZYMXgWWH54Nlh2eBZYung2WLJ4Flj8eDZo9qrUHs0as9H7SGpvTO1F6f29tSeptojVXuuaq9Z7V2rvXB1BqDOFNQZRdJXZBJOw/W9DIQ9aFUP2UMtVlo+1FKVro/810Mt1TyMClfz0M9bndAZuOyurgUF0byXnC0yIm0eZczg4Un2Sdck3ADUHbmG8jXqk2JFpN1ztVZ4r0sn21QLrJ/G19ACjnotlM5qPagfWdTXIlwdLWLHDZX35BxW8WMxPNEAHh5/UvOOuYo/JTdPcsHNtRYuprVwhbEW18sv3Exr4RboFx6mtfAE1yKjNpb0ZXKB1huKqGDjEm1XTK3wXqBIrcHQGXEsMJcTej1m260cwMtgt48p+HxhJKJkXhDNtBYxTGsRw7gWGZjWYnQ73ngIVz+ueLj3+tqd7CMnXL5/n5BtREK/BEKugXL9VMOithLtdhQiQlzP5PxJn5OjZlGtid681dT8n1xpL1MRqHmNHYBkpoHk/n+UzjUZksIYQ855QmnewrW5lsfMBEPJhe6XtbTmJLX8JLfmlPzU1s8J3G6MDb8XAv6AO8ob44qDaHd0dMAT8Eb7PP5AlCfW700AT6zbFZPgtQLgS0jwRrnjvdGBGH98dEBP2uB3uz3+mLh4iHJFx8ZZPr871gp4vG6XFet3e/1+ty86Otbt9kf7Ar4YvDGODbh9VpTXG2NFu9wxLi5+amt3sVRFIbldD31OKUWhjsSiUIe5KNRhKAoPG1IUrurE3svfMkCZdOoaWhQeZko6dQmKQnLbiZT81DO0KHDxU+//aGuzfnDnsQHHOeHVtgut8F7AfZ5FZXcko91hf2e24VuuyjEbMhTQRkzNRCPGbcYGTGtxK9Na3Mq85cqxFuMM33Lliofxhm+5cvn+I0K2XAn9Egi5Bsr1+3/Zcq3PdHfdmPPuuiFTEWjMeHetdG7MkBQmCtlybUjYCDbxmJlgKLnQ/bJJGmy5UvLTlPDu+hHCu2sufpra8BPqjVRyW6yU/DRjyp/NCNYhuV0gynW4jWkdbhPmD82Z1qG5MH+4nWkdbk/BkYzJjZ2NumR+rDeNLSQ2jS2Ym8YWDE3jE2nUNCZ3J52WSa4l4VyUTeMTTE1JyxQ0jcmtA6jPAYMVsGKww7K88dHeuBi/K86HfVUgyu13U/Jzh4eu0aNsGrn4ueMaO44Un57h2IG6k/DGS/dL6lOHKoR+2YrMZh/LqYP61NWdDFy3Nvy0RfHSmsHuNkx9gpo3S+K/bTpAyrXmWO+e6c3XsS110yvFaZ80/ChI2dyWwe7Jhux+JvP6l2OGa3M7wiJM6DdAyQVzkvyn+bgRk2Q705MkV/fa/gbtaDoYbreyuQOD3R2ZOrmOHt5fSmjPsBadDPcBdcfWicHuzgJ8vzOD3V2YfL8Lo+9z5YEp7W5MH5iaRs8Lhf3LIYQNLSHXQLl+egx1dXYC2HXsxt3kUtwRd2MI+ueE3BF3ExD04XLxvJAE3J2QC0L/A8r1c3YU+JJtd8pkK7Uq7o80X8ceDlEWVM0ioMVyiLKgugCiejlE4YatAKJiHaIscAkgKs4hygKPAKLiHaIsiBZAlN8hygKfAKISHKIsqCmAqIBDlAW1BRDV2yHKgroCiOrjEGVBfQFE9XWIsmCzgL2+fg5RFjQSEFH9HaIsWC8gogY4RFnQREBEDXSIsqCZAKIGOURZ0FwAUYMdoixoIYCoIQ5RFtwhgKi7HKIsaCWAqKEOURa0EUDUMIcoCw4KuI8a7hBlQXsBETXCIcqCjgKIGukQZUFnAUTd7RBlwUoBNeoehygLugmIqFEOURb0EEDUaIcoC3oJIOpehygL4gQQdR/XV3xS/yAA4RdQQGfCb9K5n/hD8uozkqU1su8PftBXyT00uacm99LkWE2O0+R4TfZrcoImBzS5tyb30eS+mtxPk/tr8gBNHqjJgzR5sCYP0eS7NHmoJg/T5OGaPEKTR2ry3Zp8jyaP0uTRmnyvJt+nr0+Wy/IDOPYgYgziIcTDiLGIcYjxiEcQExCPIh5DTEQ8jngCMQnxJGIy4inE04gpiKmIZxDPIp5DPI94AfEi4iXEy4hXEK96rny9IXUCUPOpLwyJoJ3XKhWcZxrqPh3xGmIGYiZiFuJ1xBuINxGzEW8h5iDmIuYh3ka8g5iPWIB4F7EQ8R5iEeJ9xAeIDxGLER8hPkYsQSxFfIL41HN5wfQPzk/TuE0cm24z9prN2AybsZk2Y7Nsxl63GXvDZuxNm7HZNmNv2YzNsRmbazM2z2bsbZuxd2zG5tuMLbAZe9dmbKHN2Hs2Y4tsxt63GfvAZuxDm7HFNmMf2Yx9bDO2xGZsqc3YJzZjn3qufNFJ4ivUr89Nrv5M84Q/V8Kl3660YDrRXCqvvOahs/GldjxNChUXCZcVhRnh2+xK/MGemeHO5bny4z+zCLl42VwuLP0Hj14Px2bXv3886Y3Uz2Ul/SGmNwm5eMVALqID//3xqdmps9ln90NWb6VmLp/9j2LNIeTiVbO48F7th8Dmhmqz9+o/KjYvtLlc1/qBsrcJuZhmChfea/8o2zsptznZHwycn9K5vMmuHywg5GL69efCSoGe8G5KbLZSZDMsTH6uqBSuH7xHyMVr15MLT4r1hEXXtNkTCMFmeP9ac3lDWj/4gJCLGdeHC1+IesKHV7E5JhCyzbDYfi4rFesHHxFyMTOtubBSpSd8/F+bIZU2w5Kkc/lTvX6wlJCLWWnHhTsMPeETzWZXICyb4VMP4elQEzouXk8jLqzwXkC4PwCE97eg35+Fy8UbQrggvA8Cwj4ephNy8aYQLgj7PSDsV2AmIRezhXBBWNeAMC/DG4RcvMXEBfVZMmH8AqH/AeX6JZ4Tlgq+6+cRSc8r9PMM/bxDPw/Rz0v08xT9vEU/j9HPa/TzHP28Rz8P0s+L9PMk/bxJP4/Sz6v08yz9vEs/D9PPy/TzNP28TT+P08/r9PM8/bxPPw/Uzwv180T9vPFJTZ6syU9p8tOaPEWTp2ryM5r8rCY/p8nPa/ILmvyiJr+kyS9r8iua/KomP6DJD2ryGE1+SJMf1uSxmjxOk8dr8iOaPEGTH9XkxzR5oiY/rslPaPKkoJyYUD7Dfy9DfI5YjliBWIlYhfgCsRrxJeIrxNeIbxBrEN8ivkOsRaxDfI/4AfEjYj3iJ8QGxEbEJsRmxBbEVsQ2xM+I7YgdiJ2IXxC7ELsRexC/In5D7EXsQ/yO2I84gDiI+ANxyHPZhsTYrh98t8J6uS11/q+QdN5w68GfHtp8lniuquYtFcH3TMSdwPtMxGHU/y/EEcRRxDHE34jjiBOIk4hTiNOIM4iziHOI84gLiIvKD6LQbkQkIj0iAyIjIhMiMyILIisiGyI7IgciJyJX1OUF09fzsOe/Z9d/2YwdsRk7ajN2zGbsb5ux4zZjJ2zGTtqMnbIZO20zdsZm7KzN2DmbsfM2Yxdsxi7ajCl+ko6lsxmLtBlLbzOWwWYso81YJpuxzDZjWWzGstqMZbMZy24zlsNmLKfNWK4o/mciDnvonon4i2gulVeOeOhs/KidjGcijoZv8z/PRBwLdy7tmYi/Cbn42Fwu/vVMxPFwbE7yTMSJ1M/1n2ciThJyscRALuyeiTiVOpttn4k4nZq5rvJMxBlCLpaaxcVVn4k4G6rN13gm4lxoc13zmYjzhFx8YgoXyTwTcSHlNif7TMTFlM6VgmciVD9HxcWn15+LFD0TkS4lNqfwmYjI5OdK8TMR6Qm5+Ox6chHCMxEZouieicgYRfdMRCZCLpZdHy5CfiYicxTdMxFZouieichKyMXnac1FKp+JyBZF90xE9ii6ZyJyEHKxPO24COuZiJxRdM9E5Iqi2897tA0dFyvSiAsrvBcQ7g8A4f0t6Pdn4XKxUggXhPdBQNjHw6eEXKwSwgVhvweE/Qp8TsjFF0K4IKxrQJiXYSUhF6uZuKB+JoIwfoHQ/4By/bjOCytF8J4X5sZeKA8iL+ImRD7EzYj8iAKIgohCiMKIIoiiiGKI4ogSiJKIUojSiDKIsohyiPKICoiKiFsQlRCVEVUQVRHVENVtzgtz25zr5LEZy2szdpPNWD6bsZttxvLbjBWwGStoM1bIZqywzVgRm7GiNmPFbMaK24yVsBkraTNWymastM1YGZuxsjZj5WzGytuMVbAZq2gzdovNWCWbsco2Y1VsxqrajFWzGaueBueFuQnu1RLPC/MQzaXySl7Ce8iNQs4Lbwrf5n/OC/OFO5d2XngzIRebhJwX5g/H5iTnhQVSP9d/zgsLEnKxWch5YaHU2Wx7Xlg4NXNd5bywCCEXW4ScFxYN1eZrnBcWC22ua54XFifkYquQ88ISKbc52fPCkimdKwXnhaUIudgm5LywNOF5YRnC88KyhFz8LOS8sBzheWF5wvPCCoRcbBdyXliR8LzwFsLzwkqEXOwQcl5YmfC8sArheWFVQi52CjkvrEZ4Xlid8Lxwd1M6Ln4RshdPuD8AhPe3sJlwL36XEC4I74OAsI+HbYRc7BbCBWG/B4T9Cuwg5GKPEC4I6xoQ5mXYRcjFr0LOCwnjFwj9D34VcF5YOYL3vLAG9kIWAhAuhBvhQUQhohFehA8Rg6iJqIWojaiDqIuop3opRANEQ0QjxK2IxogmiKaIZojbEM0RtyNaIFoi7rA5L6xhc65j2YyBzZjLZsxtM+axGYuyGYu2GfPajPlsxmJsxmrajNWyGattM1bHZqyuzVg9m7H6NmMNbMYa2ow1shm71Wassc1YE5uxpjZjzWzGbrMZa24zdrvNWAubsZY2Y3dE8Z8X1iA8L7QIzwuB8B7ybyHnhS7C80I34Xmhh5CL40LOC6MIzwujCc8LvYRcnBByXugjPC+MITwvrEnIxUkh54W1CM8LaxOeF9Yh5OKUkPPCuoTnhfUIzwvrE3JxWsh5YQPC88KGhOeFjQi5OCPkvPBWwvPCxoTnhU0IuTgr5LywKeF5YTPC88LbCLk4J+S8sDnheeHthOeFLQi5OC/kvLAl4XnhHYTnhecIv3P5gpC9eML9ASC8v4UThHvxF4VwQXgfBIR9PJwm5CKivQwuCPs9IOxX4BwhF+mEcEFY14AwL8NFQi4imbigPi8kjF8g9D+gXD+u88Lbmb+P9E7shVohWiPaINoi2iHaIzogOiI6ITojuiC6IrohuiN6IHoieiFiEXGIeIQfkYAIIHoj+iD6Ivoh+iMGIAYiBtmcF95pc67Tymastc1YG5uxtjZj7WzG2tuMdbAZ62gz1slmrLPNWBebsa42Y91sxrrbjPWwGetpM9bLZizWZizOZizeZsxvM5ZgMxawGettM9bHZqyvzVg/m7H+NmMDbMYG2owNirpyXkgdtypmVewmnTfcnH9Te7PP5hL1vJPwnLQV4Tlpa8J753yGc5F4TtqG8Jy0LeE5aTtCLm42l4t/nZO2Jzwn7UB4TtqRkIv8BnJhd07aifCctDPhOWkXQi4KmMXFVc9JuxKek3YjPCftTshFQVO4SOactAfhOWlPwnPSXoRcFLr+XKTonDSW8Jw0jvCcNJ6Qi8LXk4sQzkn9hOekCYTnpAFCLopcHy5CPiftTXhO2ofwnLQvIRdF05qLVJ6T9iM8J+1PeE46gJCLYmnHRVjnpAMJz0kHRdHth+j7FuFyUVzIGQTh/gAQ3t9CfkIuSgjhgvA+CAj7eChEyEVJIVwQ9ntA2K9AUUIuSgnhgrCuAWFehhKEXJRm4oL6nJQwfoHQ/4By/dR5SA5t7dS/87sjIi4E5QKanM99+V0/W82i/fesQXkw9ilDEHchMgbnj4z474v6jOeuKB6/iqDV06WvxdCoy+/Dgmev/xyGqf9wPsmY+qN0SZSidvq7yA6KAoGhhA3/MCZyI4nXj9Lm4dpcgBujuFGo/s7nt8Djx60+l8sf57Hirdh4V0KMB++1PS6PO94fj5sfvlgIWIHY+JiA77JeKhCzR/zXfyIi6ANxeBRtgkp8jYhiVHhEFP28IwmdgcvukVFXFphoXltdKRLAyCj6ee8mdtbEZK3m5XoKST3NMIyBNy59VUfA+dTUPTj/KMRoxL2I+xD3Ix5APIgYg3gI8TBiLGIcYjziEcQExKOIxxATEY8jnkBMQjyJmIx4CvE0YgpiKuIZxLOI5xDPByu3zv09Nk+3jLIZG20zdq/N2H02Y/fbjD1gM/agzdgYm7GHbMYethkbazM2zmZsvM3YIzZjE2zGHrUZe8xmbKLN2OM2Y0/YjE2yGXvSZmyyzdhTNmNP24xNsRmbajP2jM3YszZjz9mMPR/F+9TUYIac62ov46mpe8iaYQtGEc2leBlN2Fe4Deci8ampe8O3+Z+npu4Ldy7tqan7CbnwmMvFv56aeiAcm5M8NfVg6uf6z1NTYwi5iDKQC7unph5Knc22T009nJq5rvLU1FhCLqLN4uKqT02NC9Xmazw1NT60ua751NQjhFx4TeEimaemJqTc5mSfmno0pXOl4Kmpxwi58F1/LlL01NTElNicwqemHk9+rhQ/NfUEIRcx15OLEJ6amhRF99TUk1F0T01NJuSi5vXhIuSnpp6Kontq6ukouqemphByUSutuUjlU1NTo+iemnomiu6pqWcJuaiddlyE9dTUc1F0T009H0W3H6LvW4TLRZ004sIK7wWE+wNAeH8LUYRc1BXCBeF9EBD28eAj5KKeEC4I+z0g7FegFiEX9YVwQVjXgDAvQ11CLhowcUH9AAlh/AKh/wHl+in/zYaHpaWC8z0fPAt8Nng2ODV4Vvh08OxwcvAscVLwbPHx4FnjY8GzR7VXofZo1J6P2kNSe2dqL07t7ak9TbVHqvZc1V6z2rtWe+HqDECdKagziqSvyCSchut7Qwh70BeiyB5qsdLyoZYX6PrIfz3U8mIUo8IvRtHP+xKhM3DZ/ZIWFETzXnK2yIi0eZRxSBRPsk+6JuEGoO7ILytfoz4pVkSqU2iOk22qBdZP41/WAo56LZTOaj2oH1nU1yJcHV8hdtxQeU/OYRU/rzA80fBqFI8/qXnHXMWfkpsnueDmWotpTGsxLYy1uF5+MZ1pLaYL9IvXmNbiteBaZNTGkr5MLtB6QzEj2LjMtCumVngvUKS+zNAZcSwwlxPOijLbbuUAsxjsfp0p+F4PIxEl84KZTGvxBtNavMG4FkOY1qJNe954CFc/rnhoe33tTvaREy7fbydkG5HQL4GQa6BcP9WwqK1Eux2FiBDXMzl/0ufkqFlUa6I3b29q/k+u9CymIvDmNXYAkpkGkvv/UTq/yZAUOhlyzhNK8xauzbOjzEwwlFzofjlba05Sy09ya07Jz1v6OYHbjbHh90LAH3BHeWNccRDtjo4OeALeaJ/HH4jyxPq9CeCJdbtiErxWAHwJCd4od7w3OhDjj48O6Ekb/G63xx8TFw9RrujYOMvnd8daAY/X7bJi/W6v3+/2RUfHut3+aF/AF4M3xrEBt8+K8npjrGiXO8bFxc9b2l0sVVFIbtdDn1NKUZgjsSjMYS4KcxiKQhdDisJVndh7+VsGKJPOXEOLQhempDOXoCgkt51Iyc88Q4sCFz/z/o+2Nt8O7jy+w3FOeLXtQiu8F3CfZ1HZHclod7g6zjd8y1U55nyGArqAqZlYwLjN+A7TWrzLtBbvMm+5cqxFN8O3XLniobvhW65cvt9DyJYroV8CIddAuX7/L1uubzPdXS/kvLuez1QEFjLeXSudFzIkhTghW67zCRvB96LMTDCUXOh++V4abLlS8rOI8O66B+HdNRc/i2z4CfVGKrktVkp+3mfKn+8TrENyu0CU6/AB0zp8IMwfPmRahw+F+cNipnVYnIIjGZMbOxt1yfxYbxo/ktg0fsTcNH7E0DT606hpTO5OOi2T3MeEc1E2jX6mpuTjFDSNya0DOijEgxWwYrDDsrzx0d64GL8rzod9VSDK7XdT8rMkiq7Ro2waufhZco0dR4pPz3DsQC0lvPHS/ZL61OF5Qr/8hMxmH8upg/rU1VIGrj81/LRF8fIpg92fMfUJat4swX9ns+kAKdeaY717pjdfx2XUTa8Upw0YfhSkbF7GYHdvQ3Y/k3n9yzHDtflzwiJM6DdAyQVzkvyn+bgRk+TnpidJru51+Q3a0aww3G5l8woGu1cydXIro3h/KWE5w1qsMtwH1B3bKga7vxDg+18w2L2ayfdXM/o+Vx7o1/7G9IH+afS8ULh6fknY0BJyDZTrp8fQl85OALuOX3E3uRR3xF8xBP0gIXfEXwkI+nC5GCwkAX9NyAWh/wHl+jk7CnzJ9mvKZCu1Ku6PNF/HbxyiLKiaxXwd1zhEWVBdAFHfOkRZYAkg6juHKAtcAoha6xBlgUcAUescoiyIFkDU9w5RFvgEEPWDQ5QFNQUQ9aNDlAW1BRC13iHKgroCiPrJIcqC+gKI2uAQZcFmAXt9Gx2iLGgkIKI2OURhoRYQUZsdoixoIiCitjhEWdBMAFFbHaIsaC6AqG0OURa0EEDUzw5RFtwhgKjtDlEWtBJA1A6HKAvaCCBqp0OUBQcF3Ef94hBlQXsBEbXLIcqCjgKI2u0QZUFnAUTtcYiyYKWAGvWrQ5QF3QRE1G8OURb0EEDUXocoC3oJIGqfQ5QFcQKI+p3rKz6pfxCA8Aso4AvCb9LZT/whefUZydIa2fuDH/RV8jeavEaTv9Xk7zR5rSav0+TvNfkHTf5Rk9dr8k+avEGTN2ryJk3erMlbNHmrJm/T5J81ebsm79DknZr8iybv0uTdmrxHk3/V5N80ea8m79Pk3zU5Ictl+QCOHUT8gTiE+BNxGPEX4gjiKOIY4m/EccQJxEnEKcRpxBnEWcQ5xHnEBcRFREQ0/v8gIhHpERkQGRGZEJkRWRBZo68E/muab+TS9MypyTk0ObsmZ9PkrJqcRZMza3ImTc6oyRk0Ob0mR2pyOk2O0OSLnivyBU0+r8nnNPmsJp/R5NOafEqTT2ryCU0+rsl/a/IxTT6qyUc0+S9NPuy58uUV9YPvVpgvZz5nPmc+Zz5nPmc+Zz5nPlnzBeJp54sOEM8XRTuf35PYC1bX+tpqmlxVk6tocmVNrqTJt2hyRU2uoMnlNbmcJpfV5DKaXFqTS2lySU0uocnFNbmYJhfV5CKaXFiTC2lyQU0uoMn5NflmTc6nyTdpcl5NzqPJuTX5Dk1uqcktNPl2TW6uybdpcjNNbqrJTTS5sSbfqsmNNLmhJjfQ5PqaXE+T62pyHU2urcm1NLmmJsdosk+TvZocrclRmuzRZLcmuzQZNNnS5BqaPEiTB2ryAE3ur8n9NLmvJvfR5N6aHNDvwzXZr8nxmhynybGa3EuTe2pyD03ursndNLmrJnfR5M6a3EmTO2pyB01ur8ntNLmtJrfR5Naa3EqT79TkM5p8VpPPafJ5Tb6g34fr9+fR2n27JkdqcnpNzqDJGTU5kyZn1uQsmpxVkw9oOhzU5D80+ZAm/6nJhzX5L00+oslHNfmYJv+tycc1+YQmn9TkU5p8Oii/G3H5lQ3tyY7IgciJyIXIjciDyIu4CZEPcTMiP6IAoiCiEKIwogiiKKIYojiiBKIkohSiNKIMoiyiHKI8ogKiIuIWRCVEZUQVRFVENUR1RA2EhQCEC+FGeBBRiGiEF+FDxCBqImohaiPqIOoi6iHqIxogGiIaIW5FNEY0QTRFNEPchmiOuB3RAtEScQfiTkQrRGtEG0RbRDtEe0QHREdEJ0RnRBdEV0Q3RHdED0RPRC9ELCIOEY/wIxIQAURvRB9EX0Q/RH/EAMRAxCDEYMQQxF2IoYhhiOGIEYiRiLsR9yBGIUYj7kXch7gf8QDiQcQYxEOIhxFjEeMQ4xGPICYgHkU8hpiIeBzxBGIS4knEZMRTiKcRUxBTEc8gnkU8h3ge8QLiRcRLiJcRryBeRUxDTEe8hpiBmImYhXgd8QbiTcRsxFuIOYi5iHmItxHvIOYjFiDeRSxEvIdYhHgf8QHiQ8RixEeIj6Mv/55Y4pdKJr4Sz1rqB9+t8F4wG9AOoJvvAs51UfvxF6J5rUhtDZZEX35fGq2tTTrihVHf1EylPJd+S6L/O2/Yv4cTTXtokujAat4xjFwtZViLT5nW4lPGtUgMQOq1GNqe5zSS+ssuP6PjDOa2pZuLev2o+eXKJ8Ovr93xyf36OlfuGNHe/PrxGYPdI9MoT1jhvYDQL4GQa6Bcv2v9IG1EiOuZXBzpc1L76hLiOpz4WialgdSbB13pEHVO9gdplc7LGJLCaKakEOq3lqekCFLZ/Hm0mcmKkgvdLz+PTv4HaZObL7k1p+RnucYPuN0YG34vBPwBd5Q3xhUH0e7o6IAn4I32efyBKE+s35sAnli3KybBawXAl5DgjXLHe6MDMf746IBeAML9QVoufpYH+UksBtT5Lqs7IkLxE0E7r1UqOM8K1H8lYhXiC8RqxJeIrxBfI75BrEF8i/gOsRaxDvE94gfEj4j1iJ8QGxAbEZsQmxFbEFsR2xA/I7YjdiB2In5B7Iq+vGD6eip9/tmBDb6vtBlbZTP2hc3YapuxL23GvrIZ+9pm7BubsTU2Y9/ajH1nM7bWZmydzdj3NmM/2Iz9aDO23mbsJ5uxDTZjG23GNtmMbbYZ22IzttVmbJvN2M82Y9ttxnbYjO20GfvFZmxXcEx/hfpj38n+jFx0+HMlBNTLgpVEc6m8siqazsb70qgPSb3Nl6aGL8K32ZXYmK8Ody7PlSb/S0Iu7jeXC0u/sfkqHJtd/75J+jr1c1lJb7i+IeTiAQO5wNbqPzeZa1Jns8/uhvXb1Mzls7/5/Y6QiwfN4sJ7tRv+taHa7L365sG60OZyXWsj4ntCLsaYwoX32psvP6Tc5mQ3RH9M6VzeZNcP1hNy8dD158JKgZ7wU0pstlJkM2xIfq6oFK4fbCTk4uHryYUnxXrCpmva7AmEYDNsvtZc3pDWD7YQcjH2+nDhC1FP2HoVm2MCIdsM2+znslKxfvAzIRfj0poLK1V6wvb/2gyptBl2JJ3Ln+r1g52EXIxPOy7cYegJv2g2uwJh2Qy7oun2If9qS8fFI4bs/yfzAsL9ASC8vwX9/ixcLiYI4YLwPggI+3h4iJCLR4VwQdjvAWG/AuMIuXhMCBeEdQ0I8zJMIORiopCHSAjjFwj9DyjXj+u8MAvzeeFu7IX2IH5F/IbYi9iH+B2xH3EAcRDxB+IQ4k/EYcRfiCOIo4hjiL8RxxEnECcRpxCnEWcQZxHnEOcRFxAX1TmhF9fKG/Gf88LdNuc6e2zGfrUZ+81mbK/N2D6bsd9txvbbjB2wGTtoM/aHzdghm7E/bcYO24z9ZTN2xGbsqM3YMZuxv23GjtuMnbAZO2kzdspm7LTN2BmbsbM2Y+dsxs7bjF2wGbtoM6b8LelYOi//eeFuwvPCPYTnhb8S3kO+JOS88DfC88K9hOeF+wi5eFnIeeHvhOeF+wnPCw8QcvGKkPPCg4TnhX8QnhceIuTiVSHnhX8SnhceJjwv/IuQi2lCzguPEJ4XHiU8LzxGyMV0IeeFfxOeFx4nPC88QcjFa0LOC08SnheeIjwvPE3IxQwh54VnCM8LzxKeF54j5GKmkPPC84TnhRcIzwsvEnIxS8h5obrfT5wr3PPCdF669TtMeF74upC9eML9ASC8v4VXCPfi3xDCBeF9EBD28TCdkIs3hXBB2O8BYb8CMwm5mC2EC8K6BoR5Gd4g5OItIeeFhPELhP4Hbwk4L6wUwXteGIm9UHpEBkRGRCZEZnWOgsiKyIbIjsiByInIhciNyIPIi7gJkQ9xMyI/ogCiIKIQojCiCKIoohiiOKIEoiSiFKK0zXlhpM25TnqbsQw2YxltxjLZjGW2GctiM5bVZiybzVh2m7EcNmM5bcZy2YzlthnLYzOW12bsJpuxfDZjN9uM5bcZK2AzVtBmrJDNWGGbsSI2Y0VtxorZjBW3GSthM1bSZqyUzVjpNDgvjCS410g8L0xPNJfKKxkI74E+EnJemDF8m/85L8wU7lzaeWFmQi4+FnJemCUcm5OcF2ZN/Vz/OS/MRsjFEiHnhdlTZ7PteWGO1Mx1lfPCnIRcLBVyXpgrVJuvcV6YO7S5rnlemIeQi0+EnBfmTbnNyZ4X3pTSuVJwXpiPkItPhZwX3pwSm1N4Xpg/+blSfF5YgJCLz4ScFxb00p0XFvLSnRcWJuRimZDzwiJeuvPCol6688JihFx8LuS8sLiX7rywhJfuvLAkIRfLhZwXliI8LyztpdvP292UjosVQvbiCfcHgPD+FpYQ7sWvFMIF4X0QEPbx8CkhF6uEcEHY7wFhvwKfE3LxhRAuCOsaEOZlWEnIxWoh54WE8QuE/gfU60d9VqjOCZsy/goJtb75mT8LWQb7trKIcojyiAqIiohbEJUQlRFVEFUR1RDVETUQFgIQLoQb4UFEIaIRXoQPEYOoiaiFqI2og6iLqKd6RUQDm7PNMjZnUGVtxsrZjJW3GatgM1bRZuwWm7FKNmOVbcaq2IxVtRmrZjNW3Washs2YZTMGNmMumzG3zZjHZizKZizaZsxrM+azGYuxGatpM1bLZqy2zVgdm7G6NmP1bMbq24w18F452+TIMyp2k84bbn3aaPg5YqKeZQjPdMsSnumWI7zP3yTkTLc84ZluBcIz3YqEXGwWcqZ7C+GZbiXCM93KhFxsEXKmW4XwTLcq4ZluNUIutgo5061OeKZbg/BM1yLkYpuQM10gPNN1EZ7pugm5+FnIma6H8Ew3ivBMN5qQi+1CznS9hGe6PsIz3RhCLnYIOdOtSXimW4vwTLc2IRc7hZzp1iE8061LeKZbj5CLX4Sc6dYnPNNtQHimu5Fwj36XkPMSwv0BILy/hS2EXOwWwgXhfRAQ9vHwMyEXe4RwQdjvAWG/AjsJufhVCBeEdQ0I8zLsJuTiNyFnuoTxC4T+B5Trp/w3Dx6WlgrO1yB4FlgveDZYJ3hWWCt4dhgTPEv0Bs8Wo4Jnje7g2SMEzyJrBM8mqwXPKqsEzy4rBc8yKwbPNssHzzrVmYI6o0j6ikzCabi+V8BNN1dDrR8D3LfCfRz1dz4/bhP4cSfG5fLHeax4KzbelRDjwVshj8vjjvfH472pLxYCViA2PibguzyX+gHo7BFXzqf0F/VZWEO6PvJfP9LcyMuosJqcet5bCW9IuOy+VQsKonkvOVtkhP2vjVPboAecFebLRl2yANQdubHyNeqTYkWkOoXmONmmWmD9NL6xFnDUa6F0VusRybgW4erYxEvruKHynpzDKn6aeOm5aerl8Sc175ir+FNy8yQX3Fxr0YxpLZqFsRbXyy9uY1qL2wT6RXOmtWgeXIuM2ljSl8kFWm8obg82Li3siqkV3gsUqY0ZOiOOBeZywpZes+1WDtCSwe47mILvjjASUTIvaMG0FncyrcWdjGuhEg7HWpxgftQ9XP244uHk9bU72UdOuHz/lJBtREK/BEKugXL9VMOithLtdhQiQlzPZL9WV3tx1CyqNdGbt1aa/5Mr3ZKpCLS6xg5AMtNAcv8/SudWDEnhnCHnPKE0b+Ha3NprZoKh5EL3y9Zac5JafpJbc0p+2ujnBG43xobfCwF/wB3ljXHFQbQ7OjrgCXijfR5/IMoT6/cmgCfW7YpJ8FoB8CUkeKPc8d7oQIw/PjqgJ+1wfzeYi5822l0sVVFIbtdDn1NKUWgrsSi0ZS4KbRmKwgVDisJVndh76ZNVAcqk087QonCBKem0IygKyW0nUvLT3tCiwMVP+/+jrc0OwZ3HjhznhFfbLrTCewH3eRaV3ZGMdoerYyfDt1yVY3ZiKKCdmZqJzozbjB2Z1qIL01p0Yd5y5ViLiA5m5xSueEh3fe1OdsuVy/cjie1OfFFvuRL6JRByDZTr9/+y5dqB6e66K+fddSemItCV8e5a6dyVISlkYkoK1FuunQgbwW5eMxMMJRe6X3ZLgy1XSn66E95d60k73LtrLn662/AT6o1UcluslPz0YMqfPQjWIbldIMp16Mm0Dj2F+UMvpnXoJcwfYpnWITYFRzImN3Y26pL5sd40xklsGuOYm8Y4hqYxSxo1jcndSadlkosnnIuyaczC1JTEp6BpTG4d0EEhHqyAFYMdluWNj/bGxfhdcT7sqwJRbr+bkh+/l67Ro2waufjxX2PHkeLTMxw7UAmEN166X1KfOjQg9MsAmc0+tu9wTmDgurfhpy2Kl94Mdvdh6hPUvFmC/85j0wFSrjXHevdMb76OfambXilOm83woyBlc18Gu7MbsvuZzOtfjhmuzf0IizCh3wAlF8xJ8p/m40ZMkv1MT5Jc3Wv/G7SjGWC43crmAQx2D2Tq5AZ6eX8poT/DWgwy3AfUHdsgBrsHC/D9wQx2D2Hy/SGMvs+VB3J1uDF9IHcaPS8Urp53ETa0hFxDbqadv7ucnQB2HYdyN7kUd8RDGYL+JiF3xEMFBH24XOQTkoCHEXJB6H+Qz9lREJFsh1EmW6lVcX+k+ToOd4iyoGoW83Uc4RBlQXUBRI10iLLAEkDU3Q5RFrgEEHWPQ5QFHgFEjXKIsiBaAFGjHaIs8Akg6l6HKAtqCiDqPocoC2oLIOp+hygL6gog6gGHKAvqCyDqQYcoCzYL2Osb4xBlQSMBEfWQQ5QF6wVE1MMOURY0ERBRYx2iLGgmgKhxDlEWNBdA1HiHKAtaCCDqEYcoC+4QQNQEhygLWgkg6lGHKAvaCCDqMYcoCw4KuI+a6BBlQXsBEfW4Q5QFHQUQ9YRDlAWdBRA1ySHKgpUCatSTDlEWdBMQUZMdoizoIYCopxyiLOglgKinHaIsiBNA1BRKopRyBSOufM5P/TsBF+FCUF4afUVeosnvRV6WE6+biko9g3gW8Zz3ynjii/rHBrLR/coQTCX8lp7nmb5/lXr9shOu3zOE6/cC8RcYJPVtxU+iD7+gyc9q8nPef/v2i/jvlxAvI17x/vu7fKmDW/1/qS8DiaCd1yoVnOdVnH8aYjriNcQMxEzELMTriDcQbyJmI95CzEHMRcxDvI14BzEfsQDxLmIh4j3EIsT7iA8QHyIWIz5CfIxYgliK+MR7ecH0D8W/GvxQvD42zWZsus3YazZjM2zGZtqMzbIZe91m7A2bsTdtxmbbjL1lMzbHZmyuzdg8m7G3bcbesRmbbzO2wGbsXZuxhTZj79mMLbIZe99m7AObsQ9txhbbjH1kM/axzdgSm7GlNmOfeHm/wOdFhs/1FzDjK5uT1fNVghqQcOn3OC2YRjSX4mU6YW0qaDgXCZcVhdfCt9mV+CNEM8Kdy3PlB41mEnJRyFwuLP1HnGaFY7Pr3z8I9Xrq57KS/rjUG4RcFDaQi+jAf39Q683U2eyz+3Gu2amZy2f/Q19vEXJRxCwuvFf7cbM5odrsvfoPpc0NbS7XtX50bR4hF0VN4cJ77R+aezvlNif7I4jvpHQub7LrB/MJuSh2/bmwUqAnLEiJzVaKbIZ3k58rKoXrBwsJuSh+PbnwpFhPeO+aNnsCIdgMi641lzek9YP3CbkocX248IWoJ3xwFZtjAiHbDB/az2WlYv1gMSEXJdOaCytVesJH/7UZUmkzfJx0Ln+q1w+WEHJRKu24cIehJyzVbHYFwrIZPqHbe4UChN+nV1rIdxsS7g8A4f0tFCbkoowQLgjvg4Cwj4dihFyUFcIFYb8HhP0KlCTkopwQLgjrGhDmZShDyEX5NPr+VSu8FxDGLxD6H0hZP8IfuIDBhL3jp3R6/fM7qWOC7+rfu6KvnG39osk7NXmHJm/X5J81eZsmb9XkLZq8WZM3afJGTd6gyT9p8npN/lGTf9Dk7zV5nSav1eTvNPlbTV6jyd9o8tea/JUmf6nJqzX5C01epckrNXmFJqfTzhYjNPmi9jcXNPm8Jp/T5LOafEaTT2vyKU0+qcknNPm4Jv+tycc0+agmH9HkvzT5sCb/qcmHNPkPTT6oyQc0eb8m/67J+zR5ryb/psm/avIeTd6tyaW1NS+lySU1uYQmF9fkYppcVJOLaHJhTS6kyQU1uYAm59fkmzU5nybfpMl5NTmPJufW5FyanFOTc2hydk3OpslZNTmLJmfW5EyanFGTM+jn5pocqcmfavJwTR6hySM1+W5NvkeTR2nyaE2+V5Pv0+T7NfkBTX5Qk8do8kOa/LAmj9XkcZo8XpMf0eQJmvyoJj+myRM1+XFNfkKTJ2nyk5o8WZOf0uSnNXmKJuvPgejPiejPkejPmejPoejPqejPsejPuejPwejPyejP0ejP2ejP4ejP6ejP8ejP+XyiyfpzGvpzHPpzHvpzIPpzIvpzJPpzJvpzKPpzKvpzLPpzLvpzMPpzMvpzNInP2TwVcfn1Gf57GeJzxHLECsRKxCrEF4jViC8RXyG+RnyDWIP4FvEdYi1iHeJ7xA+IHxHrET8hNiA2IjYhNiO2ILYitiF+RmxH7EDsRPyC2IXYjdiD+BXxG2IvYh/id8R+xAHEQcQfiEOIPxGHEX8hjiCOIo4h/kYcR5xAnEScQpxGnEGcRZxDnEdcQFxERPhwfRCRiPSIDIiMiEyIzIgsiKyIbIjsiByInIhciNyIPIi8iJsQ+RA3I/IjCiAKIgohCiOKIIoiiiGKI0ogSiJKIUojyiDKIsohyiMqICoibkFUQlRGVEFURVRDVEfUQFgIQLgQboQHEYWIRngRPkQMoiaiFqI2og6iLqIeoj6iAaIhohHiVkRjRBNEU0QzxG2I5ojbES0QLX2XfShd0JfqB9+tsF4xlnoGSSHpvOH2s3f4aPvZxOex1LylIjjW4vLzWLncEf+8qPTneu5TPc/M+dznnbjWrRCtEW0QbRHtEO0RHRAdEZ0QnRFdEF0R3RDdET0QPRG9ELGIOEQ8wo9IQAQQvRF9EH0R/RD9EQMQAxGDfJcXTOde6fNPnxF8b2Uz1tpmrI3NWFubsXY2Y+1txjrYjHW0GetkM9bZZqyLzVhXm7FuNmPdbcZ62Iz1tBnrZTMWazMWZzMWbzPmtxlLsBkL2Iz1thnrYzPW12asn81Yf5uxATZjA23GBgXHIiJ48oyKXeqcG91BxnOfd/ronvtsRTSX4qW1j85Gr5DnPtuEb/M/z322DXcu7bnPdoRc+IQ899k+HJuTPPfZIfVz/ee5z46EXMQIee6zU+pstn3us3Nq5rrKc59dCLmoKeS5z66h2nyN5z67hTbXNZ/77E7IRS0hz332SLnNyT732TOlc6Xguc9ehFzUFvLcZ2xKbE7hc59xyc+V4uc+4wm5qCPkuU+/j+65zwQf3XOfAUIu6gp57rO3j+65zz4+uuc++xJyUU/Ic5/9fHTPffb30T33OYCQi/pCnvsc6KN77nMQ3f4uRBM+x9NAyDNVhPsDQHh/CzGEXDQUwgXhfRAQ9vFQm5CLRkK4IOz3gLBfgXqEXNwqhAvCugaEeRkaEnLRWMhzi4TxC4T+B5Trp/w3f+SV891BwbPAAcGzwX7Bs8I+wbPDQPAs0R88W4wLnjX2Cp499gieRXYLnk12CZ5VdgqeXXYInmW2C55ttgmedaozBXVGkfQVmYTTcH1P/z6lcOcarPVjgPtWuI+j/s7nt8Djx50Yl8sf57Hirdh4V0KMB2+FPC6PO94fj/emvlgIWIHY+JiA7/JcGXGO7BFXzqf0F/VZ2GC6PtLS9R3iY1RYTU49712ENyRcdt+lBQXRvJecLTLiSnBxOhvhF5hZNuqSBaDuyEOVr1GfFCsi7Z76scJ7XTrZplpg/TR+qBZw1GuhdFbrEcm4FuHqOMxH67ih8p6cwyp+hvnouRnu4/EnNe+Yq/hTcvMkF9xcazGCaS1GhLEW18svRjKtxUiBfnE301rcHVyLjNpY0pfJBVpvKO4JNi6j7IqpFd4LFKlDGTojjgXmcsLRPrPtVg4wmsHue5mC794wElEyLxjFtBb3Ma3FfYxroRIOx1p06MAbD+HqxxUPHa+v3ck+csLl+52EbCMS+iUQcg2U66caFv3rtu1eKf3/Ss6f9Dk5ahbVmujN2/2a/5MrPZqpCNx/jR2AZKaB5P5/lM73MySFboac84TSvIVr8wM+MxMMJRe6Xz6gNSep5Se5Nafk50H9nMDtxtjweyHgD7ijvDGuOIh2R0cHPAFvtM/jD0R5Yv3eBPDEul0xCV4rAL6EBG+UO94bHYjxx0cH9KQNfrfb44+Ji4coV3RsnOXzu2OtgMfrdlmxfrfX73f7oqNj3W5/tC/gi8Eb49iA22dFeb0xVrTLHePi4udB7S6Wqigkt+uhzymlKIyRWBTGMBeFMQxFoYchReGqTuy99MmqAGXSecjQotCDKek8RFAUkttOpOTnYUOLAhc/D/8fbW2ODe48juM4J7zadqEV3gu4z7Oo7I5ktDtcHccbvuWqHHM8QwF9hKmZeIRxm3Ec01pMYFqLCcxbrhxr0cvwLVeueIg1fMuVy/fjhGy5EvolEHINcc6Wa9LXpZpFtSZ6U/ko5931eKYi8Cjj3bXS+VGGpBAQsuU6nrARfMxnZoIJMN29PZYGW66U/EwkvLuOI7y75uJnog0/od5IJbfFSsnP40z583GCdUhuF4hyHZ5gWocnhPnDJKZ1mCTMH55kWocnU3AkY3JjZ6MumR/rTeNkiU3jZOamcTJD09jHjO/eiU/LJPcU4VyUTWMfpqbkqRQ0jcmtA6jvtgErYMVgh2V546O9cTF+V5wP+6pAlNvvpuTnaR9do0fZNHLx8/Q1dhwpPj3DsQM1hfDGS/dL6lOHQYR+OZXMZh/LqYP61NUUBq6fMfy0RfHyDIPdzzL1CWreLMF/57fpACnXmmO9e6Y3X8fnqJteKU7bz/CjIGXzcwx29xfyxSLPERak5wmLMKHfACUXzEnyn+bjRkySz5ueJLm61xdu0I7mRcPtVja/yGD3S0yd3Es+3l9KeIFhLV423AfUHdvLDHa/IsD3X2Gw+1Um33+V0fe58sCgDjemDwxOo+eFwtVzGmFDS8g1DGba+Zvm7ASw6zidu8mluCOezhD0Q4XcEU8XEPRhb8MLScCvEXJB6H8wzNlREJFsX6NMtlKr4v5I83Wc4RBlQdUs5us40yHKguoCiJrlEGWBJYCo1x2iLHAJIOoNhygLPAKIetMhyoJoAUTNdoiywCeAqLccoiyoKYCoOQ5RFtQWQNRchygL6gogap5DlAX1BRD1tkOUBZsF7PW94xBlQSMBETXfIcqC9QIiaoFDlAVNBETUuw5RFjQTQNRChygLmgsg6j2HKAtaCCBqkUOUBXcIIOp9hygLWgkg6gOHKAvaCCDqQ4coCw4KuI9a7BBlQXsBEfWRQ5QFHQUQ9bFDlAWdBRC1xCHKgpUCatRShygLugmIqE8coizoIYCoTx2iLOglgKjPHKIsiBNA1DKzv8gjzlJfZqBA/RnHz5k+3K7mLRXx7xf1jyMQfhkHvEL4rULLidf00udFI684vvocWxZHduQbVF7uuyLP0OSZmjxLk1/X5Dc0+U1Nnq3Jb2nyHE2eq8nzNPltTX5Hk+dr8gJNfleTF2rye5q8SJPf1+QPNPlDTV6syR9p8seavESTl2ryJ5r8qSZ/psnLNPlH9xV5vSb/pMkbNHmjJm/S5M2avEWTt2ryNk3+WZO3a/IOTd6pyb9o8i5N3q3JezT5V03+TZP3avI+Tf5dk/dr8gFNPqjJf2jyIU3+U5MPa/JfmnxEk49q8jFN/luTj2vyCU0+qcmnNPm0Jp/R5LOafE6Tz2vyBU2+qMkRnityOk3+TJOXafLnmrxck1do8kpNXqXJX2jyak3+UpO/0uSvNfkbTV6jyd9q8neavFaT12ny95r8gyb/qMnrNfknTd6gyRs1eZMmb9bkLZq8VZO3afLPmrxdk3do8k5N/kWTd2nybk3eo8m/avJvmrxXk/dp8u+avF+TD2jyQU3+Q5MP6f7j1fxHkz/X5OWavEKTV2ryKk3+QpNXa/KXmvyVJn+tyd9o8hpN/laTv9PktZq8TpO/1+QfNPlHTV6vyT9p8gZN3qjJmzR5syZv0eStmrxNk3/W5O2avEOTd2ryL5q8S5N3a/IeTf5Vk3/T5L2avE+Tf9fk/Zp8QJMPavIfmnxIk//U5MOa/JcmH9Hko5p8TJP/1uTjmnxCk09q8ilNPq3JZzT5rCaf0+TzmnxBky9qcoRWo9NpcqQmp9fkDJqcUZMzaXJmTc6iyVk1OZsmZ9fkHJqcU5NzaXJuTc6jyXk1+SZNzqfJN2tyfk0uoMkFNbmQJhfW5CKaXFSTi2lycU0uocklNbmUJpfW5DKaXFaTy2lyeU2uoMkVNfkWTa6kyZU1uYomV9XkappcXZNraLKlyaDJLk12a7JHk6M0OVqTvZrs0+QYTa6pybU0ubYm19HkuppcT5Pra3IDTW6oyY00+VZNbqzJTTS5qSY30+TbNLm5Jt+uyS00uaUeL9FavGhyDk3Oqcm5NDm3JufR5LyafJMm59PkmzU5vyYX0OSCmlxIkwtrchFNLqrJxTS5uCaX0OSSmlxKk0trchlNLqvJ5TS5vCZX0OSKmnyLJlfS5MqaXEWTq2pyNU2ursk1NNnSZNBklya7NdmjyVGaHK3JXk32aXKMJtfU5FqaXFuT62hyXU2up8n1NbmBJjfU5EaafKsmN9bkJprcVJObafJtmtxck2/X5Baa3FKT79DkOzW5lSa31uQ2mtxWk9tpcntN7qDJHTW5kyZ31uQumtxVk7tpcndN7qHJPTW5lybHanKcJsdrsl+TEzQ5oMm9NbmPJvfV5H6a3F+TB2jyQE0epMmDNXmIJt+lyUM1eZgmD9fkEZo8UpPv1uR7NHmUJo/W5Hs1+T5Nvl+TH9DkBzV5jCY/pMkPa/JYTR6nyeM1+RFNnqDJj2ryY5o8UZMf1+QnNHmSJj+pyZM1+SlNflqTp2jyVE1+RpOf1eTnNPl5TX5Bk1/U5Jc0+WVNfkWTX9XkaZo8XZNf0+QZmjxTk2dp8uua/IYmv6nJszX5LU2eo8lzNXmeJr+tye9o8nxNXqDJ72ryQk1+T5MXafL7mvyBJn+oyYs1+SNN/jgor8A+YiViFeILxGrEl4ivEF8jvkGsQXyL+A6xFrEO8T3iB8SPiPWInxAbEBsRmxCbEVsQWxHbED8jtiN2IHYifkHsQkQE9VGv+sF3K7zXpS/q3lWN/KeL3GrexLnCPdPZ7eM5J1Pzloq4/HuGOSLS5vcMH68e/lyBy6+wfs/wavolCvpa7An63q++4IIkLqD6D+mSjP0aXFT9RX34qC9iKp3Llfir5Ht8dI76q4+W3KTOF65+KigTySTkg+PbxD1KV8Uz9Rr8xpRMftP8njppjM+JzVw1+rUY2cFoH4AJaPd+BrvvJrY78UX9hcZ76XwVCLmGuw33GxUvwxn8ZrSAePmTwe57hcTLPsJ4IeQa7hUQLyMY/OYBAfFyjMHuB4XEy++E8ULINTwoIF5GMvjNwwLi5RSD3WOFxMt+wngh5BrGCoiXuxn85hEB8XKewe4JQuLlAGG8EHINEwTEyz0MfjNRQLxEMuz5PC4kXg4Sxgsh1/C4gHgZxRAvTwqIl8wM8TJZSLz8QRgvhFzDZAHxMpohXqYIiJccDPEyVUi8HCKMF0KuYaqAeLmXIV6eExAveRni5Xkh8fInYbwQcg3PC4iX+xji5SUB8VKAIV5eFhIvhwnjhZBreFlAvNzPEC/TBMRLUYZ4mS4kXv4ijBdCrmG6gHh5gCFeZgqIl1IM8TJLSLwcIYwXQq5hloB4eZAhXt4UEC/lGeJltpB4OUoYL4Rcw2wB8TKGIV7mCoiXygzxMk9IvBwjjBdCrmGegHh5iCFe5guIlxoM8bJASLz8TRgvhFzDAgHx8jBDvLwnIF48DPGySEi8HCeMF0KuYZGAeBnLEC8fCoiXGIZ4WSwkXk4Qxgsh17BYQLyMY4iXJQLipS5DvCwVEi8nCeOFkGtYKiBexjPEy2cC4qURQ7wsExIvpwjjhZBrWCYgXh5hiJcVAuKlGUO8rBQSL6cJ44WQa1gpIF4mMMTLagHx0pIhXr4UEi9nCOOFkGv4UkC8PMoQL98IiJc2DPGyRki8nCWMF0KuYY2AeHmMIV7WCoiXjgzxsk5IvJwjjBdCrmGdgHiZyBAvPwqIl24M8bJeSLycJ4wXQq5hvYB4eZwhXjYKiJdYhnjZJCReLhDGCyHXsElAvDzBEC9bBcRLgCFetgmJl4uE8ULINWwTEC+TGOJlh4B46c8QLzuFxEtEDN1aEnINOwXEy5MM8bJbQLwMYYiXPULiJR1hvBByDXsExMtkhnjZKyBeRjDEyz4h8RJJGC+EXMM+AfHyFEO8HBAQL6MZ4uWgkHhJTxgvhFzDQQHx8jRDvPwpIF4eZIiXw0LiJQNhvBByDYcFxMsUhng5KiBexjHEyzEh8ZKRMF4IuQbK9cuAcxSMvDKf+g2PQ+jr6rcJjuK7+s71k/iuvkv6HL6r78hNhz6hvvszE76r7zTMju/qu9ry4Lv6Dqr8+K6+W6cIvqvvDCmJ7+q7EMrhu/qMdyV8V59drY7v6jN5bnxXnzXy4bv6DEUdfFfPhjfEd/XMa1N8V8/ytcB39YxSa3xXz150wHd1ptwV39VZWS98V2cACfiu9jb74bvasxmsfBjfh+O76rFH4bvqHR7Ad5UTx+K74vrR6ld8iTiW2H4fKBOdj1rpg76Q9EU1P9PaAuUacOmYmVpHGwXBCuOlHHSFj95BT6RFkQvDcmX3Sga7T6ZNcU+15cruVQx2n0qrpiaVliu7v2Cw+3TaNXOpslzZvZrB7jNp2cSmwnJl95cMdp9N2+Y9ZMuV3V8x2H0urW9aQrRc2f01g93n0/5mLSTLld3fMNh94XrcpIZgubJ7DYPdF6/PzXmKLVd2f8tgd0TH67QpkULLld3fMdid7nrZnULLld1rGeyOvH52p8hyZfc6BrvTX0+7U2C5svt7BrszXF+7k7Vc2f0Dg90Zr7fdyViu7P6Rwe5M19/ua1qu7F7PYHdmE+y+huXK7p8Y7M5iht1XtVzZvYHB7qym2H0Vy5XdGxnszmaO3baWK7s3Mdid3SS7bSxXdm9msDuHWXb/x3Jl9xYGu3OaZncSy5XdWxnszmWe3f+yXNm9jcHu3CbarVmu7P6Zwe48Ztr9j+XK7u0Mduc11e6g5cruHQx232Su3ZcsV3bvZLA7n8l2o+XK7l8Y7L6Z2e5w9VN2q8Nq6nnzE9ud+MpAzDvhQT0Qnn2Dfp4cLhcFhHBBeJYMhOezcIaQi4JCuCA87wTCM0Q4T8hFISFcEJ7JAeE5F+hnR+FyUVgIF4TnRkB4FgPpCbkoIoQLwrMNIDwvgEyEXBSV0kcRrh/hnjZkJeSimBAuCPeIgXDfFXIQclFcCBeE+5hAuDcIuQm5KCGEC8K9NiDcv4KbCLkoKYQLwv0gINxjgfyEXJQSwgXh/gAQ3t9CIUIuSgvhgvA+CAj7eChKyEUZIVwQ9ntA2K9ACUIuygrhgrCuAWFehtKEXJRLIy7CfuaIcM+cMBcAoS8DJRfMH7SExPluxA9aZkmDD1qG8/rnk8CRxIareesTBXRWwkVU65c+uI5q3lI8xItY12zOp7Uhm4Akkp07iVCc0isl09Ma7tKd3Qrv9a9FDNfedgKeFtlV7b/JJ+ynPQk7q3ZOByMi+eS4QTsYF2WlzcnUweSU18GQrmsup4OBXAKSSG4JHUxu6g7GdTmIOBYx7Oe65QQOW/WVEDh5btDq66asEnmZqm9eedWXdF1vcqov3CQgieSTUH3z0e8fAGX1zUdYfTvcoPsHNxPuH3Rw9g9EJJ+bKXXMiJNki7iSKPQXteIqAKjmuqSbjYMR6ms58zrzOvM68zrzOvM68zrzOvM68zrzOvM68zrzOvM68zrzOvM68zrzOvOaMS/1fvVyn/k6zhCg40wBOs4SoOPrAnR8Q4CObwrQcbYAHd8SoOMcATrOFaDjPAE6vi1Ax3cE6DhfgI4LBOj4rgAdFwrQ8T0BOi4SoOP7AnT8QICOHwrQcbEAHT8SoOPHAnRcIkDHpQJ0/ESAjp8K0PEzATouE6Djj27zdVwvQMefBOi4QYCOGwXouEmAjpsF6LhFgI5bBei4TYCOPwvQcbsAHXcI0HGnAB1/EaDjLgE67hag4x4BOv4qQMffBOi4V4CO+wTo+LsAHfcL0PGAAB0PCtDxDwE6HhKg458CdDwsQMe/BOh4RICORwXoeEyAjn8L0PG4AB1PCNDxpAAdTwnQ8bQAHc8I0PGsAB3PCdDxvAAdLwjQ8aIAHSM85uuYToCOnwnQcZkAHT8XoONyATquEKDjSgE6rhKg4xcCdFwtQMcvBej4lQAdvxag4zcCdFwjQMdvBej4nQAd1wrQcZ0AHb8XoOMPAnT8UYCO6wXo+JMAHTcI0HGjAB03CdBxswAdtwjQcasAHbcJ0PFnATpuF6DjDgE67hSg4y8CdNwlQMfdAnTcI0DHXwXo+JsAHfcK0HGfAB1/F6DjfgE6HhCg40EBOv4hQMdDEs6vvQLOrwXo+LkAHZcL0HGFAB1XCtBxlQAdvxCg42oBOn4pQMevBOj4tQAdvxGg4xoBOn4rQMfvBOi4VoCO6wTo+L0AHX8QoOOPAnRcL0DHnwTouEGAjhsF6LhJgI6bBei4RYCOWwXouE2Ajj8L0HG7AB13CNBxpwAdfxGg4y4BOu4WoOMeATr+KkDH3wTouFeAjvsE6Pi7AB33C9DxgAAdDwrQ8Q8BOh4SoOOfAnQ8LEDHvwToeESAjkcF6HhMgI5/C9DxuAAdTwjQ8aQAHU8J0PG0AB3PCNDxrAAdzwnQ8bwAHS8I0PGiAB0jBPzWUDoBOkYK0DG9AB0zCNAxowAdMwnQMbMAHbMI0DGrAB2zCdAxuwAdcwjQMacAHXMJ0DG3AB3zCNAxrwAdbxKgYz4BOt4sQMf8AnQsIEDHggJ0LCRAx8ICdCwiQMeiAnQsJkDH4gJ0LCFAx5ICdCwlQMfSAnQsI0DHsgJ0LCdAx/ICdKwgQMeKAnS8RYCOlQToWFmAjlUE6FhVgI7VBOhYXYCONQToaAnQEQTo6BKgo1uAjh4BOkYJ0DFagI5eATr6BOgYI0DHmgJ0rCVAx9oCdKwjQMe6AnSsJ0DH+gJ0bCBAx4YCdGwkQMdbBejYWICOTQTo2FSAjs0E6HibAB2bC9DxdgE6thCgY0sJz+NGm69jdgE65hCgY04BOuYSoGNuATrmEaBjXgE63iRAx3wCdLxZgI75BehYQICOBQXoWEiAjoUF6FhEgI5FBehYTICOxQXoWEKAjiUF6FhKgI6lBehYRoCOZQXoWE6AjuUF6FhBgI4VBeh4iwAdKwnQsbIAHasI0LGqAB2rCdCxugAdawjQ0RKgIwjQ0SVAR7cAHT0CdIwSoGO0AB29AnT0CdAxRoCONQXoWEuAjrUF6FhHgI51BehYT4CO9QXo2ECAjg0F6NhIgI63CtCxsQAdmwjQsakAHZsJ0PE2ATo2F6Dj7QJ0bCFAx5YCdLxDgI53CtCxlQAdWwvQsY0AHdsK0LGdAB3bC9CxgwAdOwrQsZMAHTsL0LGLAB27CtCxmwAduwvQsYcAHXsK0LGXAB1jBegYJ0DHeAE6+gXomCBAx4AAHXsL0LGPAB37CtCxnwAd+wvQcYAAHQcK0HGQAB0HC9BxiAAd7xKg41ABOg4ToONwATqOEKDjSAE63i1Ax3sE6DhKgI6jBeh4rwAd7xOg4/0CdHxAgI4PCtBxjAAdHxKg48MCdBwrQMdxAnQcL0DHRwToOEGAjo8K0PExATpOFKDj4wJ0fEKAjpME6PikAB0nC9DxKQE6Pi1AxykCdJwqQMdnBOj4rAAdnxOg4/MCdHxBgI4vCtDxJQE6vixAx1cE6PiqAB2nCdBxugAdXxOg4wwBOs4UoOMsATq+LkDHNwTo+KYAHWcL0PEtATrOEaDjXAE6zhOg49sCdHxHgI7zBei4QICO7wrQcaEAHd8ToOMiATq+L0DHDwTo+KEAHRcL0PEjATp+zKAjh567qpHN5UqqI7myqwryLGr6JHq6rWiPJ8HrSgA3xFqumDhflOWJiov2gQ+ifFF+l8/tTvB5fN6YuBivFQMedwIEomLcgeDc+WMIN0FaEW5W0M1lpQuum3pX9pZi5Px3dNJIRl8Kl+8CMTzrWoBxXeej/W9W+++84a5Fp460McrhTxx2d+4oIzcVJMxNhFwD5frpMaTsTccYQ7MZfKmbgBjisLu7kBgqRBhDhFxDd6YYKsQYQ+NzRkS8xeBLvQyPoQlMdscKiaHChDFEyDXECsi98xj8pghTD1uEuYflWIuiTGtRVFuLq8WVFd4LCHkEfR3CXdNiTGtajNG/VG16m8G//AJqE4fdCUJqU3HCGCLkGhIM9xsVL+8w+E0fAfHCYXdfIfFSgjBeCLmGvgLiZT6D3wwQEC8cdg8UEi8lCeOFkGsYKCBeFjD4zRAB8cJh911C4qUUYbwQcg13CYiXdxn8ZriAeOGwe4SQeClNGC+EXMMIAXtrixj8pgzT3kcZ5r01jrUoy7QWZdNgb42QRyhLuLdWjmlNyzHvrb3P4F/3CKhNHHaPElKbyhPGECHXMEpAbVrM4DcVmHJHBebaxLEWFZnWomIa1CZCHqEiYW26hWlNb2GuTR8x+Nd9AmoTh933C6lNlQhjiJBruF9AbVrK4DeVmXJHZebaxLEWVZjWokoa1CZCHqEKYW2qyrSmVZmfh/+Mwb+qMa1FNeZY41iL6kxrUT0NYo2QR6hOGGs1mNa0BnMfuIzBv8YI6AM57H5ISB9oEcYQIdfwkIDzps8Z/GacgHjhsHu8kHgBwngh5BqkrJ+LcP1eIvy86MutzM83Kxji7lEB+YbD7seExIubMF4IuYbHBOzTfMHgNx6m3l6fl+PekWMtopjWQp/3anFlhfcCQh4hivDeMZppTaMZ/UvVptUM/vWEgNrEYfckIbXJSxhDhFzDJAH3jl8y+M1TAuKFw+6nhcSLjzBeCLmGpwXEy1cMfvOMgHjhsPtZIfESQxgvhFzDswLi5WsGv3lBQLxw2P2ikHipSRgvhFzDiwLi5RsGv3lFQLxw2P2qkHipRRgvhFzDqwLiZQ2D37wmIF447J4hJF5qE8YLIdcwQ0C8fMvgN68LiBcOu98QEi91COOFkGt4Q8DZzToGv6nLtLdel/m5P461qMe0FvXS4Lk/Qh6hHuHZTX2mNa3P/Iztjwz+1YBpLRowxxrHWjRkWouGaRBrhDxCQ8JYa8S0po2YY20Dg3/dyrQWtzLHGsdaNGZai8ZpEGuEPEJjwlhrwrSmTZhjbTODfzVlWoumzLHGsRbNmNaiWRrEGiGP0Iww1m5jWtPbmD87soXBv94SsL/BYfccIfsbzQljiJBrmCNgP3Arg9+8LSBeOOx+R0i83E4YL4RcwzsC4mUbg9+8KyBeOOxeKCReWhDGCyHXsFDA/vkOBr9pydSbtmS+9+FYizuY1uKONLj3IeQR7iC897mTaU3vZN5n2EX/m41uyt9sbMW0rq2Y45ZhXV3zCde1NdO6tk6DHEDoE9CaMAe0YVrTNsz7H7sZasz7AvpTDrs/ENKftiWMIUKu4QPD/Ubl4Fer0/vNRwLsns5g98dC4qUdYbwQcg2U66fXnHZpUMcpf3+9HWEdb89Ux9sz95wcv79O2XN2YFrXDmngq4S/HQ8dCH21I9Oadgyuqfp3wciI/7yo/j8jmOKhZ3rzdexEyJ1YovZHmq9j5xhiHTl2cpSS1N1ZF6bs0oW5Eh5iuLPryrQWXdOgehHyCF0Jq1c3pjXtJrx6Vc1ivo7dneplQXUBRPWQUL16MFSvnkzZpSdz9TrKUL16Ma1FrzSoXoQ8Qi/C6hXLtKaxwquXJSApxjnVywKXAKLiJVSveIbq5WfKLn7m6nWSoXolMK1FQhpUL0IeIYGwegWY1jQgvHp5BCTF3k71siBaAFF9JFSvPgzVqy9TdunLXL3OMVSvfkxr0S8Nqhchj9CPsHr1Z1rT/sKrl09AUhzgVC8LagogaqCE6jWQoXoNYsoug5irVzqGJ7QGM63F4DSoXoQ8wmDC6jWEaU2HCK9etQUkxbuc6mVBXQFEDZVQvYYyVK9hTNllGHP1ysRQvYYzrcXwNKhehDzCcMLqNYJpTUcIr171BSTFkU71smBzpPk63i2het3NUL3uYcou9zBXr+wM1WsU01qMSoPqRcgjjCKsXqOZ1nS08OrVSED1utepXhasF1C97pNQve5jqF73M2WX+5mrVx6G6vUA01o8kAbVi5BHeICwej3ItKYPCq9eTQRUrzFO9bKgmQCiHpJQvR5iqF4PM2WXh5mrV36G6jWWaS3GpkH1IuQRxhJWr3FMazpOePVqLiApjneqlwUtBBD1iITq9QhD9ZrAlF0mMFevIgzV61GmtXg0DaoXIY/wKGH1eoxpTR8TXr3uEJAUJzrVy4JWAoh6XEL1epyhej3BlF2eYK5eJRmq1ySmtZiUBtWLkEeYRFi9nmRa0yeFV682ApLiZKd6WXBQwLnXUxKq11MM1etppuzyNHP1KsdQvaYwrcWUNKhehDzCFMLqNZVpTacKr17tBVSvZ5zqZUFHAUQ9K6F6PctQvZ5jyi7PMVevSgzV63mmtXg+DaoXIY/wPGH1eoFpTV8QXr06C0iKLzrVy4KVAu69XpJQvV5iqF4vM2WXl5mrV3WG6vUK01q8kgbVi5BHeIWwer3KtKavCq9e3QRUr2lO9bKghwCipkuoXtMZqtdrTNnlNebq5WaoXjOY1mJGGlQvQh5hBmH1msm0pjOFV69eApLiLKd6WRAngKjXJVSv1xmq1xtM2eUN5urlY6hebzKtxZtpUL0IeYQ3CavXbKY1nS28en1Sxnwd33KqlwWfCSBqjoTqNYehes1lyi5zmatXHYbqNY9pLealQfUi5BHmEVavt5nW9G3h1Wu5gKT4jlO98NxLAFHzJVSv+QzVawFTdlnAXL0aMlSvd5nW4t00qF6EPMK7hNVrIdOaLhRevVYLSIrvOdXLgq8EELVIQvVaxFC93mfKLu8zV6+mDNXrA6a1+CANqhchj/ABYfX6kGlNPxRevdYISIqLneplwXcCiPpIQvX6iKF6fcyUXT5mrl4tGKrXEqa1WJIG1YuQR1hCWL2WMq3pUuHV63sBSfETp3pZ8KMAoj6VUL0+ZahenzFll8+Yq1drhuq1jGktlqVB9SLkEZYRVq/Pmdb0c+HVa4OApLjcqV4WbBJA1AoJ1WsFQ/VayZRdVjJXrw4M1WsV01qsSoPqRcgjrCKsXl8wrekXwqvXwkgBZ3NO9bJgm4Dq9aWE6vUlQ/X6iim7fMVcvboyVK+vmdbi6zSoXoQ8wteE1esbpjX9Rnj12iEgKa5xqpcFvwgg6lsJ1etbhur1HVN2+Y65evViqF5rmdZibRpUL0IeYS1h9VrHtKbrhFevPQKS4vdO9bLgNwFE/SChev3AUL1+ZMouPzJXrwSG6rWeaS3Wp0H1IuQR1hNWr5+Y1vQn4dXrdwFJcYNTvSw4IICojRKq10aG6rWJKbtsYq5e/Riq12amtdicBtWLkEfYTFi9tjCt6Rbh1WtdBvN13OpULwv+FFC9tkmoXtsYqtfPTNnlZ+bqNZihem1nWovtaVC9CHmE7YTVawfTmu4QXr2OCEiKO53qZUGCgO85/EVC9fqFoXrtYsouu5ir13CG6rWbaS12p0H1IuQRdhNWrz1Ma7pHePU6LqB6/epULwtOCiDqNwnV6zeG6rWXKbvsZa5eoxiq1z6mtdiXBtWLkEfYR1i9fmda09+FV68zApLifqd6WXBOAFEHJFSvAwzV6yBTdjnIXL0eYKhefzCtxR9pUL0IeYQ/CKvXIaY1PSS8el0UkBT/dKqXBenKmq/jYQnV6zBD9fqLKbv8xVy9xjJUryNMa3EkDaoXIY9whLB6HWVa06PCq1cGAUnxmFO9LMgkgKi/JVSvvxmq13Gm7HKcuXo9ylC9TjCtxYk0qF6EPMIJwup1kmlNT9qsaSTxmrYhXIdThPzo63AquA4ZETm0NdBf1PHXkcCWwOWXZaNuuHNDoqCvxemYy+9nYoILkriAZ9IgODuG70iuoCPBaUKnPMNEJHViPk1dnYMv4oTh7kjIzVmmxHlWa/s3RPz3RfT/CVfzBSu8F5xl8AXy/ZoIHn8lr3BnCR32HFOFOyfcYc8JcNg2MUIc9hyhw55nctjzwh32vACH7ZmeeGNlSwQbUTIWgUnHCzEOUbA/UsBhoEOUBVUFPKIfUdMhCqoLICqdQxTuxQggKtIhygKXAKLSO0RZ4BFAVAaHKAuiBRCV0SHKAp8AojI5RFlQUwBRmR2iLKgtgKgsDlEW1BVAVFaHKAvqCyAqm0OUBZsF7PVld4iyoJGAiMrhEGXBegERldMhyoImAiIql0OUBc0EEJXbIcqC5gKIyuMQZUELAUTldYiy4A4BRN3kEGVBKwFE5XOIsqCNAKJudoiy4KCA+6j8DlEWtBcQUQUcoizoKICogg5RFnQWQFQhhygLVgqoUYUdoizoJiCiijhEWdBDAFFFHaIs6CWAqGIOURbECSCqODVRjB9ku6E/H1XCIUrG56NKOkTJ+HxUKYcoGZ+PKu0QJePzUWUcomR8PqqsQ5SMz0eVc4iS8fmo8g5RMj4fVcEhSsbnoyo6RMn4fNQtDlEyPh9VySFKxuejKjtEyfh8VBWHKBmfj6rqECXj81HVHKJkfD6qukOUjM9H1XCIkvH5KMshSsbno8AhSsbno1wOUTI+H+V2iJLx+SiPQ5SMz0dFOUTJ+HxUtEOUjM9HeR2iZHw+yucQJePzUTEOUTI+H1XTIUrG56NqOUTJ+HxUbYcoGZ+PquMQZcEnZQQ8gOMQZcFnAoiq5xBlwXIBRNV3iML7KAFENXCIsmC1AKIaOkRZ8JUAoho5RFmwRgBRtzpEWfCdAKIaO0RZ8L0Aopo4RFnwowCimjpEWbBBAFHNHKIs2CSAqNscoixYKODgsLlDlAXbBETU7Q5RFuwQQFQLhygLfhFAVMua9DpeekUmUdRtRXs8CV5XArgh1nLFxPmiLE9UXLQPfBDli/K7fG53gs/j88bExXitGPC4EyAQFeMOaJNTGV0lgsdoapvTEdpcVYjNkYQ2V0sjm63wXlCdcP0KxsiwuQahzYWIbU5H7NPzC0ZEtI2hn/eTjmbbvYrJ7k878vh4emIftwjnIuQauNaP/INxETL0dAnR0x0hozZ4Iuhyxf1lZNgcRWhz+xgZ/hgdIUNPrxA9fUL0jBGiZ00hetYSomdtIXrWEaJnXSF61hOiZ30hejYQomdDIXo2EqLnrUL0bCxEzyZC9GwqRM9mQvS8TYiezYXoebsQPVsI0bOlED3vEKLnnUL0bCVEz9ZC9GwjRM+2QvRsJ0TP9kL07CBEz45C9OwkRM/OQvTsIkTPrkL07CZEz+5C9OwhRM+eQvTsJUTPWCF6xgnRM16Inn4heiYI0TMgRM/eQvTsI0TPvkL07CdEz/5C9BwgRM+BQvQcJETPwUL0HCJEz7uE6DlUiJ7DhOg5XIieI4j1pH5+f7Z6sNtFP+/nhn8eYh7afQHo510u5PMQIwnnIuQalhvuNype0jHEyyrD7X6bKV6+EBIvdxPORcg1cK1fJPH63UPoM+ld5ueIjAw54ivDc8Q7TDniayE5YhThXIRcw9cCamomhnj51nC75zPFy3dC4mU04VyEXMN3AuIlM0O8fG+43QuY4uUHIfFyL+FchFzDDwLiJQtDvPxkuN3vMsXLBiHxch/hXIRcwwYh92z3E/pMNgH3bDkYcsRmw3PEQqYcsUVIjniAcC5CrmGLgJqakyFefjbc7veY4mW7kHh5kHAuQq5hu4B4ycUQL78YbvcipnjZJSRexhDORcg17BIQL7kZ4uVXw+1+nylefhMSLw8RzkXINfwm5J7tYUKfySvgni0fQ4743fAc8QFTjtgvJEeMJZyLkGvYL6Cm3swQL38YbveHTPFySEi8jCOci5BrOCQgXvIzxMtfhtu9mClejgiJl/GEcxFyDUcExEtBhnj523C7P2KKl+NC4uURwrkIuYbjQu7ZJhD6TBEB92zFGXLEKcNzxMdMOeK0kBzxKOFchFzDaQE1tSRDvJwz3O4lTPFyXki8PEY4FyHXcF5AvJRmiJeITmbbvZQpXtJ1khEvEwnnIuQa0hnuNypeyjLESwbD7f6EKV4yComXxwnnIuQauNaP+p7tCUKfqSDgnq0SQ47IYniO+JQpR2QVkiMmEc5FyDVkFVBTqzDESw7D7f6MKV5yComXJwnnIuQacgqIl2oM8ZLHcLuXMcVLXiHxMplwLkKuIa+AeKnBEC83G27350zxkl9IvDxFOBch15BfyD3b04Q+4xJwzxbFkCMKGZ4jljPliMJCcsQUwrkIuYbCAmqqlyFeihlu9wqmeCkuJF6mEs5FyDUUFxAvMQzxUspwu1cyxUtpIfHyDOFchFxDaQHxUoshXsoZbvcqpngpLyReniWci5BrKC/knu05Qp+pK+CerQFDjrjF8BzxBVOOqCQkRzxPOBch11BJQE1txBAvVQ23ezVTvFQTEi8vEM5FyDVUExAvjRnixTLc7i+Z4gWExMuLhHMRcg0gIF6aMsSLx3C7v2KKlygh8fIS4VyEXEOUkHu2lwl9prmAe7aWDDnCZ3iO+JopR8QIyRGvEM5FyDXECKipdzLES23D7f6GKV7qCImXVwnnIuQa6giIl9YM8VLfcLvXMMVLAyHxMo1wLkKuoYGAeGnLEC+3Gm73t0zx0lhIvEwnnIuQa2gs5J7tNUKf6SDgnq0zQ45oZniO+I4pR9wmJEfMIJyLkGu4TUBN7coQLy0Mt3stU7y0FBIvMwnnIuQaWgqIl+4M8dLKcLvXMcVLayHxMotwLkKuobWAeOnJEC/tDLf7e6Z4aS8kXl4nnIuQa2gv5J7tDUKfiRNwz5bAkCM6GZ4jfmDKEZ2F5Ig3Ceci5Bo6C6ipvRnipZvhdv/IFC/dhcTLbMK5CLmG7gLipS9DvPQy3O71TPESKyRe3iKci5BriBUQL/0Z4sVvuN0/McVLgpB4mUM4FyHXkCDknm0uoc8MEnDPdhdDjuhjeI7YwJQj+grJEfMI5yLkGvoKqKnDGOJlgOF2b2SKl4FC4uVtwrkIuYaBAuJlBEO8DDHc7k1M8XKXkHh5h3AuQq7hLgHxcjdDvAw33O7NTPEyQki8zCeci5BrGCHknm0Boc+MFnDPdj9DjrjH8ByxhSlHjBKSI94lnIuQaxgloKY+yBAv9xlu91ameLlfSLwsJJyLkGu4X0C8PMQQL2MMt3sbU7w8JCRe3iOci5BreEhAvIxliJdxhtv9M1O8jBcSL4sI5yLkGsYLuWd7n9BnHhFwz/YYQ4541PAcsZ0pRzwmJEd8QDgXIdfwmICa+jhDvDxhuN07mOJlkpB4+ZBwLkKuYZKAeJnEEC9PGW73TqZ4eVpIvCwmnIuQa3haQLxMZoiXZwy3+xemeHlWSLx8RDgXIdfwrJB7to8JfWaKgHu2ZxlyxAuG54hdTDniRSE5YgnhXIRcw4sCaurzDPHyiuF272aKl1eFxMtSwrkIuYZXBcTLiwzx8prhdu9hipcZQuLlE8K5CLmGGQLi5WWGeHndcLt/ZYqXN4TEy6eEcxFyDW8IuWf7jNBnpgm4Z5vBkCPeMjxH/MaUI+YIyRHLCOci5BrmCKipsxji5W3D7d7LFC/vCImXzwnnIuQa3hEQL28wxMu7htu9jyleFgqJl+WEcxFyDQsFxMtshnh533C7f2eKlw+ExMsKwrkIuYYPhNyzrST0mbkC7tneYcgRHxmeI/Yz5YiPheSIVYRzEXINHwuoqQsY4uUTw+0+wBQvnwqJly8I5yLkGj4VUlNXE/rMhRgZNn9JaPNFITZ/RWhzRE0ZNn9NaHM6ITZ/Q2hzpBCb1xDanF6Izd8S2pxBiM3fEdqcUYjNawltziTE5nWENmcWYvP3hDZnEWLzD4Q2ZxVi84+ENmcTYvN6QpuzC7H5J0KbcwixeQOhzTmF2LyR0OZcQmzeRGhzbiE2bya0OY8Qm7cQ2pxXiM1bCW2+SYjN2whtzifE5p8Jbb5ZiM3bCW3OL8TmHYQ2FxBi805CmwsKsfkXQpsLCbF5F6HNhYXYvJvQ5iJCbN5DaHNRITb/SmhzMSE2/0Zoc3EhNu8ltLmEEJv3EdpcUojNvxPaXEqIzfsJbS4txOYDhDaXEWLzQUKbywqx+Q9Cm8sJsfkQoc3lhdj8J6HNFYTYfJjQ5opCbP6L0OZbhNh8hNDmSkJsPkpoc2UhNh8jtLmKEJv/JrS5qhCbjxPaXE2IzScIba4uxOaThDbXEGLzKUKbLSE2nya0GYTYfIbQZpcQm88S2uwWYvM5Qps9Qmw+T2hzlBCbLxDaHC3E5ouENnuF2Kw+gElls0+IzekIbY4RYnMkoc01hdicntDmWkJszkBoc20hNmcktLmOEJszEdpcV4jNmQltrifE5iyENtcXYnNWQpsbCLE5G6HNDYXYnJ3Q5kZCbM5BaPOtQmzOSWhzYyE25yK0uYkQm3MT2txUiM15CG1uJsTmvIQ23ybE5psIbW4uxOZ8hDbfLsTmmwltbiHE5vyENrdksjkdsc0F0snQs6AQPQsJ0bOwED2LCNGzqBA9iwnRs7gQPUsI0bOkED1LCdGztBA9ywjRs6wQPcsJ0bO8ED0rCNGzohA9bxGiZyUhelYWomcVIXpWFaJnNSF6VheiZw0helpC9AQherqE6OkWoqdHiJ5RQvSMFqKnV4iePiF6xgjRs6YQPWsJ0bO2ED3rCNGzrhA96wnRs74QPRsI0bOhED0bCdHzViF6NhaiZxMhejYVomczIXreJkTP5kL0vF2Ini2E6NlSiJ53CNHzTiF6thKiZ2sherYRomdbIXq2E6JneyF6dhCiZ0chenYSomdnIXp2EaJnVyF6dhOiZ3chevYQomdPIXr2EqJnrBA944ToGS9ET78QPROE6BkQomdvIXr2EaJnXyF69hOiZ38heg4QoudAIXoOEqLnYCF6DhGi511C9BwqRM9hQvQcLkTPEUL0HClEz7uF6HmPED1HCdFztBA97xWi531C9LxfiJ4PCNHzQSF6jhGi50NC9HxYiJ5jheg5Toie44Xo+YgQPScI0fNRIXo+JkTPiUL0fFyInk8I0XOSED2fFKLnZCF6PiVEz6eF6DlFiJ5Thej5jBA9nxWi53NC9HxeiJ4vCNHzRSF6viREz5eF6PmKED1fFaLnNCF6Thei52tC9JwhRM+ZQvScJUTP14Xo+YYQPd8UoudsIXq+JUTPOUL0nCtEz3lC9HxbiJ7vCNFzvhA9FwjR810hei4Uoud7QvRcJETP94Xo+YEQPT8UoudiIXp+JETPj4XouUSInkuF6PmJED0/FaLnZ0L0XCZEz8+F6LlciJ4rhOi5Uoieq4To+YUQPVcL0fNLIXp+JUTPr4Xo+Y0QPdcI0fNbIXp+J0TPtUL0XCdEz++F6PmDED1/FKLneiF6/iREzw1C9NwoRM9NQvTcLETPLUL03CpEz21C9PxZiJ7bhei5Q4ieO4Xo+YsQPXcJ0XO3ED33CNHzVyF6/iZEz71C9NwnRM/fhei5X4ieB4ToeVCInn8I0fOQED3/FKLnYSF6/iVEzyNC9DwqRM9jQvT8W4iex4XoeUKInieF6HlKiJ6nheh5RoieZ4XoeU6InueF6HlBiJ4XhegZESlDz3RC9IwUomd6IXpmEKJnRiF6ZhKiZ2YhemYRomdWIXpmE6JndiF65hCiZ04heuYSomduIXrmEaJnXiF63iREz3xC9LxZiJ75hehZQIieBYXoWUiInoWF6FlEiJ5FhehZTIiexYXoWUKIniWF6FlKiJ6lhehZRoieZYXoWU6InuWF6FlBiJ4Vheh5ixA9KwnRs7IQPasI0bOqED2rCdGzuhA9awjR0xKiJzDpGUmsp0vT021FezwJXlcCuCHWcsXE+aIsT1RctA98EOWL8rt8bneCz+PzxsTFeK0Y8LgTIBAV4w4EJ7szRobNbkKbTxHbnNQPw9VvfsGIiL0++nk/72S23avQ7k4x9PMu78Tj4+mJfdxDl3+AkGvgWj/qHBFFmCO6CcgR+xhyxCoBOaI7Q474QkiOiCbMEYRcwxdCcoSXMEfECsgRvzPkiK8E5Ig4hhzxtZAc4SPMEYRcw9dCckQMYY4ICMgR+xlyxLcCckRvhhzxnZAcUZMwRxByDd8JyRG1CHNEfwE54gBDjvheQI4YwJAjfhCSI2oT5ghCruEHITmiDmGOGCIgRxxkyBE/CcgRdzHkiA1CckRdwhxByDVsEJIj6hHmiBECcsQfDDlis4AcMZIhR2wRkiPqE+YIQq5hi5Ac0YAwR4wWkCMOMeSInwXkiHsZcsR2ITmiIWGOIOQatgvJEY0Ic8SDAnLEnww54hcBOWIMQ47YJSRH3EqYIwi5hl1CckRjwhwxTkCOOMyQI34VkCPGM+SI34TkiCaEOYKQa/hNSI5oSpgjHhOQI/5iyBG/C8gRExlyxH4hOaIZYY4g5Br2C8kRtxHmiCcF5IgjDDniDwE5YjJDjjgkJEc0J8wRhFzDISE54nbCHDFVQI44ypAj/hKQI55hyBFHhOSIFoQ5gpBrOCIkR7QkzBEvCMgRxxhyxN8CcsSLDDniuJAccQdhjiDkGo4LyRF3EuaIVwXkiL8ZcsQpATliGkOOOC0kR7QizBGEXMNpITmiNWGOmCkgRxxnyBHnBOSIWQw54ryQHNGGMEcQcg3nheSItoQ5YraAHHGCIUdEdDY/R7zFkCPSdZaRI9oR5ghCroFr/ahzRHvCHPG2gBxxkiFHZBCQI95hyBEZheSIDoQ5gpBryCgkR3QkzBELBeSIUww5IouAHPEeQ47IKiRHdCLMEYRcQ1YhOaIzYY74UECOOM2QI3IIyBGLGXJETiE5ogthjiDkGnIKyRFdCXPEUgE54gxDjsgjIEd8wpAj8grJEd0IcwQh15BXSI7oTpgjPheQI84y5IibBeSI5Qw5Ir+QHNGDMEcQcg35heSInoQ54gsBOeIcQ44oJCBHrGbIEYWF5IhehDmCkGsoLCRHxBLmiG8E5IjzDDmimIAcsYYhRxQXkiPiCHMEIddQXEiOiCfMEesE5IgLDDmilIAc8T1DjigtJEf4CXMEIddQWkiOSCDMET8JyBEXGXJEOQE5YgNDjigvJEcECHMEIddQXkiO6E2YI7YIyBERDLFyi4AcsZXB7kpCckQfwhxByDVUEpIj+hLmiB0CckQ6hlipKiBH7GSwu5qQHNGPMEcQcg3VhOSI/oQ5Yo+AHBHJECuWgBzxK4PdICRHDCDMEYRcAwjJEQMJc8TvAnJEeoZY8QjIEfsZ7I4SkiMGEeYIQq4hSkiOGEyYIw4JyBEZGGLFJyBH/Mlgd4yQHDGEMEcQcg0xQnLEXYQ54qiAHJGRIVZqC8gRxxjsriMkRwwlzBGEXEMdITliGGGOOBnDY3M6YpuHR8rQc4QQPUcK0fNuIXreI0TPUUL0HC1Ez3uF6HmfED3vF6LnA0L0fFCInmOE6PmQED0fFqLnWCF6jhOi53ghej4iRM8JQvR8VIiejwnRc6IQPR8XoucTQvScJETPJ4XoOZlYT4496MIMe7H1BexBc9jdQMge9FOEe9CEXEMDIXvQTxPuQRcTcE5VnCFWbhWQIzjsbiwkR0whzBGEXENjw/1GxUsJBr9pJiBeOOy+TUi8TCWMF0Ku4TYB8VKSwW9aCIgXDrtbComXZwjjhZBraCkgXkox+E0rAfHCYXdrIfHyLGG8EHINrQXES2kGv2knIF447G4vJF6eI4wXQq6hvZA9jucJ9zjKCdjjKM8QK50E5AgOuzsLyREvEOYIQq6hs5Ac8SJhjrhFQI6oxBAr3QTkCA67uwvJES8R5ghCrqG7kBzxMmGOqCogR7S16OftJSRWXiHkOm8bOr16CYmVVwnXr4aAWLEY6kqcgHrKYXe8kBwxjbCeEnIN8Yb7jYoXYPCbgIB44bC7t5B4mU4YL4RcQ28B8eJi8Jt+AuKFw+7+QuLlNcJ4IeQa+guIFzeD3wwSEC8cdg8WEi8zCOOFkGsYLOSebSbhPVu0gHs2L0OsDBWQIzjsHiYkR8wizBGEXMMwATXVx+A3IwXEC4fddwuJl9cJ44WQa7hbQLzEMPjNaAHxwmH3vULi5Q3CeCHkGu4VEC81GfzmAQHxwmH3g0Li5U3CeCHkGh4UEC+1GPzmYQHxwmH3WCHxMpswXgi5hrEC4qU2g988IiBeOOyeICRe3iKMF0KuYYKAeKnD4DcTBcQLh92PC4mXOYTxQsg1cK1fJPH6zSXcQ68fI8PmeYQ2NxJi89uENjcRYvM7hDbfJuB8qDlDHXhSQP3jsHuykPo3n7D+EXINkwX0i7cz+M0UAfHCYfdUIfGygDBeCLmGqQLipQWD3zwnIF447H5eSLy8SxgvhFwD5fopbjME56qiraUajwyuqfrvGRGZEJkRWRBZEdkQ2RE5EDkRuRC5EXkQeRE3IfIhbkbkRxRAqJ9ML4QojCiCKIoohiiOKIEoiSiFKI0ogyiLKIcoj6iAqIi4BVEJUVnT95HIKzZURVRDVEfUUGuEAIRL+S7Cg4hCRCO8CF/EpZ9xj6iJqIWojaiDqIuoF/SnBoiGiEaIWxGNEU0QTRHNELchmiNuR7RAtETcgbgT0QrRGtEG0RbRDtEe0QHREdEJgZRGdEF0RXRDdEf0QPRE9ELEIuIQ8Qg/IgERQPRG9EH0RfRD9EcMQAxEDEIMRgxB3IUYihiGGI4YgRiJuBtxD2IUYjTiXsR9iPsRDyAeRIxBPIR4GDEWMQ4xXq05YgLiUcRjiImIxxFPICYhnkRMRjyFeBoxBTEV8QziWcRziOcRLyBeRLyEeBnxCuJVxDTEdMRriBmImYhZiNcRbyDeRMxGvIWYg5iLmId4G/EOYj5iAeJdxELEe4hFiPcRHyA+RCxGfIT4GLEEsRTxCeJTxGeIZYjPEcsRKxArEasQXyBWI75EfIX4GvENYg3iW8R3iLWIdYjvET8gfkSsR/yE2IDYiNiE2IzYgtiK2Ib4GbEdsQOxE/ELYhdiN2IP4lfEb4i9iH2I3xH7EQcQBxF/IA4h/kQcRvyFOII4ijiG+BtxHHECcRJxCnEacQZxFnEOcR5xAXERoZJBOkQkIj0iAyIjIhMiMyILIisiGyI7IgciJyIXIjciDyIv4iZEPsTNiPyIAoiCiEKIwogiiKKIYojiiBKIkohSiNKIMoiyiHKI8ogKiIqIWxCVEJURVRBVEdUQ1RE1ECrJAcKFcCM8iChENMKL8CFiEDURtRC1EXUQdRH1EPURDRANEY0QtyIaI5ogmiKaIW5DNEfcjmiBaIm4A3EnohWiNaINoi2iHaI9ogOiI6ITojOiC6IrohuiO6IHoieiFyIWEYeIR/gRCYgAojeiD6Ivoh+iP2IAYiBiEGIwYgjiLsRQxDDEcMQIxEjE3Yh7EKMQoxH3Iu5D3I94APEgYgziIcTDiLGIcYjxiEcQExCPIh5DTEQ8jngCMQnxJGIy4inE04gpiKmIZxDPIp5DPI94AfEi4iXEy4hXEK8ipiGmI15DzEDMRMxCvI54A/EmYjbiLcQcxFzEPMTbiHcQ8xELEO8iFiLeQyxCvI/4APEhYjHiI8THiCWIpYhPEJ8iPkMsQ3yOWI5YgViJWIX4ArEa8SXiK8TXiG8QaxDfIr5DrEWsQ3yP+AHxI2I94ifEBsRGxCbEZsQWxFbENsTPiO2IHYidiF8QuxC7EXsQvyJ+Q+xF7EP8jtiPOIA4iPgDcQjxJ+Iw4i/EEcRRxDHE34jjiBOIk4hTiNOIM4iziHOI84gLiIsI1QikQ0Qi0iMyIDIiMiEyI7IgsiKyIbIjciByInIhciPyIPIibkLkQ9yMyI8ogCiIKIQojCiCKIoohiiOKIEoiSiFKI0ogyiLKIcoj6iAqIi4BVEJURlRBVEVUQ1RHVEDYSEA4UK4ER5EFCIa4UX4EDGImohaiNqIOoi6iHqqB0Q0QDRENELcimiMaIJoimiGuA3RHHE7ogWiJeIOxJ2IVojWiDaItoh2iPaIDoiOiE6IzoguiK6IbojuiB6InoheiFhEHCIe4UckIAKI3og+iL6Ifoj+CPW74uq3sdVvB6vfv1W/D6p+41L9BqD6HTv1u27qN9PU75Gp3/pSv6OlfqNK/f6T+m0l9btF6jeB1O/tqN+yGYNQv8Gift9E/XaI+l0O9ZsXqudSv9WgfgdB/caA+v5+9d346nvn1Xe6q+9LV99Frr73WX13sfpuV/V9leo7+NT3iqnvSlLf96O+D0V9p4f6zgP1uX31eW71mWT1mU31ObTXEOrzAuqZd/VMsHrOUT27pZ5HUWfs6txQnYWo/Xy1v632e9X+p9ofUve8qo9/WDWqwVf+K+Kl3lO9YocPTxg4ZHip4YNLxfr9pe7uO7xPqcEjE4YGBgxWLdKlPjTxVSb4ftugvsP7xg7oOzp2eN/Bg0r1iR3Wp5R/cMKwUoMGDy81MHZ4vGrM/tVVW0mvTBiq/u+GJgwbVqrv5euG90koFT940PChsfHDS/kThgwYPCpBNW6XOtVQtVZVJPFVPvjeaujgkX0H9S41ZETcgL7xpUbGDhiRUKrvoPgBI4YpKwKxfQckqA7zUmlJfBUNvsfHDhhw6f9t2LCEocN7Doy9p2dc3+E9h6El6j/3Df2SoaFfMjz0S+4O/ZJRoV/ycOiXjAv9komhX/JE6Jc8FfolU0K/5OXQL3k19EteC/2SmaFfMi/0S94J/ZJFoV/yQeiXLAv9kuWhX/JN6Jd8G/ol60K/5IfQL9ka+iU/h37J7tAv+TX0S34P/ZIDoV9yLPRLjod+yanQLzkT+iWqLQ7xkoyhX5I99Etyhn5JPu2SqsH3VpebBX/s8NhSw4cmqIbBn3DPpW5nUMVgs6Paj0HYyai/v5lgjvwEczyjzVEu+H7bIOx5+voTG6D+CaOGlerTd9DwUoHB/3Rj6u+eDePa58K49iXt2pQ2ejNScc2K9FeuCbk5/Fa7OIV+tTb0SzaFfsmW0C/5OfRLdoR+yb7QL9kf+iWHQ7/kSOiXHA/9kpOhX/LPwUTKL4kM/ZKMoV+SOfRL8oR+yU2hX1Io9EuKhH5JudAvqRD6JTVCvwRCv8QT+iXRoV9SL/RLGoR+SdPQL7kt9Etahn7JnaFf0in0S7qEfkn30C/pGfolfUK/pF/olwwJ/ZKhoV9yj3ZJapuyUQRzjCaY46Q2R6hN2qkwrj0dxrXntWtT2uhlyhj6NaVTcY1Hu6b0f68ZOGLA8L5DBoz674XRqb3QlwotO2vXJHpOo9hBau8VPf7yrmypIYPV2scORxcK9MXN2lEYD6XiRg1PGKYeKoiYqs2RwsB5NvRLng/9khdDv+TV0C+ZHvolb4V+ydzQL1kQ+iULQ7/kg9AvWRz6JZ+HfsmK0C9ZFfolq0O/5KvQL/km9EvWhX7JD6FfsiEVOWd7ahPcrtRe+FsqtIzPdOWa1GbGVzOFvKDTQ79kRuiXzAr9ktmhXzIn9EveC/2S90O/5OPQL1ka+iXLQr9keeiXfBP6Jd+Gfsna0C/5PvRLfgz9kp9Cv2RL6JdsC/2SndolKc05+7RrQkpwB1N74eFUaPlb5ivXpDYzlswS8oKWDv2SsqFfUj70SyqFfkmV0C/xhH5JdOiX1Ar9kjqhX9Ig9EsahX5Ji9AvuSP0S1qFfkmb0C9pF/olHUK/pGvol3QP/ZJY7ZKU5py+2jUhJbiBqb3wrlRo+VLoi/Fy6Je8FvolM1ORPLJeuSS1WX5I1pD/b4eGfsnw0C8ZGfolo0O/5L7QLxkf+iUTQr/kidAveTL0S6aEfskzoV/yauiXTA/9khmhXzIr9EveCP2S2aFf8nbol8wP/ZL3tEtSmj+XaNeElKw/S+2FK1KhZYlsV65JbWbslC3kBe0S+iXdQr+kR+iXxIV+iT/0SwaGfsn/2jsTOB3r7v/fzGBmGIahLFlD2WfGvqZhylIpSclTGWbUJMYyUrRJKkooFB4qS/aUyb6ERLIkskdZilTW8ijJ323O93FcnZnu8znu/vW8fvfr5XXfPud6X99zvudc3+u6vtcyqXokTY88qkf66pEn9MhAPfKCHhmkR17SI0P0yFA9MkKPjNIjYxgS6JgzgTGqAe4dFJwOeLkZYHahDu5BwXF5LoHl6DvgW73GW+A3LfB0Bge6p9cjc/XIfD2ySI8s0SMf65E1emSDHvlMj2zRI1v1yF498rUeOaBHvtEjR/XIcT1yWo+c0SMhkWokhx7Jq0ei9Ei0HimkR0rokVJ6pLweuV6PVNYjVfVIbT1SV4800CON9MjNeqS5HmmlR+7QI/cwBL25q90VWMe9V2AdO9g6tDd77TSwuwzsV4wN9KD2IMCcYEwD+r4zLbVn4oPJpXo9cmFyIebiI7EXiiW1T3JS1VLc1uvC4W6vC9MPaYk9L/jfM7VrqdiL0ww/AX6cZozquPriK2+UjYUBTF6AqQQwVQGmJsDUzgt2eGOgsWTGFKDv7r17XViod1qp1M6lOqb27pZ0se5TgbX3AZinAeYFgBkJMOXy+bDUXJ9P31glgKkKMKMYU5W+L8xflkrtdiGS5K4pF8YY/0iTXOqR1AczBsNupZIfS+mV5j9N9RsuQtOBlpcwBp05PcPWEeAe9Fc98pse+V2PZI9SI6F6JFKP5NMjBfXIVXqkqB65Ro+U0yPX6ZEKeqSSHqmiR6rpkRp6pJYeqc+QQMecpoxRDeHNUPAWwMspaGPTgcbmMQYdhk/qs/eTHjmtR87okd/0yO96JFd+NRKuR/LqkSg9UlCPXKVHSuqR0nrkWj1STo9cp0cq6JGqeiRGj9RkSKBjTiPGqAa4eBS8CfDyLbSxXgUugeiQOruAOhPv65F0PTJXjyzUI4v1yCo9slqPrNMjG/TI53pkix75Uo/s1SNf65H9euSgHvlWj3yvR37UIycZEuhgdZYxqsHqPAqGROu9rBKt7oxqeqSeHmmgRz5nCDrKRxZUN5tPj+TXI9F65Go9UkSPlNEjZfVIBT1SSY9U0yOxeqSeHmmgRxrpkcZ6JF6PNNUjzfVISz1yO0MCfkKfMarB+j4UTAS8/BBtbDkD0SH1N30mftcj/E25gc7v6pGceiRMj+TXI9F6pLAeKapHSuiRUnqkgh6ppEeq6JFqeiRWj1TXI3X0SD09cgNDAh2smjFGN7OLgrcDXj6KNtYXaOxJtLGngcb6o40NQMGBKDgICG8IwAxFHRyOgq8BXo5EG3sdBUcDXo5FGxuHgm8CXr6NNjYRBScDXk5BG5uGgjMAL2ehjc1GwfcBL9PRxuai4HzAy4VoY4tRcCng5YdoYytQ8CPAy4/Rxtag4FrAy3VoYxtQ8DPAy8/Rxrag4FbAy+1oYzuBxnajje0BGvsKbWwf0NgBtLFvgMZOA8zFP9+IOJgDBcOv0nuZF20sPwoWArzcfvUlphx9B/xU3A4LvNMCH2RwoJef9MgxPXJCj/ykR07rkfN6JFthNZJLj4TrkUg9kk+PFNYjRfVIcT1SUo9cr0cq6pEYPRKnRxrqkRv0SDM90kKP3KpHWumRe/TIvXqkgx7pqEc665GH9EgPPdJLjzyqRx7TI/31yAA9MkiPvKRHXmUI+hzca1dgHSOuwDoKFLm0Du1zcdEGtqCBLcLYgF/ZAzCVGNOAvq3P41UF/KjOmKyf2KrJllQdtTcE3EoAmJYA8xDAdAGYngCThnb4E0Bj4wKugzdRt34D3AotqmfyAExBgCkKMGUBpirA1AGYpgBzJ8B0BJgeAPMMwAwFmPEAMwtglgDMOoDZBTDfAcwZgDnPGNXgk70YCOYspvcyHGAiAaY3Y/BnbQcBLY9lDHpj1Xa2jgCPjnfqkd16ZI8e2adHDuiRH/TIUT1ySo/8rEd+0SNn9UjoNWokpx4J0yMReiSPHsmrR6L1SCE9UpQhgY451zJGNYRfh4KVAC+fRxsbBDQ2kjHoMPy5Pntb9MhWPbJdj+zWI3v0yLd65LAe+VGPHNMjp/TIz3rkdz3iK65GsuuRUD2SU4+E6ZFIPZJPjxRkSKBjTnHGqAa40ihYDvDyabSx1iUugeiQ+koJdSaG6ZFX9cgIPfKGHhmjRybqkcl6ZLoemalH3tMjc/TIYj2yVI98qEdW6JGP9MjHeuRTPbJej3zOkIBnXBijGqz2ouB+wMs8JdWdkVePFNEjxfTIewxBR/kf9M0e1SPH9chJPXJaj5zRI9lKqZEQPRKmRyL0SF49EqVHiuiRYnqkuB4pqUdK65Fr9cj1eqSiHqnGkICvyTBGNVg3QMHGgJfj0cbeZCA6pO4upc7EHj3ylR7Zp0e+0SOH9MhxPXJSj/xHj/yiR87pkfN6JKy0GonQI3n0SF49EqVHCuiRq/VIET1SgiGBDlbXMUY3s4uC1QAv70Ibawc0dj9jsr6RowPq1lbArS8BZj/AfAcwP6AdcRQFj6PgT0B4ZwDmHOrgeRTMVkbvZYEyYGMFUfAqwMtiaGPFUbAk4GVZtLHyKHg94GVFtLHKKFgV8LIe2lgDFGwEeHkX2tjdKNgO8LI92th9KPgA4GUi2lgnFEwGvHwQbSwFBbsAXj6KNvYYCvYFvHwCbewpFHwG8HIgwAxCHXwJaGwo2thwoLHX0MZGAo2NRhsbi4LjAC/fRhubiIKTAS+noY3NQMFZgJfvo42lo+BcwMuFaGNLUXAFCn6MgmtRcAMKfo6CW1FwJwruQcF9KPgNCn6PgidQ8D8oeA4FQ64FwXAUzIuCBVGwKAqWQsFyKFgRBWNQsBYKNkDBeBRsioI3oWAzBga6h2sLMB1QB5NRMAXwsivaWHcUTAO8rFXuEuN+Bvzik9oWuI4FbsLgAK9ZJOiR2/TI7XrkTj1ylx65X4900COd9chDeuQRPdJNj/TRI4/rkSf0yFN65AU9MkiPDNUjw/XIv/XIeD0yRY9M0yMz9ci7emS+HlmoRz7UIyv0yMd6ZI0e2aRHNuuRrXpkux75Wo/s1yOH9cgRPXKCIeirTk5egXWcugLr6FH+0jq0rz7paWB7GdjHGBvoIeaTADOIMQ3o2/rKlZcBP4YzJus7NF5jS+qmkAG3JgLMNIBZDTBrAWYTwGxGO3wX0NjZgOvgHOrW6uv0bm0EmG0AsxdgDgLMUYA5AzDZr9czeQGmOMBUBpj6ANMCYNoBzEMA0wdgngeYkQAzCWDSAWYlwKxljGrwWY+CmwAvtwDMdoC5ocIlBn/lyp0V9C0nMwa9v/5tto5An8zUI5P1yBQ9MkOPzNIj8/TIAj2yVI98qEc+0iMf65GNemSTHtmsR77QI9v0yA49skePfKVHDgJjzo+M0V1/RcGfAS9bVQQba89AdEh9vaI6E6P1yFg9Mk6PvK1HJuqRmXrkXT2Srkfm6pGFemSxHlmlR1brkU/0yKd6ZL0e2ahHtuiRrXpkF0MCHawOoIPVIRT8HvAyoRLY2FWVL4HokNq6sjoTbfRIWz1yjx75lx65X488qEdS9Eg3PdJdj6TpkUf1yNN6pL8eGaBHBuqRF/TIID3yih4ZpkdGMiTgR9YZoxqsJqDgO4CXm/SdsVmP7NEjX+mRXlUuIegoP7uKutn39Ui6HpmrRxbqkcV6ZJUeWa1H1umRDXrkcz2yRY98qUf26pGv9ch+PXJQj3yrR77XIz/qkZMMCfhyGWN0jySjYEhVvZeJVcHGOjIQHVLHV1Vn4i09MkGPTNIjU/XIdD2Srkfm6pFFemSJHlmuR1bqkXV6ZIMe+UyPfK5HtuiRrXpklx75Uo/sAwarI+hgdRQFTwJeFq4GNnZNNX1jpRmT9U0Z16JuPQ249TzAvAwwrwHMKLQj3kDBMSg4HghvAsBMQR2choIzAC+XoI0tQ8HlgJcfo42tQcG1gJcb0cY2oeBmwMsv0Ma2oeAOwMuDaGPfouBhwMvzaGPZYkAwJEbvZQ60sVwoGA54mRttLBIF8wFe5kcbi0bBQoCXpdDGyqBgWcDL8mhj16NgRcDLWLSx6kBjtdHG6gKN1Ucbawg0diPaWBMUTAC8bI421hIFbwW8vANt7E4UvAvwsh3aWHsUvA/wMhFtrBMKJgNepqCNdUHBroCXPdDGeqFgb8DLx9HG+qHgk4CX/dHGBqDgQMDLQWhjL6HgEMDL4Whjr6HgSMDL0WhjY1FwHODl22hjE1FwMuDlNLSxGSg4C/DyfbSxdBScC3i5EG1sMQouBbxcgTb2EQp+DHi5Fm1sHQpuALz8HG1sCwpuBbzciTa2GwX3AF7uQxs7gILfAF5+hzb2PQr+CHh5Am3sFAr+DHj5C9rYWRQ8B3iZLRZsLAQFc8TqvQxHG8uNgpGAl/nRxqJRsBDgZRG0sWIoWBzwsjTa2LUoWA7wsgLaWCUUrAJ4GYs2Vh0FawJe1kUbq4+CDQEvb0AbuxEFmwBe3gEw7VAH70fBjoCXyWhjD6HgI4CXVatfYsrRd8AvH6xmgWMscH0GB3ivUUM9cpMeaaZHWuqRW/VIWz1yjx65X4900CNJeqSzHknVIz30SJoeeVSPPK1H+uuRF/TIID0yQo+M0iNv6pG39cgkPfKOHpmtR97XI/P1yEI9slSPfKhHPtEjn+qRDXrkMz2yQ4/s0iNf65H9euQ7hqCvGzxyBdbx/RVYR0qNS+vQvn7wYQPbxcB2Z2ygh5i9AaY/YxrQt/W1h88BfgxiTNZ3Vr/EltRdsgPcGgswbwPMMoBZATCfAMynaIdvBho7FXAd/Iy6taym3q3VALMRYLYBzEGAOQowZwAmtJaeiQaYMgATCzCNAaYVwNwPMF0B5gmAeQlgxgDMNIBZADBla19i8Jf21amtb7kFY9CnOp9n6wjw2O5FPTJYj7ysR4bpkVf1yFg9Mk6PTNAjk/TIVD0yXY+k65G5emS+HlmoRxbrkaV6ZKUeWaVH1gJjzmbG6B7yQcFdgJc16oCNNWYgOqQ+UUediaf0yDN65Fk98rweeVGPDNcjr+mRN/TIGD0yXo+8pUem6ZEZemSWHpmtR97XI+l6ZIEeWaRHPmRIwCfV6GC1HgU3AV5WrAs2dpaB6JBau546E3X1SH090lCP3KhHmuiRW/TIbXrkTj1ylx5pp0fa65EkPdJZjzykRx7WI4/okW56pJce6a1H+jIk0MFqAGNUg9ULKPgS4OVcfWfM1yMr9cgqPXJP/UsIOsqPqK9udpQeeUOPjNEj4/XIW3pkmh6ZoUfe0yNz9Mg8PbJAj6zQIx/pkY/1yBo9slaPrNMjm/TIZj2ynSGBjp9fM0Y1WB9EwcOAlzc1ABu7mYHokDqggToTA/XIC3pkkB4ZokeG6pE39MgYPfKmHnlbj0zWI1P0yHt6ZI4e+UCPzNMjC/TIIj3yoR5ZoUdWMyTQweozdLDagoLbAS/PoY1la6hvLCdjsr6lIKwh6NZ4wK3JADMDYNLRoOai4ELAy6UAsxJ1cBUKrga83I42thMFdwNefo02th8FDwJefoc29j0K/gh4eQxt7AQKngK8PI82lq0RCIY00ntZFG3sGhQsAXhZCm2sDAqWBbwsjzZ2PQpWBLysjDZWFQVjAC/ro401RMEbAC9vRBtrgoIJgJe3oI3dBjR2O9pYa6Cxtmhj96DgvYCX96ONdUDBjoCXndHGHkLBhwEvu6GNdUfBnoCXj6KNPYaCfQEvn0IbewYFnwW8fB5t7EUUHAx4+Qra2DAUfBXwchTa2BsoOAbwcjza2FsoOAHw8h20sakoOB3w8l20sfdQcA7g5Ty0sQUouAjwchna2HIUXAl4uRpt7BMU/BTwciPa2CYU3Ax4uQ1tbAcK7gK83Is29jUK7ge8/BZt7DAKHgG8PIo2dhwFTwJenkYbO4OCvwJe/o425rsBBLPfoPcyJ9pYGApGAF7mRRuLQsECgJdXoY0VRsGigJcl0MZKoWAZwMvyaGPXo2BFwMuqaGMxKBgHeFkLbawOCtYDvGyENtYYBeMBL29CG2uGgi0AL29DG7sdBVsDXrYBmHsYk/Xl9nvRUO4D3OqgZLJdsLvjgyQfzj7E2CL0fWPPnomP01tLLusVDqaiYF/A247ZMpar7csyJb16d0zrmdgpLfMV1Nd67cB4FLwTCDeJ2Fhtow5sZGhUHWmSIdJuxLIbwnWJ7SZEHJDXDkxAwbuAcHujie1tSGxvNLG9DYl9yprYp9DEPoUm9ilDYgdawx2IhjsQDXegIdwhaB0PMdTxELSOhxjq+HVrYl9HE/s6mtjXDYkdjyZ2vCGx49HEjjckdoo1sVPQxE5BEzvFkNh3reG+i4b7Lhruu4ZwF1kPGBehB4yL0GJeZCjmJehmu8Sw2S5BI11iiHS1tY5Xo3W8Gq3j1YY63oAmdoMhsRvQxG4wJHabNbHb0MRuQxO7zZDYPdZw96Dh7kHD3WMI9xu0jr8x1PE3aB1/Y6jjY9bEHkMTewxN7DFDYk+jiT1tSOxpNLGnDYk9b03seTSx59HEnjckNmd2Y7huBepwHZiAgki4RYmtxNgG9G154TBf91RtQA6cjYKLgJ6YTGySgVXPKjswFQWRWeU1IRnLwScJbgXqkwQHxqMgMoCtJVY9VDsQGarXopGuNUS6hVh47NoiRByQ1w5MQEFk7NqFJnaXIbG70MTuMiT2gDWxB9DEHkATe8CQ2CPWcI+g4R5Bwz1iCPckWscnDXV8Eq3jk4Y6/s2a2N/QxP6GJvY3Q2JDQjOWUyfWgUhiHatOrAORxOYhFk5sHiHigLx2YAIKIomNtoYbjYYbjYYbbQi3JLHwAaNbgfqAsSRazCUNxVwa3WxLGzbb0mikpQ2RVrLWcSW0jiuhdVzJUMdxaGLjDImNQxMbZ0hsfWti66OJrY8mtr4hsfHWcOPRcOPRcOMN4bZA67iFoY5boHXcwlDHbayJbYMmtg2a2DaGxLZHE9vekNj2aGLbGxKbZE1sEprYJDSxSYbEdrGG2wUNtwsabhdDuE8TG4xZZbdu9ayyA2ejIDKr3DBHxnLqLdqByBbtWPUW7UBkix5GLHyS4FagPkkYhoY7zBDuGDSxYwyJHYNGOsYQ6SRi4bFrkhBxQF47MAEFkbFrhjXcGWi4M9BwZxjCnYPW8RxDHc9B63iOoY6XWBO7BE3sEjSxSwyJXWcNdx0a7jo03HWGcMfkzFgO3v24Fah3Pw6MR0FoUCZWvdk6ENlsJ6GRTjJE+i6x+B28QsSB3YhLYAIKInU81xruXDTcuWi4cw3hLkHreImhjpegdbzEUMerrYldjSZ2NZrY1YbEbrWGuxUNdysa7lZDuNeEZSwH737cCtS7HwfGoyBSzOWJVW+2DkQ22/JopOUNkcYQC9dxjBBxQF47MAEFkTqubQ23NhpubTTc2oZwG6F13MhQx43QOm5kqONm1sQ2QxPbDE1sM0Ni77aGezca7t1ouHcbwh2N1vFoQx2PRut4tKGOx1kTOw5N7Dg0seMMie0anrEcfFzhVqA+rnBgPAoi2e1DrLqOHYjUcR800j6GSPsTC9dxfyHigLx2YAIKInX8ojXcF9FwX0TDfdEQ7lC0joca6ngoWsdDDXU82prY0WhiR6OJHW1I7FRruFPRcKei4U41hHtXRMZy8O7HrUC9+3FgPAoixfwAserN1oHIZvsAGukDhkhTiIXrOEWIOCCvHZiAgkgdd7eG2x0NtzsabndDuH3QOu5jqOM+aB33MdRxf2ti+6OJ7Y8mtr8hscOs4Q5Dwx2GhjvMEO4+YpMMrPqZTAemoiDyTOakPBnLwTtatwL1jtaB8SgIvYWIWPUA5UBkgJqCRjrFEOn7xMJb7PtCxAF57cAEFES22AVoYhcYErsATewCQ2JXWBO7Ak3sCjSxKwyJ/cQa7idouJ+g4X5iCHcTWsebDHW8Ca3jTYY63mVN7C40sbvQxO4yJHYfmth9hsTuQxO7z5DYI9bEHkETewRN7BFDYk9Ywz2BhnsCDfeEIdxz1gPGc+gB4zm0mM8ZitkXmbGcerN1ILLZOlYdqQORSCOIhes4Qog4IK8dmICCSB3nRxOb35DY/Ghi8xsSW9Sa2KJoYouiiS1qSGxpa7il0XBLo+GWNoRbAa3jCoY6roDWcQVDHVe3JrY6mtjqaGKrGxJbD01sPUNi66GJrWdIbBNrYpugiW2CJraJIbEtrOG2QMNtgYbbwhDuA8QG45lMt271M5kOnI2CyDOZ+fJmLKfeoh2IbNGOVW/RDkS26DfygZE6EInUsepIHYhE+hOx8OmQW4H6dOgnNNyfDOGeRxN73pDY82ik5w2RhkdlLAeP0m4F6lHagQkoiIzSUdZwo9Bwo9BwowzhXk2suo6vFsLUNqquYwdCL5WyJrY0mtjSaGJLGxIbYw03Bg03Bg03xhDuUWLh3Y9bgXr3cxQt5qOGYv4F3Wx/MWy2v6CR/mKINCR/xnJwHbsVqOvYgQkoiNRxhDXcCDTcCDTcCEO4+YnVTz4KYWob1U8+EojUcTFrYouhiS2GJraYIbEVreFWRMOtiIZb0RDuDPqLrvDux61AvftxYDwKIsU8j1j1ZutAZLOdh0Y6zxDpcmLhOl4uRByQ1w5MQEGkjtdYw12DhrsGDXeNIdyNaB1vNNTxRrSONxrqeIc1sTvQxO5AE7vDkNhD1nAPoeEeQsM9ZAi3UnTGcuo6diBSx45V17EDkTquRSyc2FpCxAF57cAEFEQSG14wYzn4uMKtQH1c4cB4FESyW5BYdR07EKnjgmikBQ2RliAWruMSQsQBee3ABBRE6ricNdxyaLjl0HDLGcKtjNZxZUMdV0bruLKhjmtZE1sLTWwtNLG1DIlNsIabgIabgIabYAj3jHX3cwbd/ZxBi/mMoZhDCmUsp/9zMQRCfy6mEBipA5FII4mF6zhSiDggrx2YgIJIHRe0hlsQDbcgGm5BQ7jF0DouZqjjYmgdFzPUcTlrYsuhiS2HJracIbE1rOHWQMOtgYZbwxBukasylksysOqnTx2YioLI06d7r85YDt7RuhWod7QOjEdBZLPdR6z+GSACoWeA0Ej3GSL9nlh4i/1eiDggrx2YgILQX1JEE3vSkNiTaGJPGhJ71prYs2hiz6KJPWtIbPbCxnDdCtThOjABBaHL8MSq6zhCCFPbqLqOHQhNuVkTWxBNbEE0sQUNiS2GJraYIbHF0MQWMyS2rDWxZdHElkUTW9aQ2ErWcCuh4VZCw61kCLc2sfABo1uB+oCxNlrMtQ3FXA/dbOsZNtt6aKT1DJE2tdZxU7SOm6J13NRQxy3RxLY0JLYlmtiWhsS2sSa2DZrYNmhi2xgS294abns03PZouO0N4XZC67iToY47oXXcyVDHXa2J7Yomtiua2K6GxKahiU0zJDYNTWyaIbFPWhP7JJrYJ9HEPmlI7HPWcJ9Dw30ODfc5Q7ijiQ3G06du3eqnTx04GwWRp09voRbUW7QDkS3aseot2oHQy9yLgZE6EHoLaTEwUgcikW4hFj4dcitQnw5tQcPdYgh3L5rYvYbE7kUj3WuI9DCx8Ch9WIg4IK8dmICCyCh9zBruMTTcY2i4xwzhnkbr+LShjk+jdXzaUMduQTixbgXqxDowAQWRxOazhpsPDTcfGm4+Q7gbaEF49+NWoN79ODAeBaGHCWhB9Wa7Q8iqtlF1pDsMke631vF+tI73o3W831DH31nD/Q4N9zs03O8M4R5H6/i4oY6Po3V83FDHv1oT+yua2F/RxP5qSGx4cWO4bgX6d5YUB8N1IBLu4BIZy8G7H7cC9e7HgfEoiBTzSGLVm60Dkc12JBrpSEOkbxIL1/GbQsQBee3ABBRE6vgda7jvoOG+g4b7jiHcWWgdzzLU8Sy0jmcZ6ni+NbHz0cTORxM735DY1dZwV6PhrkbDXW0IN6JkxnL6m6VK/jFMbaP6m6UIROq4ELFwYgsJEQfktQMTUBBJ7GFi4eMKtwL1ccVhNLuHDdk9hdbxKUMdn0IjPWWI9Jy1js+hdXwOreNzhjoOLWUM161AHa4DE1AQCTc3seo6zi2EqW1UXccOhMZjYvHxWIg4sGGVwAQURBJb1hpuWTTcsmi4ZQ3hbicW3v24Fah3Pw6MR0ForpFY9WbrQGSz3Y9Gut8Q6Q/EwnX8gxBxQF47MAEFkTo+ZQ33FBruKTTcU4ZwfyVWXce/CmFqG1XXsQOROg6lLOLHFaX/GHFghwcEJqAgkthoa7jRaLjRaLjRhnAfuzZjuSQDq3761IGpKIg8fdqwXMZy8I7WrUC9o3VgPAoim21jYtUDlAORAaoxGmljQ6QtiMX/woYQcUBeOzABBZEt9g40sXcYEnsHmtg7DIm915rYe9HE3osm9l5DYhOt4Sai4Sai4SYawk1B6zjFUMcpaB2nGOq4lzWxvdDE9kIT28uQ2L5oYvsaEtsXTWxfQ2IHWBM7AE3sADSxAwyJHWwNdzAa7mA03MGGcEdZDxhHoQeMo9BiHmUo5tHoZjvasNmORiMdbYh0orWOJ6J1PBGt44mGOp6OJna6IbHT0cRONyQ23ZrYdDSx6Whi0w2JXWQNdxEa7iI03EWGcFeidbzSUMcr0Tpeaajj9dbErkcTux5N7HpDYregid1iSOwWNLFbDIn90prYL9HEfokm9ktDYg9Ywz2AhnsADfeAIdwzxAbj6VO3bvXTpw6cjYLI06fTy2cspz/kIBA65CBWf8hBILJF31gBjNSBSKSOVUfqQCTSccTCp0NuBerToXFouOMM4U5FEzvVkNipaKRTDZHOIRYepecIEQfktQMTUBAZpRdaw12IhrsQDXehIdzlaB0vN9TxcrSOlxvq+FNrYj9FE/spmthPDYndaQ13JxruTjTcnYZwX6uYsRy8+3ErUO9+HBiPgkgxjydWvdk6ENlsx6ORjjdEOpVYuI6nChEHttMkMAEFkTqebQ13NhrubDTc2YZw56F1PM9Qx/PQOp5nqOPl1sQuRxO7HE3sckNiP7OG+xka7mdouJ8Zwr2tcsZy8O7HrUC9+3FgPAoixdyOWPVm60Bks22HRtrOEGknYuE67iREHJDXDkxAQaSOH7aG+zAa7sNouA8bwu2B1nEPQx33QOu4h6GO+1kT2w9NbD80sf0MiR1sDXcwGu5gNNzBhnA3onW80VDHG9E63mio453WxO5EE7sTTexOQ2JnVMlYDv+b6rQC/d9UJzAeBaG/qU6s/nSAQOh0AI10niHS5cTipwNCxIEd1ROYgILQ31S3hrsGDXcNGu4aQ7gb0TreaKjjjWgdbzTU8Q5rYnegid2BJnaHIbGHrOEeQsM9hIZ7yBDumKoZy8G7H7cC9e7HgfEoiBTzZGLVm60Dkc12MhrpZEOks4nFpxmFiAObLSQwAQWhaUZruPPQcOeh4c4zhLsUreOlhjpeitbxUkMdr7Emdg2a2DVoYtcYErvNGu42NNxtaLjbDOF2pwJOMrDqp08dmIqCyNOnNatnLAfvaN0K1DtaB8ajILLZ1iFWPUA5EBmg6qCR1jFEGk8svMXGCxEH5LUDE1AQ2WKbo4ltbkhsczSxzQ2JbW1NbGs0sa3RxLY2JLadNdx2aLjt0HDbGcJNROs40VDHiWgdJxrquIs1sV3QxHZBE9vFkNieaGJ7GhLbE01sT0Ni+1kT2w9NbD80sf0MiX3WGu6zaLjPouE+awj3FesB4yvoAeMraDG/Yijm4ehmO9yw2Q5HIx1uiHSstY7HonU8Fq3jsYY6noAmdoIhsRPQxE4wJHaGNbEz0MTOQBM7w5DYOdZw56DhzkHDnWMIdxFax4sMdbwIreNFhjpeZU3sKjSxq9DErjIkdh2a2HWGxK5DE7vOkNgvrIn9Ak3sF2hivzAkdrc13N1ouLvRcHcbwj1ObDCePnXrVj996sDZKIg8fTqhRsZy+kMOAqFDDmL1hxwEIlt0+dpgpA5EInWsOlIHIpE+Syx8OuRWoD4dehYN91lDuEPQxA4xJHYIGukQQ6SvEwuP0q8LEQfktQMTUBAZpcdbwx2PhjseDXe8IdzJaB1PNtTxZLSOJxvqeLY1sbPRxM5GEzvbkNhl1nCXoeEuQ8NdZgj3sToZy8G7H7cC9e7HgfEoiBTzAGLVm60Dkc12ABrpAEOkQ4iF63iIEHFgO00CE1AQqeMR1nBHoOGOQMMdYQh3LFrHYw11PBat47GGOp5sTexkNLGT0cRONiT2A2u4H6DhfoCG+4Eh3OoUJ7z7cStQ734cGI+CSDE3Ila92ToQ2WwboZE2MkTajFi4jpsJEQfktQMTUBCp41bWcFuh4bZCw21lCLctWsdtDXXcFq3jtoY67mBNbAc0sR3QxHYwJDbVGm4qGm4qGm6qIdx0tI7TDXWcjtZxuqGOl1kTuwxN7DI0scsMiR1GxwPwcYVbgfq4woHxKAjdekGs/nSAQOh0AI10rCHSycTipwNCxIEd1ROYgIJIHc+0hjsTDXcmGu5MQ7jpaB2nG+o4Ha3jdEMdL7Umdima2KVoYpcaErveGu56NNz1aLjrDeE+3SBjOXj341ag3v04MB4FkWIeTKx6s3UgstkORiMdbIh0BLH4NKMQcWCzhQQmoCA0zWgNdywa7lg03LGGcCegdTzBUMcT0DqeYKjjmdbEzkQTOxNN7ExDYhdbw12MhrsYDXcxGm4kLUR/UdQXfuFfdvrtX3HohX+N6f8xtk9sOHPuiq67To264bS+YPmdIzjrjsl1YR1NwjLW5fx3bflzE0K/3TL+r3weX9wnlC2fneUzKL7XqVHDv+6cwVh3TEzNi7F7+sWvhYb9sY9ykOZ88f+3MP2OvvCvqcDwfgtqP8XE1MrmaYu37dqM8AWvfrOxdlz7ri1XJ3mor/yfB5PTmqR2uzi2Ne/WKy2xW6fkbMy1HB7Xuc0bqncZ/ydE0PyfSLY8T3mIZ125fRnpyhV2aT1XcpP0ry+MlUwoa8uVWna2TFjY5X3j/l+GxRkedinOi5sp/d+t179J56Tf4WGZc6EeLootk5NxuTxcLub3xWV9l3Ys/v4cT7//mcN/7bggbr5xQRzmLhv+c7Dc+D8hzNbEU+vSroEPa03Z7uIq3yV7QtildTvtJmGYvVkYMpt5hlm/1tzVI+sfnudQ8sH/4bukCN/l8TSm/8dYPnVqJPrXnTsY646Jq8N3SeGsD9w2GcE0N044X/z/fYp++4dZl4cqjHH96mP9lCs4sSRntUtybUb4glb3F3dJuTztu7b4Lsntxi/skm7v3fGRlE5NE9MS2/RMTr47Ja1bcq9efN/j1leFae7bG28VT1v+T4jHH6/de7iVj/0/ZybLSLvaKLa8swXx8DUmkL6+uM/zLJPL46M/XtdHYczv4NRoRo2EB+B3hGcZx+Rifjt/I5jf4cHxO86/vtwB+J3Hs0xu5pvz2/mbJ/h+V5d8kvyO9CyTR/DbxeKWDWHLecfnEMby9kOEPnFMEPuhhhSj1A95PctECv3g4snL+oPXtFuXz7Mun6e9cN/lPjW+MrHGRHricG15TzGvTHtxdbOK1bUZwXwKxpiSz9N+XqGvo4ITf51sbN2u/ShP/P6c5Pdofq4A/XbnJG6ZKOa/W6YA43Kw/9/MmPysPbes03yeNvh5w41sHa6WeX17z+H8TAv6Hbz9XEbfRnr6yOtLDrbMA8y/2+i3v79zMV+d5t2nSPumcE9fRQnr4ts/PwZ3PoUxzfUpP6509ZCHaS7/fMzN7/GXny9cduzKfrtv12c8p2784zWai8XpNOd/fuYTP04KZ9+87q7k1JE0NvPzGNemiyWnZxnH5mDLJNN3Ad8fP0EcL5P4eOFq2vmXj+lumZQs/JTGHmm/5h0fHcPbjWS/XR8Ec8zM5+kDlyveN26Z7ln0gTSteHFMCspcUlxd/2oHsbb/W1usvT/bH0l54/3h+oFvhzwWzrnl+TjmlvduB9KY2Y++pb5F9wd/93m8F32X9L/jPN7T9Du3p/0QYT3ufDSnZz052DJD2LqH0m8+pxHC5oHGCXb3yepYL5TNo4QHMf8Rnvy7tkJZ/G6ZCE/+3f/HsnhyZ5L/cJZ/Vze5wzLncni4KLZMWBZ1Ey7k/1X6HeG7fFy5ksfNPNf+OmtLv/+hlwtr/S/OF2vmhPkxpXdOmM9PZmN5DkpMsRnnoHx+yrUXFoz2YuJisxqX+DxRMOe1Mptrc9uS//i5EMuJ3wnHlHIan5DjznonMr3XhPmJCT8J4Zz/83dIQkhQ2peT4O0nl4T/+pZZEvgVG+dsTs/KvUfaUWx5vgV7rwIEOjvEz6r9/xrT/2OMH2m2mp/pafyMYtxfMfOd2dHndUFvOy6GzxBkNRvhlqnG/HPvLsrnk0f5nIx3mreWvGfe/CpcuMePbB5fqrN1tfIFu69iO/O+cuvmfeT0COZXZv3plqHHTDM9Yw/KFUjKe27mD58ZimC6W6ZBFn7ydbk4vXsK3i9uGelKQqjHh2D3QZ4A+sAt0+RP+sB7VSIkgD7I6qoEj5tvC9l9l/opN2vDu65sHv/d2SzfXrhPOTJZNx9bM8vLFRzLY/n4GyH4HMyb6Hhfu/72br9ZbeN8LHXLtKHvzGZ6vCwf+/8XzmBCg+j33+mGR3620lS4gyXBsz5+01/Qb4SkM5i/8O6N2H/C3RvSGYxjSjlNOsDJ5vvj3Yo5PCvnA+dld4L6Lv8EevDMz3wa03eM8RPF/OHFmgvwMdAztkDjDbvy8cbyE5owoa1gHNx7D279NVEm6G3Higf3Xl/4AXUV5l95+s1PHHMwzTtFz2uGnwSEeVheD5z1+uVODMI9fBBvnRMPCL0HQ/yAKo6+Az0glC5jeQ+c87DfPt/lt9e4ZfltKvyAki/LtznpIJFz/He4h+HjQ4TQTq4sYvHmlNdjTl/m/euWuYG+Mzs5Cs6tNXIdeE9WLCcGUh14Dzq9tyHx28P4pXl+66ZPWJbXQR7WrsTx395buvjYHpZFO+G+y+NtTN8xls+FgxfuU3bWLvcvxON78E4eMw4uvHn1nrzy2TtvvfP6csv82YmCl+X7kftYzP93qeOyz//kpQ7eTg62LJ+w5GPzlTxBz8Havof5kpe1HZRjGjqJ8d6aGMRJoixPYiLYd3D2RRnjTGa3Dmd1EuOYUk7jl2G4s4FchpHuBZMuw/z/TkIwL8NE/Ek/SZdhxCR495h8L+FWHuZZuXTWgl7eCPZlGO+lE7+fEYCfUYz7qy7DeC8h8cscQby0IE7He33h0/FxzD93SYbfFMprxHum5mfuZYz3qIUfHXovvTi9FlvXHUHvn5jOvH+8l174np0fGWXWh24Z9xqSzM4u8gQlloyzC+8NwC42flTolsnqLIivy8Xp3TtIR6qO4WcX3qPLYPdB3gD6wC1z05/0gfdG2pAA+iCv0AeRHh943XkvvUSyNrzryubx/1b65tuL9yxTWjcfT/mZjvfs+y/aDmOls3zvNpbVdijNorhLHJmd9XhZPib/2fjGj7alGSg++7CFfv8zz6Bqxv4vnkH58+TOkpp6bhr8uz5c7NdasLad1pLdTOq0W9xNnUy71d2YybTbSOMPVLRiMbvv20lz4w4/c3RsHtae/x0KDyWmdGueJJ1Xeo/SvB/Pmtom9+yVktqNU7kCXJN0LBu8Gb6Mhwj5J9TTro8iC9JVAfEys/eYnx838wdS+Pjb+Ar5w/cpfB/mPemJ8PjIOX5yGaS8xUj7cW+/BfGhnbj8FC/fDn2+P942EqQ8xfB+5rcY8NlpXrNX8tyOH2uG+i6fPOBXedwylelb2q+H+P54nuj8D5X6rXNszeSOnRMTayfHduwYkxTbqWaNuE51a9ZIrNO5VkzNujF1k2I6J8Yk1uycVCeubmxcXMfOScmdYmt2rJGYlBhbq3qQrp4m8YfieAzBOW6OyfKFCPzKTpDqPzarc4nszA9Xj70y/lxh6+TE/+5g+Cq4m+7bGyIvOZ/wmw9RfBcSIiyb1YefAnm7j7fr/s+HQK+Pkb4/thvIlMdfO68Wk/RPmFcL4sX5TllNvfFDMu9FU+n01S3Dd0duGf6cOD8tbEbfUT75vQPeTY1fwPN//Adq8WwdLn/80Fa6u6wl04I0VHWSprScL8GfYsi4SOHan8Riv51+8zst+alrZnep8lNCb814D9OkO5qt687D1h3uWXcQ+zFO8kny23unVZjgt3fagh8GeO8m5Tc5eMd1b584Joj9UF2KUeoH7xMVuYR+4BeFfcH1u4bkk+S392a2nILfLpYcwfe7puST5Lf3+lUOwW/vky8hPvmGPm/d8fZDhD75C+qulhSj1A/eaeAQoR/4VIYvuH7XlnyS/M7s/TTcbxdL3uD7XUfySfI7s+fhud/e9w+E+C5/5tyty1t3vP0QnzwtHeS6qyvFKPVDZs/8835w8bhlg+h3ouST5Lf3HTJRgt8ulvzB97uj5JPkdwHPMvkFv10sbll+oxh//4W37viURYjQJ47h727h5zwFWD85zb2ulR9PF6TffHq0EP3m06hu2pZPt15Nv/lYVpj57LQi7Lf7Lkq/+TZYjH7zd8a4d1Lzd1W4dfP3EbnYCzDN+RXNNOd/Qaa5OAsxzfUHn652fXk101xfFmaayx2P2+WtKNNcfxRjmusPF7e7+dZ7fBzEc7EkfnzlPV/g00tumWn0ndklQe+xmneaQjqu9R7f8GPWv+Bm8U78WC2rPnDLvJdFH/B3yPDpweC8QyYmyb/aZazt//Ylay+zY+OscuK9+Vx6Okw6t/IeB/LzUe9TW9ITj4vpO7N3yLhtgo9X3vXxc+0r8c6TlWy9q3i7nvX67ZsFu/tkNe/zT3rnySYWz9/xnSdr6Hew33nicu2v3cfp9z/5MnZoEP3+Oz0xyPf9gTwxyC9V83XfzLZ7pzUTLks3Z207rQXb3p3WUrgsfYtwWfpW4bL0bcJl6Vaey9L8UrU77uJPQ3LWO48exBxmeXmFj+3BvL3GO+fhvd7g7+sS9Pu/75tumfx4rxu7Jd2e2DMtJfGRG5OSenreOu098w/kigvXQwTN/+Fn57xXArmr2DtbHe4L2pWGGOnow9uz0lGjd+ZIevQtiH6Lz7BKfmd2JMv95n94JMh+i7PGkt+Z3QTB/fa+nZTPGnsfcQjx/fGitGO8fcJnUYLUD9WlGKV+yOwWf94P3qPeIPpdQ/JJ8tt7M2CE4Lf3kcIg+l1T8knyO7O3mnO/vVcZ+CyKdLUixBOnY7x98hfUXS0pRqkfIj3L5PH9sR/4Ht//CaLf4qyx5Hdms8bcb+9sahD9FmeNJb8zmzXmfmtnjb2z447x9slfUHfirLHUD5nNGvN+kGaNg+S3OGss+Z3ZrDH3W5o1DpLf4qyx5Hdms8bcb2nW2Pv2dqnuePshQp/8BXXXSYpR6odozzIFfH/sBxcPn8Hlb7V3mrPzsy43w8vPutxZHj/rcjO8/KzLzfDysy43w8vHYDfDy8+6+Ayv+3YzvHzsuIbF6bTi9JvPdrszDD7b7fqIz3a7PuZ95fqIz3a7PuJnvK6P+Gy36yM+2+36iM92uz7is92uj3hfuD7is92uj65hmuuj4kxzfeT6wr/+CvT7H/qYdccgzl7XDuaNv3x2hZ+/+D/+unQzG809s2zSzAuv26Zs9iMoswp1atQMYp9X59uHj/VLkO4YrJHVDMnf5XFofuWDj9dZ/QU0lx//Nx9TvHfP8bGsGasnN5bxGbayjGnhmd2LZlo21sbf/S3z1/ou6X/Ht8y7sT+3T54X8b6iy79/cPu4bqlpKZ0fb9IzOTEtOem21LTLpgN5QfOP9xYh3pjP4wS388moXMK6+EeapAvJZDk36PFby3y+ywdC/kRdHFvuH7hDq/u/+NRboDutMN/lB3xX8sk2/uQYZ701GsQ+qpnVzoa/kDRI+Y+VJo2lAcQdrF6Yjr8wEd828ZGUpMS0lNRurZN79E7ulcbn2qWHZd13ZuFmZ1rIn9j5h9+F7O0ivg7vevgrv5wtmC9eCKSbs5qbD2Xxel8tF+yHoXMF4Hdmc/Pcb2luPkh+xwWyX8xqbp77rZ2bD/XE6Rhvn/A5gyD1gzg3L/VDZsebvB+8c/ORPvmtOfzOEKe581Y+Z+C9853vEvguPVRo18XA5wy8dy7n9l3+FMY/cNdfI5jXC4M53vFdv/faaZjv8pw3Ec4bmnjOG/x5dPMXF3ZBrRO7JaV2vSkl+ZGkQK7gej+8qqT3PTmbv4LKUdn8IysoMePMPCgHL3EZB49B+tssl1WQ859f3czs77Fn9jqF7GRzB3wJgs0dSN4k2NwB5c2CzR1YNhNs0qyNs7mz4xaCzd2f0lKwuftUbhFs7n6VWwWbu2/lNsHm7l9pJdjcfSy3C7Y7SLtDsLUmrbVgu5O0OwVbG9LaCLa7SLtLsLUlra1gu5u0uwXbPaTdI9jakdZOsN1L2r2CrT1p7QXbv0j7l2C7j7T7BNv9pN0v2B4g7QHB1oG0DoItkbREwdaRtI6CrRNpnQRbEmlJgi2ZtGTB1pm0zoLtQdIeFGwPkfaQYEshLUWwPUzaw4KtC2ldBNsjpD0i2LqS1lWwdSOtm2BLJS1VsHUnrbtg60FaD8HWk7Segq0Xab0EWxppaYKtN2m9BdujpD0q2PqQ1kewPUbaY4LtcdIeF2x9Sesr2PqR1k+wPUHaE4LtSdKeFGxPkfaUYHuatKcF2zOkPSPY+pPWX7A9S9qzgm0AaQME23OkPSfYBpI2ULA9T9rzgu0F0l4QbC+S9qJgG0TaIME2mLTBgu0l0l4SbC+T9rJgG0LaEMH2CmmvCLahpA0VbMNIGybYhpM2XLC9Stqrgu010l4TbCNIGyHYRpI2UrCNIm2UYHudtNcF2xukvSHYRpM2WrCNIW2MYBtL2ljB9m/S/i3YxpE2TrCNJ228YHuTtDcF21ukvSXY3ibtbcE2gbQJgm0iaRMF2yTSJgm2yaRNFmzvkPaOYJtC2hTBNpW0qYJtGmnTBNt00qYLthmkzRBsM0mbKdhmkTZLsL1L2ruCbTZpswXbe6S9J9jeJ+19wTaHtDmCLZ20dMH2AWkfCLa5pM0VbPNImyfY5pM2X7AtIG2BYFtI2kLBtoi0RYJtMWmLBdsS0pYItqWkLRVsy0hbJtg+JO1DwbactOWCbQVpKwTbStJWCraPSPtIsK0ibZVg+5i0jwXbatJWC7Y1pK0RbJ+Q9olgW0vaWsH2KWmfCrZ1pK0TbOtJWy/YNpC2QbBtJG2jYPuMtM8E2ybSNgm2z0n7XLBtJm2zYNtC2hbB9gVpXwi2raRtFWzbSNsm2LaTtl2w7SBth2DbSdpOwbaLtF2CbTdpuwXbl6R9Kdj2kLZHsO0lba9g+4q0rwTb16R9Ldj2kbZPsO0nbb9gO0DaAcF2kLSDgu0b0r4RbN+S9q1gO0TaIcF2mLTDgu070r4TbEdIOyLYvifte8H2A2k/CLYfSftRsB0l7ahgO0baMcF2nLTjgu0EaScE20nSTgq2U6SdEmw/kfaTYPuZtJ8F22nSTgu2/5D2H8F2hrQzgu0X0n4RbL+S9qtgO0vaWcH2G2m/CbZzpJ0TbL+T9rtgO0/aecF22bstPbZsThNs2UnLLthCSAsRbKGkhQq2HKTlEGw5Scsp2HKRlkuwhZEWJtjCSQsXbBGkRQi23KTlFmx5SMsj2CJJixRseUnLK9jykZZPsEWRFiXY8pOWX7AVIK2AYIsmLVqwFSStoGArRFohwXYVaVcJtqtJu1qwFSatsGArQloRwVaUtKKCrRhpxQTbNaRdI9iKk1ZcsJUgrYRgK0laScFWirRSgq00aaUFWxnSygi2a0m7VrCVJa2sYCtHWjnBVp608oLtOtKuE2zXk3a9YKtAWgXBVpG0ioKtEmmVBFtl0ioLtiqkVRFsVUmrKtiqkVZNsMWQFiPY3MWzWMEWR1qcYKtOWnXBVoO0GoKtJmk1BVst0moJttqk1RZsdUirI9jqklZXsNUjrZ5gq09afcHWgLQGgq0haQ0FWyPSGgm2G0i7QbA1Jq2xYLuRtBsFWzxp8YKtCWlNBFtT0poKtgTSEgTbTaTdJNhuJu1mwdaMtGaCrTlpzQVbC9JaCLaWpLUUbLeQdotgu5W0WwXbbaTdJthakdZKsN1O2u2C7Q7S7hBsrUlrLdjuJO1OwdaGtDaC7S7S7hJsbUlrK9juJu1uwXYPafcItnaktRNs95J2r2BrT1p7wfYv0v4l2O4j7T7Bdj9p9wu2B0h7QLB1IK2DYEskLVGwdSSto2DrRFonwZZEWpJgSyYtWbB1Jq2zYHuQtAcF20OkPSTYUkhLEWwPk/awYOtCWhfB9ghpjwi2rqR1FWzdSOsm2FJJSxVs3UnrLth6kNZDsPUkradg60VaL8GWRlqaYOtNWm/B9ihpjwq2PqT1EWyPkfaYYHuctMcFW1/S+gq2fqT1E2xPkPaEYHuStCcF21OkPSXYnibtacH2DGnPCLb+pPUXbM+S9qxgG0DaAMH2HGnPCbaBpA0UbM+T9rxge4G0FwTbi6S9KNgGkTZIsA0mbbBge4m0lwTby6S9LNiGkDZEsL1C2iuCbShpQwXbMNKGCbbhpA0XbK+S9qpge4201wTbCNJGCLaRpI0UbKNIGyXYXiftdcH2BmlvCLbRpI0WbGNIGyPYxpI2VrD9m7R/C7ZxpI0TbONJGy/Y3iTtTcH2FmlvCba3SXtbsE0gbYJgm0jaRME2ibRJgm0yaZMF2zukvSPYppA2RbBNJW2qYJtG2jTBNp206YJtBmkzBNtM0mYKtlmkzRJs75L2rmCbTdpswfYeae8JtvdJe1+wzSFtjmBLJy1dsH1A2geCbS5pcwXbPNLmCbb5pM0XbAtIWyDYFpK2ULAtIm2RYFtM2mLBtoS0JYJtKWlLBdsy0pYJtg9J+1CwLSdtuWBbQdoKwbaStJWC7SPSPhJsq0hbJdg+Ju1jwbaatNWCbQ1pawTbJ6R9ItjWkrZWsH1K2qeCbR1p6wTbetLWC7YNpG0QbBtJ2yjYPiPtM8G2ibRNgu1z0j4XbJtJ2yzYtpC2RbB9QdoXgm0raVsF2zbStgm27aRtF2w7SNsh2HaStlOw7SJtl2DbTdpuwfYlaV8Ktj2k7RFse0nbK9i+Iu0rwfY1aV8Ltn2k7RNs+0nbL9gOkHZAsB0k7aBg+4a0bwTbt6R9K9gOkXZIsB0m7bBg+4607wTbEdKOCLbvSftesP1A2g+C7UfSfhRsR0k7KtiOkXZMsB0n7bhgO0HaCcF2krSTgu0UaacE20+k/STYfibtZ8F2mrTTgu0/pP1HsJ0h7Yxg+4W0XwTbr6T9KtjOknZWsP1G2m+C7Rxp5wTb76T9LtjOk3ZesF322gCPLZvTBFt20rILthDSQgRbKGmhgi0HaTkEW07Scgq2XKTlEmxhpIUJtnDSwgVbBGkRgi03abkFWx7S8gi2SNIiBVte0vIKtnyk5RNsUaRFCbb8pOUXbAVIKyDYokmLFmwFSSso2AqRVkiwXUXaVYLtatKuFmyFSSss2IqQVkSwFSWtqGArRloxwXYNadcItuKkFRdsJUgrIdhKklZSsJUirZRgK01aacFWhrQygu1a0q4VbGVJKyvYypFWTrCVJ628YLuOtOsE2/WkXS/YKpBWQbBVJK2iYKtEWiXBVpm0yoKtCmlVBFtV0qoKtmqkVRNsMaTFCLZY0mIFWxxpcYKtOmnVBVsN0moItpqk1RRstUirJdhqk1ZbsNUhrY5gq0taXcFWj7R6gq0+afUFWwPSGgi2hqQ1FGyNSGsk2G4g7QbB1pi0xoLtRtJuFGzxpMULtiakNRFsTUlrymyZvSkp3Bekp2Dp6d0gPXsZw9/I4z7+9sKC097FNwHwD3/Dgmszwhe050Evth/mad/7txX4W5H4Cz3c23fCmObeCMTfSnB1dsaQLv3tA1dXfqYMMRdfJkK6+/jz8Xd/21Hp7Jf0v+PbjgrTf9zbjv7sDdf+J8XdW/mSu6akJXTr1PPx7vS2o1tSH/R5PiHC78vayX7JnkNgXF6z0T+uZ/fwbll/LHSacPG7oMfemP4fY/tcvCWmUHDWHcPHHud/IRYTC/uKtcn7nr+kJzvTnD2M+ZLtyvsSy1aZcR7nu/zD38KZTfApgtmu9Audcgdn3Zfl3PmfW8hDqBA7/52dLSvZJS1SaCda0P4fbbA2Eb5ZRgA=","debug_symbols":"","brillig_names":["get_contract_instance_internal","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","key_registry_get_stored_keys_hint","get_public_keys_and_partial_address","notify_created_note","get_key_validation_request","unsafe_rand","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]},{"name":"get_shared_secret","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"member","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_note_internal","decompose_hint","pack_returns","directive_invert","directive_integer_quotient"]},{"name":"get_admin","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"kind":"struct","path":"protocol_types::abis::max_block_number::MaxBlockNumber","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"item","type":{"kind":"struct","path":"protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed","fields":[{"name":"contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"call_context","type":{"kind":"struct","path":"protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"end_gas_left","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::NoteLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::EncryptedLogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"kind":"struct","path":"protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}]}}},{"name":"historical_header","type":{"kind":"struct","path":"protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"protocol_types::content_commitment::ContentCommitment","fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}}]}},{"name":"total_fees","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}]}},{"name":"inclusion_fee","type":{"kind":"field"}}]}}]}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"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","brillig_names":["get_note_internal","decompose_hint","pack_returns","directive_invert","directive_integer_quotient"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"PrivateGroups::get_group_member_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateGroups::get_group_member_parameters","fields":[{"name":"member","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"PrivateGroups::get_admin_abi","fields":[{"name":"return_type","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"PrivateGroups::get_shared_secret_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateGroups::get_shared_secret_parameters","fields":[{"name":"member","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"PrivateGroups::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"PrivateGroups::constructor_parameters","fields":[{"name":"admin","type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"group_members","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}},{"name":"shared_secret","type":{"kind":"field"}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000029ac11aa"},{"kind":"string","value":"StringNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000fc6f65d4"},{"kind":"string","value":"NewAddressNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}]},{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"}]}],"storage":[{"kind":"struct","fields":[{"name":"admin","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"group_members","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"shared_secret","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    // Apply a function to each element of an array, returning a new array\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the array and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given array as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns true if all elements in the array satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the array satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n\n    /// Sorts the array using a custom predicate function `ordering`.\n    ///\n    /// The `ordering` function must be designed to return `true` for equal valued inputs\n    /// If this is not done, `sort_via` will fail to sort inputs with duplicated elements.\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Convert a sequence of bytes as-is into a string.\n    /// This function performs no UTF-8 validation or similar.\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n","path":"std/array/mod.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"24":{"source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n","path":"std/embedded_curve_ops.nr"},"25":{"source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n","path":"std/field/mod.nr"},"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\ntrait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"58":{"source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"65":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"70":{"source":"use dep::aztec::prelude::{NoteInterface, NoteHeader, PrivateContext};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_nullify}, keys::getters::get_nsk_app,\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator}\n};\nuse dep::aztec::{prelude::{Map, PublicMutable, AztecAddress, PrivateImmutable, PrivateMutable}};\n\n\nglobal ADDRESS_NOTE_LEN: u32 = 3;\n// CARD_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ADDRESS_NOTE_BYTES_LEN: u32 = 3 * 32 + 64;\n\n// docs:start:state_vars-CardNote\n#[aztec(note)]\nstruct NewAddressNote {\n    address: AztecAddress,\n    shared_secret: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n}\n// docs:end:state_vars-CardNote\n\n// docs:start:cardnote_impl\nimpl NewAddressNote {\n    pub fn new(address: AztecAddress, shared_secret: Field, npk_m_hash: Field) -> Self {\n        NewAddressNote { address, shared_secret, npk_m_hash, header: NoteHeader::empty() }\n    }\n}\n// docs:end:cardnote_impl\n\n// docs:start:note_interface\nimpl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for NewAddressNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n// docs:end:note_interface\n\n// docs:start:serialize\nimpl Serialize<3> for NewAddressNote {\n    fn serialize(self) -> [Field; 3] {\n        [self.address.to_field(), self.shared_secret, self.npk_m_hash.to_field()]\n    }\n}\n// docs:end:serialize\n\nimpl Eq for NewAddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address)\n            & (self.shared_secret == other.shared_secret)\n            & (self.npk_m_hash == other.npk_m_hash)\n    }\n}","path":"/Users/niallcheetham/Dev/aztec/publicgroups/PublicGroupsRoot/contracts/privategroups/src/types/NewAddressNote.nr"},"71":{"source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Empty,Serialize,Eq}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\n\n\n//going to make the max length 10 characters just to keep it simple\n//pretty sure the only thing that this changes is the amount of compute needed\nglobal STRING_NOTE_LENGTH: Field = 3;\nglobal STRING_NOTE_BYTES_LENGTH: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct StringNote { \n    string: Field,\n    randomness: Field,\n    npk_m_hash: Field,\n}\n\nimpl StringNote {\n    pub fn new(string: Field,  npk_m_hash:Field) -> Self {\n        let randomness = unsafe_rand();\n        StringNote {\n            string,\n            randomness,\n            npk_m_hash,\n            header: NoteHeader::empty()\n        }\n    }\n}\n\nimpl NoteInterface<STRING_NOTE_LENGTH, STRING_NOTE_BYTES_LENGTH> for StringNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n                note_hash_for_nullify,\n                secret\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n                note_hash_for_nullify,\n                secret\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Serialize<3> for StringNote {\n    fn serialize(self) -> [Field; 3] {\n        [self.string, self.randomness, self.npk_m_hash.to_field()]\n    }\n}\n\nimpl Eq for StringNote {\n    fn eq(self, other: Self) -> bool {\n        (self.string == other.string) & (self.randomness == other.randomness) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n","path":"/Users/niallcheetham/Dev/aztec/publicgroups/PublicGroupsRoot/contracts/privategroups/src/types/StringNote.nr"},"73":{"source":"mod types;\n\ncontract PrivateGroups {\n\n    use dep::aztec::{prelude::{Map, PublicMutable, AztecAddress, PrivateImmutable, PrivateMutable}};\n    // use dep::address_note::address_note::AddressNote;\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note_with_keys,\n        keys::getters::get_current_public_keys\n    };\n    use crate::types::StringNote::StringNote;\n    use crate::types::NewAddressNote::NewAddressNote;\n\n\n\n\n\n    global ZERO_ADDRESS: AztecAddress = AztecAddress::from_field(0x0000000000000000000000000000000000000000000000000000000000000000);\n\n\n\n    //TODO:: think about what structure  would be used for the group members\n    //maybe there should be a shared secret for each of the group members through a note. \n    //hashed with the npk_m of the user\n\n    #[aztec(storage)]\n   struct Storage {\n        admin: PrivateImmutable<NewAddressNote>,\n        group_members: Map<AztecAddress, PrivateImmutable<NewAddressNote>>,\n        // shared_secret: PrivateImmutable<StringNote>,\n        shared_secret: Map<AztecAddress, PrivateImmutable<StringNote>>,\n   }\n\n    //use the message sender keys to encrypt the admin address note\n    //just use this for now\n    //TODO:: rethink what i encrypt this witih\n    //.   - shared key generation and adding the addresses into the group, this will be a hash of the members maybe\n    // - group members will have to be a list of addresses, this is crap. Will have to iterate through\n    //.  - the zero addresses in the input, this has to change. This will be input into the function\n    //    -have upper bound of group members as 10\n    // instead of boolean, can use a value note that is either 0 or 1, also this doesnt really matter if they are in the group\n\n    #[aztec(private)]\n   #[aztec(initializer)]\n   fn constructor(admin: AztecAddress, group_members: [AztecAddress; 2], shared_secret: Field) {\n        //setting the admin address note\n        let admin_keys = get_current_public_keys(&mut context, admin);\n        let msg_sender_keys = get_current_public_keys(&mut context, context.msg_sender());\n        let mut admin_address_note = NewAddressNote::new(admin, shared_secret, admin_keys.npk_m.hash());\n        storage.admin.initialize(&mut admin_address_note).emit(encode_and_encrypt_note_with_keys(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin));\n\n        //need to make the shared secret for the group\n        //this isnt something i fully understand so will play around with it, \n        // options - hash of the group members,\n        //         - or a secret that is passed into the contstructor\n        // going with the shared secret for now\n        //using the npk_m hash to store secret for now due to simplicity and lack of understanding, may have to change this\n        //not sure about the randomness bit, if i even need it, just put this as 0 \n\n        //this is the old shared secret, super simple\n        // let mut shared_secret_note = StringNote::new(shared_secret, admin_keys.npk_m.hash());\n        // storage.shared_secret.initialize(&mut shared_secret_note).emit(encode_and_encrypt_note_with_keys(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin));\n\n        //new type of shared secret\n        //if each member was to have their own secret, would u emit event that they can see, need to look more into this, this should get loaded into the users PXE\n        //going to try this with the shared secret now\n        for i in 0..2 {\n            let member = group_members[i as u32];\n            if (member != ZERO_ADDRESS) {\n                let member_keys = get_current_public_keys(&mut context, member);\n                let shared_secret_note = StringNote::new(shared_secret,  member_keys.npk_m.hash());\n                storage.shared_secret.at(member).initialize(&mut shared_secret_note).emit(\n                    encode_and_encrypt_note_with_keys(\n                        &mut context, \n                        msg_sender_keys.ovpk_m, \n                        member_keys.ivpk_m, \n                        member\n                    )\n                );\n            }\n        }\n\n        //  adding the group members to the map\n        for i in 0..2 {\n            let member = group_members[i as u32];\n            if (member != ZERO_ADDRESS) {\n                let member_keys = get_current_public_keys(&mut context, member);\n                let mut memberNote = NewAddressNote::new(member, shared_secret, member_keys.npk_m.hash());\n                storage.group_members.at(member).initialize(&mut memberNote).emit(\n                    encode_and_encrypt_note_with_keys(\n                        &mut context,\n                        msg_sender_keys.ovpk_m,\n                        member_keys.ivpk_m,\n                        member\n                    )\n                );\n            }\n        }\n    }\n   \n\n\n\n    //need to constrain this so that only group members can read this \n    #[aztec(private)]\n    fn get_admin() -> AztecAddress {\n        let admin_note = storage.admin.get_note();\n        admin_note.address\n    }\n    // // // TODO:: BROKEN\n    #[aztec(private)]\n    fn get_group_member(member: AztecAddress) -> AztecAddress {\n        // this is a check to make sure that the user is a group member\n        // do not worry about the assertion for now\n        //interesting, this code only works for immutable notes, need to change for mutable\n\n\n        // let msg_sender_note = storage.group_members.at(context.msg_sender()).get_note();\n        // assert(context.msg_sender() == msg_sender_note.address, \"Not a group member\");\n\n        let member_note = storage.group_members.at(member).get_note();\n        member_note.address \n    }\n\n    //this is the old shared secret\n    // #[aztec(private)]\n    // fn get_shared_secret() -> Field {\n    //     //this is a check to make sure that the user is a group member\n    //     //need to figure out these assertions\n    //     // let msg_sender_note = storage.group_members.at(context.msg_sender()).get_note();\n    //     // assert(context.msg_sender() == msg_sender_note.address, \"Not a group member\");\n    //     let shared_secret_note = storage.shared_secret.get_note();\n    //     shared_secret_note.string\n    // }\n\n    //new type of shared secret\n    #[aztec(private)]\n    fn get_shared_secret(member: AztecAddress) -> Field {\n        let shared_secret_note = storage.shared_secret.at(member).get_note();\n        shared_secret_note.string\n    }\n\n     // unconstrained function to get group_members\n    unconstrained fn is_group_member(member: AztecAddress) -> pub bool {\n        storage.group_members.at(member).is_initialized()\n    }\n\n}\n","path":"/Users/niallcheetham/Dev/aztec/publicgroups/PublicGroupsRoot/contracts/privategroups/src/main.nr"},"75":{"source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal ADDRESS_NOTE_LEN: Field = 3;\n// ADDRESS_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal ADDRESS_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[aztec(note)]\nstruct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/address-note/src/address_note.nr"},"80":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N, M> {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"81":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32, let M: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in \n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the \n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the \n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from \n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    // TODO(#7771): inject compute_note_hash(...) func to notes with macros.\n    let note_hash = note.compute_note_hiding_point().x;\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"83":{"source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N, M> {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N, M> + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32, let M: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, let M: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32, let M: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr"},"86":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"95":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"97":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"102":{"source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\nstruct EncryptedLogIncomingBody<let M: u32> {\n    plaintext: [u8; M]\n}\n\nimpl<let M: u32> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, let N: u32>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, let MR: u32>(\n        event: T,\n        randomness: Field\n    ) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_hiding_point(_self: Self) -> Point {\n            crate::generators::Ga1\n        }\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader {\n            self.header\n        }\n\n        fn set_header(&mut self, header: NoteHeader) {\n            self.header = header;\n        }\n\n        fn compute_nullifier(\n            _self: Self,\n            _context: &mut PrivateContext,\n            _note_hash_for_nullify: Field\n        ) -> Field {\n            1\n        }\n\n        fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] {\n            [self.address.to_field(), self.owner.to_field(), self.randomness]\n        }\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote {\n                address: AztecAddress::from_field(fields[0]),\n                owner: AztecAddress::from_field(fields[1]),\n                randomness: fields[2],\n                header: NoteHeader::empty()\n            }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime\n            {\n                EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n            }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 201, 247, 40, 80, 60, 188, 158, 251, 242, 103, 197, 79, 165, 195, 10, 160, 255, 35, 167, 152, 25, 233, 77, 145, 214, 243, 210, 119, 0, 20, 29, 95, 15, 63, 33, 190, 184, 67, 254, 96, 128, 243, 220, 228, 201, 130, 86, 163, 52, 127, 111, 10, 212, 7, 160, 16, 87, 13, 39, 11, 5, 1, 164, 65, 8, 56, 82, 245, 13, 68, 176, 90, 100, 69, 243, 78, 117, 188, 221, 34, 178, 31, 155, 89, 143, 176, 129, 118, 36, 236, 64, 179, 52, 239, 184, 51, 51, 199, 221, 49, 81, 197, 17, 199, 192, 99, 49, 168, 157, 164, 190, 33, 240, 182, 214, 173, 7, 156, 102, 95, 65, 217, 225, 123, 42, 21, 124, 144\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr"},"103":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr"},"104":{"source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::{get_current_public_keys, get_ovsk_app}, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, iv);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Note: We could save a lot of gates by obtaining the following keys in an unconstrained context but this\n        // function is currently not used anywhere so we are not optimizing it.\n        let ovpk = get_current_public_keys(context, ov).ovpk_m;\n        let ivpk = get_current_public_keys(context, iv).ivpk_m;\n\n        // See the comment in `encode_and_encrypt_note_with_keys_unconstrained` for why having note hash counter\n        // and log hash unconstrained here is fine.\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, iv)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let NB: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr"},"105":{"source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{address::AztecAddress, scalar::Scalar};\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr"},"107":{"source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let NB: u32, let MB: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let NB: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        for i in 0..encrypted_note_log_from_typescript.len() {\n            assert_eq(log[i], encrypted_note_log_from_typescript[i]);\n        }\n        assert_eq(encrypted_note_log_from_typescript.len(), log.len());\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr"},"121":{"source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr"},"122":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"124":{"source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"126":{"source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let NB: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"127":{"source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr"},"128":{"source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"132":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(address: Field, storage_slot: Field, block_number: Field, length: Field) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field\n    )\n}\n\nunconstrained pub fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"133":{"source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"136":{"source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"137":{"source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"144":{"source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"149":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr"},"154":{"source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/initializer.nr"},"155":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/hash.nr"},"157":{"source":"use crate::keys::public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH};\nuse dep::protocol_types::traits::{Serialize, Deserialize};\n\n// This struct represents how public keys are stored in the key registry. We store not just the keys themselves but also\n// their hash, so that when reading in private we can perform a historical read for the hash and then show that it\n// corresponds to a preimage obtained from an unconstrained hint. We do store the keys keys regardless as they might be\n// needed during public execution, and since we need to broadcast and produce hints in some standardized way.\n// While it might seem odd to create a struct for what is effectively some data and a pure function called on it, state\n// variables rely on serializable structs in order to persist data to storage, so we must use this abstraction.\nstruct StoredKeys {\n    public_keys: PublicKeys,\n    hash: Field,\n}\n\nimpl StoredKeys {\n    // Instances of StoredKeys are expected to only be created by calling this function so that we guarantee that the\n    // hash field does indeed correspond to the hash of the keys. Ideally we'd forbid direct access to the struct, but \n    // Noir doesn't yet support private members.\n    fn new(public_keys: PublicKeys) -> Self {\n        Self { public_keys, hash: public_keys.hash().inner }\n    }\n}\n\n// Our serialization is the concatenation of the public keys serialization plush the hash, so we need one extra field.\nglobal STORED_KEYS_LENGTH: u32 =  PUBLIC_KEYS_LENGTH + 1;\n\nimpl Serialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn serialize(self) -> [Field; STORED_KEYS_LENGTH] {\n        // The code below is equivalent to:\n        // [ ...self.public_keys.serialize(), self.hash ]\n\n        let mut array = [0; STORED_KEYS_LENGTH];\n\n        let serialized_keys = self.public_keys.serialize();\n        for i in 0..serialized_keys.len() {\n            array[i] = serialized_keys[i];\n        }\n\n        array[PUBLIC_KEYS_LENGTH] = self.hash;\n\n        array\n    }\n}\n\nimpl Deserialize<STORED_KEYS_LENGTH> for StoredKeys {\n    fn deserialize(array: [Field; STORED_KEYS_LENGTH]) -> Self {\n        // The code below is equivalent to:\n        // Self { public_keys: PublicKeys::deserialize(array[0 : PUBLIC_KEYS_LENGTH]), hash: array[PUBLIC_KEYS_LENGTH] }\n\n        let mut serialized_keys = [0; PUBLIC_KEYS_LENGTH];\n        for i in 0..serialized_keys.len() {\n            serialized_keys[i] = array[i];\n        }\n\n        let hash = array[PUBLIC_KEYS_LENGTH];\n\n        Self { public_keys: PublicKeys::deserialize(serialized_keys), hash }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/keys/stored_keys.nr"},"159":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr"},"161":{"source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, constants::CANONICAL_KEY_REGISTRY_ADDRESS,\n    storage::map::derive_storage_slot_in_map\n};\nuse crate::{\n    context::{PrivateContext, UnconstrainedContext},\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{\n    public_keys::{PublicKeys, PUBLIC_KEYS_LENGTH}, stored_keys::StoredKeys,\n    constants::{NULLIFIER_INDEX, OUTGOING_INDEX}\n},\n    state_vars::{public_mutable::PublicMutable, map::Map}\n};\n\nmod test;\n\n// This is the number of blocks that must pass after a key rotation event until the old keys are fully phased out and\n// become invalid.\nglobal KEY_REGISTRY_UPDATE_BLOCKS = 5;\n\nglobal KEY_REGISTRY_STORAGE_SLOT = 1;\n\n// A helper function that gets app-siloed nullifier secret key for a given `npk_m_hash`. This function is used\n// in unconstrained contexts only - in Note::compute_nullifier_without_context which in turn is called by\n// `compute_note_hash_and_optionally_a_nullifier` function that is used by the NoteProcessor. The safe alternative\n// is `request_nsk_app` function define on `PrivateContext`.\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all current public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_current_public_keys(context: &mut PrivateContext, account: AztecAddress) -> PublicKeys {\n    // We're going to perform historical reads from public storage, and so need to constrain the caller so that they\n    // cannot use very old blocks when constructing proofs, and hence e.g. read very old keys. We are lax and allow\n    // _any_ recent block number to be used, regardless of whether there may have been a recent key rotation. This means\n    // that multiple sets of keys are valid for a while immediately after rotation, until the old keys become phased\n    // out. We *must* be lax to prevent denial of service and transaction fingerprinting attacks by accounts that rotate\n    // their keys frequently.\n    // Note that we constrain the max block number even if the registry ends up being empty: this ensures that proof of\n    // an empty registry is also fresh.\n    let current_header = context.get_header();\n    context.set_tx_max_block_number(current_header.global_variables.block_number as u32 + KEY_REGISTRY_UPDATE_BLOCKS);\n\n    get_historical_public_keys(current_header, account)\n}\n\n// Returns historical public keys for a given account at some block determined by a block header. We read all keys at\n// once since the constraints for reading them all are actually fewer than if we read them one at a time - any read keys\n// that are not required by the caller can simply be discarded.\n// WARNING: if called with a historical header created from a fixed block this function will explicitly ignore key\n// rotation! This means that callers of this may force a user to use old keys, potentially leaking privacy (e.g. if the\n// old keys were leaked). Only call this function with a header from a fixed block if you understand the implications of\n// breaking key rotation very well.\npub fn get_historical_public_keys(historical_header: Header, account: AztecAddress) -> PublicKeys {\n    // TODO: improve this so that we always hint the correct set of keys (either registry or canonical) and hash them\n    // once instead of having two different hints and twice as many constraints due to the double hashing.\n\n    // The key registry is the primary source of information for keys, as that's where accounts store their new keys\n    // when they perform rotation. The key registry conveniently stores a hash of each user's keys, so we can read that\n    // single field and then prove that we know its preimage (i.e. the current set of keys).\n    let key_registry_hash = key_registry_hash_public_historical_read(historical_header, account);\n    if key_registry_hash != 0 {\n        let hinted_registry_public_keys = key_registry_get_stored_keys_hint(\n            account,\n            historical_header.global_variables.block_number as u32\n        );\n        assert_eq(hinted_registry_public_keys.hash().to_field(), key_registry_hash);\n\n        hinted_registry_public_keys\n    } else {\n        // If nothing was written to the registry, we may still be able to produce the correct keys if we happen to know\n        // the canonical set (i.e. the ones that are part of the account's preimage).\n        let (hinted_canonical_public_keys, partial_address) = get_public_keys_and_partial_address(account);\n        assert_eq(\n            account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n        );\n\n        hinted_canonical_public_keys\n    }\n}\n\nfn key_registry_hash_public_historical_read(historical_header: Header, account: AztecAddress) -> Field {\n    // The keys are stored in a Map that is keyed with the address of each account, so we first derive the corresponding\n    // slot for this account.\n    let keys_storage_slot = derive_storage_slot_in_map(KEY_REGISTRY_STORAGE_SLOT, account);\n\n    // The keys are stored as [ ...serialized_keys, hash ], and since arrays get allocated sequential storage slots\n    // (prior to siloing!), we simply add the length to the base slot to get the last element.\n    let hash_storage_slot = keys_storage_slot + PUBLIC_KEYS_LENGTH as Field;\n\n    historical_header.public_storage_historical_read(hash_storage_slot, CANONICAL_KEY_REGISTRY_ADDRESS)\n}\n\nunconstrained fn key_registry_get_stored_keys_hint(account: AztecAddress, block_number: u32) -> PublicKeys {\n    // This is equivalent to the key registry contract having an unconstrained getter that we call from an oracle, but\n    // PXE does not yet support that functionality so we do this manually instad. Note that this would be a *historical*\n    // call!\n\n    // TODO (#7524): call the unconstrained KeyRegistry.get_current_keys() function instead\n\n    let context = UnconstrainedContext::at_historical(CANONICAL_KEY_REGISTRY_ADDRESS, block_number);\n    let keys_storage = Map::new(\n        context,\n        KEY_REGISTRY_STORAGE_SLOT,\n        |context, slot| { PublicMutable::new(context, slot) }\n    );\n\n    let stored_keys: StoredKeys = keys_storage.at(account).read();\n    stored_keys.public_keys\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"162":{"source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\nstruct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\ntrait ToPoint {\n    fn to_point(self) -> Point;\n}\n\nstruct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nstruct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nstruct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr"},"170":{"source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"178":{"source":"use dep::protocol_types::{constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr"},"179":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"220":{"source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr"},"240":{"source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber { _opt: Option { _is_some: serialized[0] as bool, _value: serialized[1] as u32 } }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr"},"262":{"source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        assert(false, \"depth should be between 0 and 10\");\n        0\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr"},"274":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"294":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr"},"295":{"source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"297":{"source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"301":{"source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr"},"302":{"source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"304":{"source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr"},"305":{"source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr"},"310":{"source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"311":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"314":{"source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr"},"342":{"source":"use dep::aztec::{\n    generators::{Ga1 as G_amt, Ga2 as G_npk, Ga3 as G_rnd, G_slot},\n    protocol_types::{\n    traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator,\n    point::{Point, POINT_LENGTH}\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\nuse dep::std::{embedded_curve_ops::multi_scalar_mul};\nuse std::hash::from_field_unsafe;\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    fn compute_note_hiding_point(self) -> Point {\n        // We use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        let amount_scalar = from_field_unsafe(self.value);\n        let npk_m_hash_scalar = from_field_unsafe(self.npk_m_hash);\n        let randomness_scalar = from_field_unsafe(self.randomness);\n        let slot_scalar = from_field_unsafe(self.header.storage_slot);\n        // We compute the note hiding point as:\n        //     `G_amt * amount + G_npk * npk_m_hash + G_rnd * randomness + G_slot * slot`\n        // instead of using pedersen or poseidon2 because it allows us to privately add and subtract from amount\n        // in public by leveraging homomorphism.\n        multi_scalar_mul(\n            [G_amt, G_npk, G_rnd, G_slot],\n            [amount_scalar, npk_m_hash_scalar, randomness_scalar, slot_scalar]\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n\n    // TODO: Merge this func with `compute_note_hiding_point`. I (benesjan) didn't do it in the initial PR to not have\n    // to modify macros and all the related funcs in it.\n    fn to_note_hiding_point(self) -> ValueNoteHidingPoint {\n        ValueNoteHidingPoint::new(self.compute_note_hiding_point())\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    /// The following method needed to be implemented because the note is passed as an argument to a contract function\n    /// --> the serialize method is called by aztec-nr when computing an arguments hash.\n    /// Note that when the note is about to be encrypted and emitted as a log the to_be_bytes function auto-implemented\n    /// by aztec macros is called instead.\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nstruct ValueNoteHidingPoint {\n  inner: Point\n}\n\nimpl ValueNoteHidingPoint {\n    fn new(point: Point) -> Self {\n        Self { inner: point }\n    }\n\n    fn add_value(&mut self, value: U128) {\n        self.inner = multi_scalar_mul([G_amt], [from_field_unsafe(value.to_integer())]) + self.inner;\n    }\n\n    fn add_npk_m_hash(&mut self, npk_m_hash: Field) {\n        self.inner = multi_scalar_mul([G_npk], [from_field_unsafe(npk_m_hash)]) + self.inner;\n    }\n\n    fn add_randomness(&mut self, randomness: Field) {\n        self.inner = multi_scalar_mul([G_rnd], [from_field_unsafe(randomness)]) + self.inner;\n    }\n\n    fn add_slot(&mut self, slot: Field) {\n        self.inner = multi_scalar_mul([G_slot], [from_field_unsafe(slot)]) + self.inner;\n    }\n\n    fn finalize(self) -> Field {\n        self.inner.x\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for ValueNoteHidingPoint {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n","path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.55.1/noir-projects/aztec-nr/value-note/src/value_note.nr"}}}