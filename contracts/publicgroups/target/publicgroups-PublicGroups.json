{"transpiled":true,"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"PublicGroups","functions":[{"name":"in_group","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"group_member","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRQAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAkrAAADCEQ6AAAACEQAAAABHgAAAAUeAAAABjEAAAAABQAAAAYAAAAHJAACAQYKAAIHBgUhAAAQAAU7AQAAHgALAAYkAAcBBwoABwYHBSEAABUABTsBAAAkAAcCByoAAAYkAAQDBQAABAAFACQBBAEGAAAEBgIFKgAFCCoCBwgAAAQIAggqAgMIJAAEAAUAAAQGAgkkAAQCCkIEAAAABQAAAAgAAAAJAAAACiQABwAGCgAHCAYHJAABAAMKAAEHAwohAAApAAo7AQAAKgAAByQABAIDAAAEAAMAJAEEAQcAAAQHAgMqAAMKKgIGCioBBwMAAAQDAgMqAgMHKgAAAwAABAACACoCBwMqAAUEIAA4CgAEBAUHIQAAQwAHIAA7KgEDBAAABAQCBgAABAYFByoBBwMcAAEDBBwABwQFHAABBQMjKgEDBxwABwQGAAAHCAYJLQAAAAAJAAAABiQABAEKDAAEBAoLIQAASwALOwEAACsAAAcIAyUABAACCAQiAAAAWisACAUACQAABAkCCwAABAsECioCBgokAAQBBgAABAQGBw4ABAQHCyEAAFcACzsBAAAqAgkDKgAHBCAAOCsBCAMIBgsABAgGAAIIByEAAF4IByAAYCsACAMIBSAAbisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABsCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAGMlAQQAAQgFIABuIysAGMoYyg==","debug_symbols":"5ZvRjtowEEX/Jc88zHjGY5tfqaoV7MIqEoIVsJUqtP/ehBKHhtTRLqXyyC8ogZv4jBP7jofkVL2slu+vT/V2vTtU82+narN7Xhzr3bbZO33MquW+3mzq16frrytoP8JZfnhbbNu9w3GxP1ZzdIZn1Wr70m4SNydY15tVNXfN5o04kLtog3VRigIjWobgL2JG6NXBjYhFQC5iEWOuxd9nFcLd5AgYxXAlfjw73t/rjrpeD1O9jobjiQkgTe4ChovYBbkhN/+QvOn0P9HbBujRDfCjG7CPbkDubsASdGJLZuqOsAG6O0KQhneE+yRNe4z/wjHh88cY+MIx42OTfDf4kdFMXD6D3dh02F89Z8fGpu36FoOPWoKxCxGsj4NeuIegdoIZUfeTG/RiE85RmiKipCKi5CKitEVEKUVE6YqI0hcRZSghSoIioiwi96Eich8qIvchLiLK+3MfBO4KEtgsKifiZMRY6vDpE4vrukT81VLVnxdTJFrBnVZwrxU8KAVn0Ao+7faEU+DOj4L70aqT+A7HOsB01ckym07MPKw6sVHMTorZWTG7VcwuitmdYnavmD3oZbegmF2xr1rFvmoV+6rNfH6XENkdDNkzn2e8jewBB+zy/+cZiTgOZYLddI9WWOqlhOe/gQX1ohu96KQEnfkGnfWiW73omWe/qZld8s5+rYmOamn4pJLk7UoW3N/ZXebZb+CendLiYCBWwQ3JMNDMU+VU6uAyT5WT7Jmnykl2VsyeeQkqyZ75EiXJnrkJJ9kzL0El2RUvDX3mJpxkV+yrXrGvesW+6hX7qlfsq16xr3q1vvrR7P1Y7OvFcrO6vCS1ft8+X70zdfz59vuXRvwL","brillig_names":["in_group"],"assert_messages":{"40":"Storage slot 0 not allowed. Storage slots must start from 1.","74":"Array index out of bounds","15":"Not initialized","20":"Function in_group can only be called statically","86":"attempt to add with overflow"}},{"name":"add_to_group","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"member","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRQAAJAAEAgUkAAQABh8AAAAABgAAAAUAAAhDHQABCEQIRCsACEMAAysACEQABCIAAAAKOgAAAAhFAAAAAB4AAAAGHgAAAAcxAAAAAAYAAAAHAAAACCQAAgEHCgACCAcGIQAAEQAGOwEAACoAAAckAAQCCAAABAAIACQBBAEHAAAEBwIIKgAIBiQABwAJKgIJBioBBwgAAAQIAggqAggHKgAACAAABAACACoCBwgkAAQAByoABwUgACIKAAQFBwYkAAQBCiEAAMMABiAAJioBCAUAAAQFAgsAAAQLBwwqAQwIHgACAAUKAAcIBQshAAAuAAs7AQAAKgAACCQABAMFAAAEAAUAJAEEAQgAAAQIAgUqAAULJAAHAgwqAgwLAAAECwILKgIDCwAABAgCCyQABAINQgQAAAAHAAAABQAAAAsAAAANCgAHBQkIJAABAAwKAAEIDA0hAABAAA07AQAAHAAHBAgqAAcGIABDCgAEBgcLIQAArAALIABGIQAASAAEIAB+KgAABiQABAIFAAAEAAUAJAEEAQYAAAQGAgUqAAUEKgIJBCoBBgUAAAQFAgUqAgUGKgAABQAABAACACoCBgUqAAcIIABXCgAECAcJJAAHBAYhAACWAAkgAFsqAQUIAAAECAIEAAAEBAcLKgELBRwABQUEHAAHBAgcAAUIBSQABQEIAAAFBQgEDgAFBQQLIQAAZwALOwEAABwABwQIKgAHCSAAagoABAkHBSEAAH8ABSAAbSQABAEIJAAEAgYAAAQIBgcqAAAJAAAEAAcAJAEEAQkAAAQJAgcqAggHJAAEAgcAAAQJBwgqAAgHKgIDBwAABAkCBioBBgcAAAQGAgg1AQAAAAgAAAAHIAB+IxwABwkFAAAHBgUEKgAABSQABAILAAAEAAsAJAEEAQUAAAQFAgsqAAsMKgIIDCQABAEMDAAECQwNIQAAjAANOwEAAAAABAUCDQAABA0JDCoBDAsuAAAAAAsAAAAEAAAECQoLDgAECQsEIQAAlAAEOwEAACoACwkgAGoqAQUJHAAHCAQAAAcGBAstAAAAAAsAAAAEJAAEAQYMAAQIBgwhAACeAAw7AQAAKwAACQgDJQAEAAIIBCIAAADaKwAIBQALAAAECwIMAAAEDAgGKgIEBgAABAgKCQ4ABAgJBCEAAKkABDsBAAAqAgsFKgAJCCAAVxwABwYLAAAHBQsMKgAACyQABAINAAAEAA0AJAEEAQsAAAQLAg0qAA0OKgIIDiQABAEODAAEBg4PIQAAuQAPOwEAAAAABAsCDwAABA8GDioBDg0uAAAAAA0AAAAMAAAEBgoNDgAEBg0MIQAAwQAMOwEAACoADQYgAEMqAQgGHAAHBQskAAcBDAAABwwLDS0AAAAADQAAAAwkAAQBCwwABAULDiEAAMwADjsBAAArAAAGCAMlAAQAAggEIgAAANorAAgFAA0AAAQNAg4AAAQOBQsqAgwLAAAEBQoMDgAEBQwGIQAA1wAGOwEAACoCDQgqAAwFIAAiKwEIAwgGCwAECAYAAggHIQAA3ggHIADgKwAIAwgFIADuKwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAOwICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAA4yUBBAABCAUgAO4jKwAYyhjK","debug_symbols":"5Z3bbtswDIbfJde9ICmRovoqwzCkWzsECNKh7QYMxd59ThfLObg0lp5I+KZIGsr6ZMv6JYoCHxffrq9+fv+y2tzc3i8uPz0u1rdflw+r20337fHPxeLqbrVer75/2f/3ArZ/EJ7s738sN9uv9w/Lu4fFJRbKF4vrzbftx5S7K9ys1teLy9J9PDGuqexsK5dmigIjthmq7owzwmBdy4ixCMjOWIRo3/jzxQLxxeQI2Ixhz/jt2enld72k/q7XqbuOlNuFE4BNXirWnXGpckKeXpG8u+mH6NsK8ltXwG9dgbx1BWW0gircF6qapnp+6fsydlUMNeiYNYvCzpoLoN1/OGfqjXNOx/1HA7PXuOwEgdkxMDsFZk+B2XNgdg7MLoHZA+sqBdZVCqyrKbCuJudjpNTGXuCY3Xl/V27sFY/Z37+/t0tzQbHZt9drl8Zh/Zcwb+EzRIbHyPDPTCW1f00I9rwSo/CZBHsXBkmdcGEU7h07UsqxIyBPTQ4JEPZptmXyGWX4jDKjkxCC5gUhEJ1YgVN/o2oZ3l8sPPbcGIbuMzw1GLuplbX5bSTvPeOtj2jEevBPwWBM9amVZRat1Fm0ss6hlQyzaCXOopU0i1amWbQyz6KVPItWzmLuw7OY+/As5j788rkPQpbRRdloOzO2RRBOXFhKf0tEy8FarwMXiAqOUcEpKniKCp4nwZUmwEl6JySS6kENIzTQVvYCOhGrkErv+0h131/ytE0u5d3RSRs6T6B342fvXek+6pF3pYx3dOR+0CUsk/3lg9zKJQVmz4HZOTC7BGYvgdk1MHuNy64QmB0DswfWVQ2sqxpYV9X5+G5tk1fn76q1TV7f/139n83aNGwap5KPFx81RYbPkeE5DLziCbxEhi+R4adnwnoQtb8tU/+/TOcAPacQnlOIzin0zMBF0grxxzl8kKj5qCml44eIIO9O/2o+H4Tx7kTNLU809f4U6Z1benjo6NRUEXtyRc7HMOMHwz4KBj3BkCeY5Akme4JhTzDiCaZ4glFPMJ5GYPI0ApOnEZg8jcDkaQQmTyMwFd+TMW1OH62nJ7TVN7wUC776hq99F+MKJ6dsE0SGx8jwFBk+RYbPkeE5Mrxzj4EN71xhbXjnCmvDR1bYHFlhc2SFzZEVNjtX2ObX7uCzbVwT9hw18WlLncvxsy19gncuxza8czm24Z3LsQnPzkOSrDAHZN9xDkzN1cDpZLXOvoOSGIoF7zwqaVA0TmlCFKidv6+U5KSlOW4sDbLz4GAb3nl0sA3vPHzMhnceH2zDOw8QNuHFuRzb8IHDDlGcxwjb8M7l2IaPrLASWWElssJKZIWVyAorkRW2TB8mVrfb0yX5hje3p585ZekG3vSCFo4ML5HhnR/otuE1MnwNDK8QGR4jwztXWBveucLa8JEVViMrrEZWWI2ssOpcYV9ve1qdy7G5z1idy7EN71yObXjncmzDO0+KYW5PV99ZMezt6eo7LYa9PV195wmYgHeeGOPV9tYJnKfRsByJBM7zU9nwzhNU2fDOM1TZ8DkyvHM5tuGdJ6my4Z1nqbLhA6ftIXAuxyY8RlZYjKywGFlhMbLCYmSFxbAK+6f79mt5t1pera93Cchvfm6+7uUjf/j9498vnfFf","brillig_names":["add_to_group"],"assert_messages":{"16":"Not initialized","45":"caller is not admin","157":"Array index out of bounds","192":"attempt to add with overflow","147":"attempt to add with overflow","139":"Array index out of bounds","168":"attempt to add with overflow","184":"Array index out of bounds","203":"Array index out of bounds","63":"Storage slot 0 not allowed. Storage slots must start from 1.","214":"attempt to add with overflow","102":"attempt to add with overflow"}},{"name":"member_count","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM6AAAACEMAAAABHgAAAAQeAAAABTEAAAAABAAAAAUAAAAGJAACAQUKAAIGBQQhAAAPAAQ7AQAAHgALAAUkAAcBBgoABwUGBCEAABQABDsBAAAqAAAFJAAEAgYAAAQABgAkAQQBBQAABAUCBioABgQkAAcAByoCBwQqAQUGAAAEBgIGKgIGBSoAAAYAAAQAAgAqAgUGJAAEAAcqAAcDIAAlCgAEAwcFIQAAMQAFIAAoKgEGBQAABAUCBAAABAQHAyoBAwYcAAUGBRwABwUHHAAFBwYqAAYDIyoBBgUcAAcDBCQABwQIAAAHCAQJLQAAAAAJAAAABCQABAEIDAAEAwgKIQAAOgAKOwEAACsAAAUIAyUABAACCAQiAAAASSsACAUACQAABAkCCgAABAoDCCoCBAgkAAQBBQAABAMFBA4ABAMECiEAAEYACjsBAAAqAgkGKgAEAyAAJSsBCAMIBgsABAgGAAIIByEAAE0IByAATysACAMIBSAAXSsAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABbCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFIlAQQAAQgFIABdIysAGMoYyg==","debug_symbols":"1ZrbbsIwDIbfJddcxHFiN7zKNE3lqEpVQRwmTYh3X8vawAoKAtYpvkEN/Gk+cvDvWj2o2XyyX34U1WK1VeO3gypX03xXrKq6dTiO1GRTlGWx/Lj8WunmIzvJt+u8alrbXb7ZqTGwsSM1r2bNJdr6BouinKsx15dXYo/car3jIAXSN7RW+6wVW9BntecbYiJNrZjImEvx+0j5l8FBQxDrC/Hg6KBfn3TGbtL9vUkHY8ONUes4OXvwrZg9XZHDH5LXk/4bvRnADD0ADj2AHXoA9/IADnUndmju7QjndbcjCLC/I+hBmqYPP9Ene6KPf7yPuX02HXanAhzdjSvcRQqoF/C8ftnNtaCsm17HGuJr4aw1ndja/loYEMxuBLOjYHYrmN0JZifB7CyYPRPM7uWyo2BfRcG+ioJ9FQX7KiYeI8kHdtY9dpv4Wc1cYPfQZ///s0oBh4Hi7IBBDMhnDoTTo501kuFRMrwVA5/BFbyTDE+S4RPPyGJR3qUd5Z0J7lrXqPrsaWdkTnOEPe2MLM6eeEbm7Zkd42JvdCihG6T+H7VyUyCXeFkkyp54WSTKnnjKH2VPvCwSZU/chGPsJPhRixIvi0TZEy+LRNkTN+Eou2BfJcG+SoJ9lQT7Kgn2VRLsqyzWV4916zPfFPmknLdvby321fTiZa7d1/rnl1r8DQ==","brillig_names":["member_count"],"assert_messages":{"69":"attempt to add with overflow","57":"Array index out of bounds","14":"Not initialized","19":"Function member_count can only be called statically"}},{"name":"set_balance","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"debtor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_balance"],"assert_messages":{"640":"attempt to add with overflow","387":"Storage slot 0 not allowed. Storage slots must start from 1.","314":"Storage slot 0 not allowed. Storage slots must start from 1.","180":"Storage slot 0 not allowed. Storage slots must start from 1.","433":"Storage slot 0 not allowed. Storage slots must start from 1.","497":"Array index out of bounds","40":"Storage slot 0 not allowed. Storage slots must start from 1.","482":"attempt to add with overflow","543":"Array index out of bounds","412":"Storage slot 0 not allowed. Storage slots must start from 1.","607":"Array index out of bounds","674":"Array index out of bounds","729":"attempt to add with overflow","16":"Not initialized","141":"Storage slot 0 not allowed. Storage slots must start from 1.","266":"Storage slot 0 not allowed. Storage slots must start from 1.","336":"Storage slot 0 not allowed. Storage slots must start from 1.","528":"attempt to add with overflow","589":"Array index out of bounds","574":"attempt to add with overflow","656":"Array index out of bounds","696":"Array index out of bounds","629":"Array index out of bounds","349":"attempt to subtract with overflow","474":"Array index out of bounds","20":"cannot adjust someone else's balances","718":"Array index out of bounds","520":"Array index out of bounds","69":"Creditor is not in group","505":"attempt to add with overflow","566":"Array index out of bounds","112":"Debtor is not in group","365":"Storage slot 0 not allowed. Storage slots must start from 1.","298":"attempt to subtract with overflow","551":"attempt to add with overflow","618":"attempt to add with overflow","685":"attempt to add with overflow","664":"attempt to add with overflow","85":"Storage slot 0 not allowed. Storage slots must start from 1.","213":"Storage slot 0 not allowed. Storage slots must start from 1.","597":"attempt to add with overflow","707":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"128":"Array index out of bounds","448":"Array index out of bounds","378":"Initializer address is not the contract deployer","576":"Array index out of bounds","372":"Initialization hash does not match","494":"Array index out of bounds","558":"Array index out of bounds","750":"Array index out of bounds","479":"attempt to add with overflow","543":"attempt to add with overflow","732":"Array index out of bounds","726":"attempt to add with overflow","656":"Array index out of bounds","522":"Array index out of bounds","135":"Array index out of bounds","644":"attempt to add with overflow","705":"Array index out of bounds","382":"invalid admin","830":"Array index out of bounds","818":"attempt to add with overflow","672":"Array index out of bounds","90":"attempt to add with overflow","471":"Array index out of bounds","590":"attempt to add with overflow","846":"Array index out of bounds","456":"attempt to add with overflow","514":"Array index out of bounds","124":"attempt to add with overflow","697":"Array index out of bounds","502":"attempt to add with overflow","764":"attempt to add with overflow","685":"attempt to add with overflow","859":"attempt to add with overflow","664":"Array index out of bounds","405":"Storage slot 0 not allowed. Storage slots must start from 1.","146":"attempt to add with overflow","530":"Array index out of bounds","713":"Array index out of bounds","838":"Array index out of bounds"}},{"name":"balance","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"debtor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRgAAJAAEAgUkAAQABh8AAAAABgAAAAUAAAhDKwAIQwADKwAIRAAEIgAAAAorAAADCEU6AAAACEUAAAABHgAAAAYeAAAABzEAAAAABgAAAAcAAAAIJAACAQcKAAIIBwYhAAARAAY7AQAAHgALAAckAAcBCAoABwcIBiEAABYABjsBAAAqAAAIJAAEAwcAAAQABwAkAQQBCAAABAgCByoABwYqAgMGAAAEBgIGKgIEBiQABAAHAAAECAIJJAAEAgpCBAAAAAcAAAAGAAAACQAAAAokAAcDCCoAAAQkAAQDAwAABAADACQBBAEEAAAEBAIDKgADCioCCAoAAAQKAgoqAgYKAAAEBAIKJAAEAglCBAAAAAcAAAADAAAACgAAAAkkAAcABgoABwMGBCQAAQAICgABBAgJIQAANgAJOwEAACoAAAgkAAQCBAAABAAEACQBBAEIAAAECAIEKgAECSoCBgkqAQgEAAAEBAIEKgIECCoAAAQAAAQAAgAqAggEKgAHBSAARQoABAUHBiEAAE4ABiAASCoBBAYAAAQGAgUAAAQFBwMqAQMEKgAEAyMqAQQGHAAHBQgAAAcDCAktAAAAAAkAAAAIJAAEAQoMAAQFCgshAABWAAs7AQAAKwAABggDJQAEAAIIBCIAAABlKwAIBQAJAAAECQILAAAECwUKKgIICiQABAEGAAAEBQYIDgAEBQgLIQAAYgALOwEAACoCCQQqAAgFIABFKwEIAwgGCwAECAYAAggHIQAAaQgHIABrKwAIAwgFIAB5KwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAHcICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAAbiUBBAABCAUgAHkjKwAYyhjK","debug_symbols":"5ZvdjtowEIXfJddczPhn7OFVqmoFu7BCQrACtlKF9t2b0MRJQ+pol7ryyDcoIceZb6zYczRKrtXLZv3++rQ7bI/navntWu2Pz6vL7nioz64fi2p92u33u9en4d8VND8IN/35bXVoTs+X1elSLdEps6g2h5fmUJv6DtvdflMtXX14J2btWi1bF6RIMKE1wL4VG4RezW5CTATUiomUGoq/LyrEh8kRMIhhIE7Prh6fdae7Wee5WUdlwo01QJzcMXIrdkx35PofkteT/id6E8CkDmBTB6DUAdzDAayGTmy1mnsiLEP3RBDq8RPhP0nTjOHPj1HwhTH4hTF/WZsGwhi28dlV3qlWrBj7JaT4FkCnDmBSB7CpA1DqAC51AJ86ACcOoCF1AEwdIPVK1qlXsk69kvX0SvZguwBew0ytUtgZEYd9qXJ2yojYAM4+aDVMVR22PjgcMj24btzUhLp3cnCXJRWRpSsiS19EllxClgaKyBKLyFIVkaUuIktTRJZFeB9ThPcxRXgf87j3QTBdXxLr3tJMngYxdDx9/MbkuikhP+hY+VtPxbBQcAtSwVEquJIKrqWCm1lwMwvu/CS4n2w+k+9wrIN+r51sPltjuv5FfThuPlsrmJ0EszvB7F4wO8tlJxDMjoLZlWB2LZhdcF0lwXWVBNdVynx/Jw7sDkbsLvN9xtvAzjhm///7DAUchxRnR9bhfRAethDw9j6IM5LhrWT4zK1kdLnmvdVYFbZJq8dvofm8raQFF2HP3Eqy6dl1XMwKQmtTaRonKrge+Mx9Z5Q9c98ZZc/cd0bZM/edUfbM+zlR9syLcJQ9c78fY+fM+zlR9syLcJRdcF1lwXWVBddVFlxXWXBdZcF1lcXW1Y/67MfqtFut95v2C7jt++F58EHc5efb7yu1+Bc=","brillig_names":["balance"],"assert_messages":{"16":"Not initialized","21":"Function balance can only be called statically","53":"Storage slot 0 not allowed. Storage slots must start from 1.","85":"Array index out of bounds","97":"attempt to add with overflow"}},{"name":"split_group_balance","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"debtors","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},"visibility":"private"},{"name":"participants","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["split_group_balance"],"assert_messages":{"160":"Debtor is not part of the group","189":"Storage slot 0 not allowed. Storage slots must start from 1.","218":"attempt to add with overflow","349":"Array index out of bounds","299":"Array index out of bounds","360":"attempt to add with overflow","133":"Storage slot 0 not allowed. Storage slots must start from 1.","281":"Array index out of bounds","310":"attempt to add with overflow","339":"attempt to add with overflow","45":"cannot adjust someone else's balances","234":"Storage slot 0 not allowed. Storage slots must start from 1.","266":"attempt to add with overflow","65":"Storage slot 0 not allowed. Storage slots must start from 1.","94":"Must be part of the group","289":"attempt to add with overflow","321":"Array index out of bounds","111":"Array index out of bounds","332":"attempt to add with overflow","41":"Not initialized","99":"attempt to add with overflow"}},{"name":"make_payment","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"debtor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["make_payment"],"assert_messages":{"247":"Array index out of bounds","17":"Not initialized","302":"attempt to add with overflow","171":"attempt to subtract with overflow","37":"Storage slot 0 not allowed. Storage slots must start from 1.","66":"Creditor is not in group","229":"Array index out of bounds","258":"attempt to add with overflow","109":"Debtor is not in group","138":"Storage slot 0 not allowed. Storage slots must start from 1.","167":"Insufficient balance, or paying more than is owed","237":"attempt to add with overflow","269":"Array index out of bounds","187":"Storage slot 0 not allowed. Storage slots must start from 1.","280":"attempt to add with overflow","82":"Storage slot 0 not allowed. Storage slots must start from 1.","291":"Array index out of bounds"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":6,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"admin","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM6AAAACEMAAAABHgAAAAQeAAAABTEAAAAABAAAAAUAAAAGJAACAQUKAAIGBQQhAAAPAAQ7AQAAHgALAAYkAAcBBQoABwYFBCEAABQABDsBAAAqAAAGJAAEAgQAAAQABAAkAQQBBgAABAYCBCoABAckAAcACCoCCAcqAQYEAAAEBAIEKgIEBioAAAQAAAQAAgAqAgYEJAAEAAgqAAgDIAAlCgAEAwgHIQAALgAHIAAoKgEEBwAABAcCBgAABAYIBSoBBQQqAAQDIyoBBAccAAcDBgAABwUGCS0AAAAACQAAAAYkAAQBCgwABAMKCyEAADYACzsBAAArAAAHCAMlAAQAAggEIgAAAEUrAAgFAAkAAAQJAgsAAAQLAwoqAgYKJAAEAQYAAAQDBgcOAAQDBwshAABCAAs7AQAAKgIJBCoABwMgACUrAQgDCAYLAAQIBgACCAchAABJCAcgAEsrAAgDCAUgAFkrAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQAAVwgKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIABOJQEEAAEIBSAAWSMrABjKGMo=","debug_symbols":"1ZrdbsIwDIXfJddcxHHi1LzKNE1lA1SpKoifSRPi3ZeyNrCCgoAxxTeohZPkI4l93Kg79TGdbOdvVTNbrNX4ZafqxXu5qRZNuNvtR2qyquq6mr+dfq10+1Ec5Otl2bR360252qgxeGNHatp8tJdoQwezqp6qsQ+XZ2JG32nZ+SgF0he0VnPRiS3oo5r9BTGRpk5MZMyp+HWk+GFw0BDF+kT8dHTQj0+6x37S+dqkg7GxY9Q6Te4ZuBN7pjNy+EPyMOm/0dsBzLMHwGcPYJ89gHt4AIe6Fzs013aEY93vCAIc7gi6kaZt4+9oU9zRhm9vYy7HpjF9kgvR5K7lFd9nCggLeFy/4uJaUNFPr/Ma0mvhrDW92NrhWhgQzG4Es6NgdiuY3QlmJ8HsXjB7IZid5bKjYF9Fwb6Kgn0VBfsqZp4jiSO71wN2m3msFi6yMwzZ/z9WKeJ4oDR721/sGo5P1wiHhw9rJMOjZPjMy7FkuOadapyJaTIcNgzZ8y7HnPYJ9szLMbZHdkyL2cToYIM0+KNOsB+4zGu3JHvmtVuSPfPaLcluBbNnfiaSZM/chJPsmdf7SfbMz0SS7JmbcIqdBPsqCfZVEuyrJNhXSbCvkmBfJbG+ug93n+WqKif1tHuVZbZt3k/ebNl8LX9+CeJv","brillig_names":["admin"],"assert_messages":{"53":"Array index out of bounds","65":"attempt to add with overflow","14":"Not initialized","19":"Function admin can only be called statically"}},{"name":"remove_from_group","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"member","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRQAAJAAEAgUkAAQABh8AAAAABgAAAAUAAAhDHQABCEQIRCsACEMAAysACEQABCIAAAAKOgAAAAhFAAAAAB4AAAAGHgAAAAcxAAAAAAYAAAAHAAAACCQAAgEHCgACCAcGIQAAEQAGOwEAACoAAAckAAQCCAAABAAIACQBBAEHAAAEBwIIKgAIBiQABwAJKgIJBioBBwgAAAQIAggqAggHKgAACAAABAACACoCBwgkAAQAByoABwUgACIKAAQFBwYkAAQBCiEAAMMABiAAJioBCAUAAAQFAgsAAAQLBwwqAQwIHgACAAUKAAcIBQshAAAuAAs7AQAAKgAACCQABAMFAAAEAAUAJAEEAQgAAAQIAgUqAAULJAAHAgwqAgwLAAAECwILKgIDCwAABAgCCyQABAINQgQAAAAHAAAABQAAAAsAAAANCgAHBQkIJAABAAwKAAEIDA0hAABAAA07AQAAHAAHBAgqAAcGIABDCgAEBgcLIQAArAALIABGIQAASAAEIAB+KgAABiQABAIFAAAEAAUAJAEEAQYAAAQGAgUqAAUEKgIJBCoBBgUAAAQFAgUqAgUGKgAABQAABAACACoCBgUqAAcIIABXCgAECAcJJAAHBAYhAACWAAkgAFsqAQUIAAAECAIEAAAEBAcLKgELBRwABQUEHAAHBAgcAAUIBSQABQEIAgAFBQgEDgAFCAULIQAAZwALOwEAABwABwQIKgAHCSAAagoABAkHBSEAAH8ABSAAbSQABAEIJAAEAgYAAAQIBgcqAAAJAAAEAAcAJAEEAQkAAAQJAgcqAggHJAAEAgcAAAQJBwgqAAgHKgIDBwAABAkCBioBBgcAAAQGAgg1AQAAAAgAAAAHIAB+IxwABwkFAAAHBgUEKgAABSQABAILAAAEAAsAJAEEAQUAAAQFAgsqAAsMKgIIDCQABAEMDAAECQwNIQAAjAANOwEAAAAABAUCDQAABA0JDCoBDAsuAAAAAAsAAAAEAAAECQoLDgAECQsEIQAAlAAEOwEAACoACwkgAGoqAQUJHAAHCAQAAAcGBAstAAAAAAsAAAAEJAAEAQYMAAQIBgwhAACeAAw7AQAAKwAACQgDJQAEAAIIBCIAAADaKwAIBQALAAAECwIMAAAEDAgGKgIEBgAABAgKCQ4ABAgJBCEAAKkABDsBAAAqAgsFKgAJCCAAVxwABwYLAAAHBQsMKgAACyQABAINAAAEAA0AJAEEAQsAAAQLAg0qAA0OKgIIDiQABAEODAAEBg4PIQAAuQAPOwEAAAAABAsCDwAABA8GDioBDg0uAAAAAA0AAAAMAAAEBgoNDgAEBg0MIQAAwQAMOwEAACoADQYgAEMqAQgGHAAHBQskAAcBDAAABwwLDS0AAAAADQAAAAwkAAQBCwwABAULDiEAAMwADjsBAAArAAAGCAMlAAQAAggEIgAAANorAAgFAA0AAAQNAg4AAAQOBQsqAgwLAAAEBQoMDgAEBQwGIQAA1wAGOwEAACoCDQgqAAwFIAAiKwEIAwgGCwAECAYAAggHIQAA3ggHIADgKwAIAwgFIADuKwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAOwICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAA4yUBBAABCAUgAO4jKwAYyhjK","debug_symbols":"5Z3bbtswDIbfJde9ECmRFPsqwzCkWzsECNKh7QYMxd59dhfbaezQWHoi4ZvBWSnpoy3rlykKelx9u776+f3LZndze7+6/PS42t5+XT9sbnfNr8c/F6uru812u/n+5fC/V6n9B9KT/f2P9a79ef+wvntYXYJguVhd7761l7k0NdxstterS2kuR8aaZW+rJL0pcJqwLUnr3rhAGqxVJoyZE++NmREPjT9frABeTA4JeuN0YPz27Pjyuy65u+s6d9cBS19xTskmFwXdG4vyiDy/Inlz05+jtw2Ut26A3roBfusGZKoBLAD7QlhQ53q+dH0ZmiaGFuqUNXFNe2uSBHb/oVKwMy4lH/efGphd47JjCswOgdkxMHsOzF4Cs1Ngdg7MHlhXMbCuYmBdzYF1NTsfI1l7dknH7M77e6WeXeGY/f37O/c4Amyzt/X1VcPw/ZehtPAlRYaHyPAnppKZenjKNnxB7jxtLnUmhCHUBXZY5DgQUOYnh8SHNG2ZckYZOqPMiUmIdm8wEsx9gWNXv8rw/oLQ1HOjrl7QOjy1NHVTlWoft+Fy8IzbGNGE9RCfSoNx00dbL2URXtZFeKlL8JLSIryERXiJi/AyL8LLsggvaRFeLmLuQ4uY+9Ai5j708rkPpMKTH2WTfg7fDgWqXTFLB8FVnn3rNeCcooJDVHCMCp6jgpdZcJypH5C7ICRgrc9amKBJfcSEU53JVcjShQizHsZLnpbJWd4dHWuPTjPozfjZRVeay3oUXZHpjk7a+duAzfaXDworSw7MXgKzU2B2DswugdlrYHaNy15TYHYIzB5YV2tgXa2BdbU6H9+tZXJ1/q5ay+T6/u/q/yzW5t4YspTjjw/NkeFLZHgKA19hBM+R4SUy/PxMOKdD+LaM/n+ZJgB6TiE4pxCeU+jEwCXYR0304wI+gNjHqDHn44cIid+d/tViPpCmuxNrn+AjOJPgI9wF2uvzTUdj0wrQkVegcgwzvTHso2DAEwx6gsmeYIonGPIEw55gxBNM9QTjaQRGTyMwehqB0dMIjJ5GYPQ0Ap/YT+NmMlb7oE/V8Q7t6huexYJX3/DadTHSNNple2JLTRB4iAyPkeFzZPgSGZ4iwzuPGNjwzhXWhneusDZ8ZIUtkRW2RFbYEllhi3OFpTzAF9tYM3QcmmnsqXM5PunpE7xzObbhncuxDe9cjk14cp6SZKU5APnOcyDsQw2UR1/r5DspiZJY8M6zkgZFo5xnRAH7/feKmUeelri5NEDOk4NteOfZwTa88/QxG955frAN7zxB2IRn53JswwdOOwR2niNswzuXYxs+ssJyZIXlyArLkRWWIyssR1ZYmd9M/KH7Q83lacm+4c3l6RO7LN3Am1FQocjwHBne+YZuG75GhtfA8DVFhofI8M4V1oZ3rrA2fGSFrZEVtkZW2BpZYatzhX295enqXI7NdUZ1Lsc2vHM5tuGdy7EN7/xQDHN5Wn2fimEvT6vvYzHs5Wn1fU7ADLzzgzFebW0dk/NjNKxAIibn51PZ8M4PqLLhnZ9QZcOXyPDO5diGd35IlQ3v/JQqGz7wsT2YnMuxCQ+RFRYiKyxEVliIrLAQWWEhrML+aX79Wt9t1lfb6/0B5Dc/d18PziN/+P3j318a478=","brillig_names":["remove_from_group"],"assert_messages":{"16":"Not initialized","45":"caller is not admin","157":"Array index out of bounds","192":"attempt to add with overflow","147":"attempt to add with overflow","139":"Array index out of bounds","168":"attempt to add with overflow","184":"Array index out of bounds","203":"Array index out of bounds","63":"Storage slot 0 not allowed. Storage slots must start from 1.","214":"attempt to add with overflow","102":"attempt to subtract with overflow"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"group_members","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"group_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"member_count","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"PublicGroups::constructor_parameters"}}],"kind":"struct","path":"PublicGroups::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"member","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"approve","type":{"kind":"boolean"}}],"kind":"struct","path":"PublicGroups::add_to_group_parameters"}}],"kind":"struct","path":"PublicGroups::add_to_group_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"group_member","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"PublicGroups::in_group_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"PublicGroups::in_group_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"member","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"approve","type":{"kind":"boolean"}}],"kind":"struct","path":"PublicGroups::remove_from_group_parameters"}}],"kind":"struct","path":"PublicGroups::remove_from_group_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"PublicGroups::admin_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"PublicGroups::admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"debtor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"PublicGroups::set_balance_parameters"}}],"kind":"struct","path":"PublicGroups::set_balance_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"debtor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"PublicGroups::make_payment_parameters"}}],"kind":"struct","path":"PublicGroups::make_payment_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"debtor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"PublicGroups::balance_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"PublicGroups::balance_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"creditor","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}},{"name":"debtors","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"protocol_types::address::aztec_address::AztecAddress"}}},{"name":"participants","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"PublicGroups::split_group_balance_parameters"}}],"kind":"struct","path":"PublicGroups::split_group_balance_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"PublicGroups::member_count_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"PublicGroups::member_count_abi"}]}},"file_map":{"123":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"136":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"160":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"161":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"166":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"175":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"184":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"229":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"238":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"29":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"304":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"306":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"307":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"309":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"310":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"313":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"314":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"322":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"354":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note,\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"74":{"path":"/Users/niallcheetham/dev/aztec/publicgroups/PublicGroupsRoot/contracts/publicgroups/src/main.nr","source":"mod test;\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract PublicGroups {\n\n    use dep::aztec::{\n        prelude::{Map, PublicMutable, AztecAddress},\n        macros::{storage::storage, events::event, functions::{public, initializer, private, internal, view}}\n    };\n    use dep::std::hash::pedersen_hash;\n    use dep::std::collections::bounded_vec::BoundedVec;\n    use dep::std::collections::vec::Vec;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: PublicMutable<AztecAddress, Context>,\n        group_members: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        group_balances: Map<Field, PublicMutable<Field, Context>, Context>,\n        member_count: PublicMutable<u64, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.group_members.at(admin).write(true);\n        storage.member_count.write(1);\n\n        // Emit event for the admin assignment\n        context.emit_unencrypted_log([admin.to_field()]);\n    }\n\n    // Helper functions to read variables when testing\n\n    // Read the admin\n    #[public]\n    #[view]\n    fn admin() -> pub Field {\n        storage.admin.read().to_field()\n    }\n\n    // Read the group members\n    #[public]\n    #[view]\n    fn in_group(group_member: AztecAddress) -> pub bool {\n        storage.group_members.at(group_member).read()\n    }\n\n    // Read the member count\n    #[public]\n    #[view]\n    fn member_count() -> pub u64 {\n        storage.member_count.read()\n    }\n\n    // Read the balance between two addresses\n    #[public]\n    #[view]\n    fn balance(creditor: AztecAddress, debtor: AztecAddress) -> pub Field {\n        let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        storage.group_balances.at(key).read()\n    }\n\n    // Functional methods\n\n    #[public]\n    fn add_to_group(member: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        storage.group_members.at(member).write(approve);\n        if approve {\n            storage.member_count.write(storage.member_count.read() + 1);\n\n            // Emit event for the member addition\n            context.emit_unencrypted_log([member.to_field()]);\n        }\n    }\n\n    #[public]\n    fn remove_from_group(member: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        storage.group_members.at(member).write(approve);\n        if approve {\n            storage.member_count.write(storage.member_count.read() - 1);\n\n            // Emit event for the member removal\n            context.emit_unencrypted_log([member.to_field()]);\n        }\n    }\n\n    // This sets balances but only between two people\n    #[public]\n    fn set_balance(creditor: AztecAddress, debtor: AztecAddress, amount: Field) {\n        assert(creditor == context.msg_sender(), \"cannot adjust someone else's balances\");\n        assert(storage.group_members.at(creditor).read() == true, \"Creditor is not in group\");\n        assert(storage.group_members.at(debtor).read() == true, \"Debtor is not in group\");\n\n        // Hash the addresses together\n        let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        let balance = storage.group_balances.at(key).read();\n        let amount_to_write = amount + balance;\n        storage.group_balances.at(key).write(amount_to_write);\n\n        // Adjust the balances\n        let creditor_debtor_hash = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        let balance_creditor_debtor = storage.group_balances.at(creditor_debtor_hash).read() as u64;\n\n        let debtor_creditor_hash = pedersen_hash([debtor.to_field(), creditor.to_field()]);\n        let balance_debtor_creditor = storage.group_balances.at(debtor_creditor_hash).read() as u64;\n\n        if balance_creditor_debtor > balance_debtor_creditor {\n            let difference = balance_creditor_debtor - balance_debtor_creditor;\n            storage.group_balances.at(creditor_debtor_hash).write(difference.to_field());\n            storage.group_balances.at(debtor_creditor_hash).write(0.to_field());\n        }\n\n        if balance_debtor_creditor > balance_creditor_debtor {\n            let difference = balance_debtor_creditor - balance_creditor_debtor;\n            storage.group_balances.at(debtor_creditor_hash).write(difference.to_field());\n            storage.group_balances.at(creditor_debtor_hash).write(0.to_field());\n        }\n\n        if balance_creditor_debtor == balance_debtor_creditor {\n            storage.group_balances.at(creditor_debtor_hash).write(0.to_field());\n            storage.group_balances.at(debtor_creditor_hash).write(0.to_field());\n        }\n\n        // Emit event for the balance set\n        context.emit_unencrypted_log([creditor.to_field(), debtor.to_field(), amount.to_field()]);\n    }\n\n    #[public]\n    fn make_payment(creditor: AztecAddress, debtor: AztecAddress, amount: u64) {\n        assert(storage.group_members.at(creditor).read() == true, \"Creditor is not in group\");\n        assert(storage.group_members.at(debtor).read() == true, \"Debtor is not in group\");\n        let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n        let balance = storage.group_balances.at(key).read() as u64;\n        assert(balance >= amount, \"Insufficient balance, or paying more than is owed\");\n\n        let amount_to_write = balance - amount;\n        storage.group_balances.at(key).write(amount_to_write.to_field());\n\n        // Emit event for the payment\n        context.emit_unencrypted_log([creditor.to_field(), debtor.to_field(), amount.to_field()]);\n    }\n\n    #[public]\n    fn split_group_balance(creditor: AztecAddress, debtors: [AztecAddress; 10], participants: u64, amount: u64) {\n        assert(creditor == context.msg_sender(), \"cannot adjust someone else's balances\");\n        assert(storage.group_members.at(creditor).read() == true, \"Must be part of the group\");\n\n        let amount_per_participant = amount / (participants as u64 + 1);\n\n        for i in 0..10 {\n            let debtor = debtors[i as u32];\n            if debtor.is_zero() {\n                continue;\n            } else {\n                assert(storage.group_members.at(debtor).read() == true, \"Debtor is not part of the group\");\n                let key = pedersen_hash([creditor.to_field(), debtor.to_field()]);\n                let current_balance = storage.group_balances.at(key).read() as u64;\n                let new_balance = current_balance + amount_per_participant;\n                storage.group_balances.at(key).write(new_balance.to_field());\n\n                // Emit event for the split\n                context.emit_unencrypted_log([creditor.to_field(), debtor.to_field(), amount_per_participant.to_field()]);\n            }\n        }\n    }\n}\n"},"76":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/address-note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"82":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"97":{"path":"/Users/niallcheetham/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"}}}